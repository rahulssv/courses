{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#about-me","title":"About Me","text":"<p>Hello, I'm Rahul Vishwakarma, and I specialize in DevOps. My expertise encompasses a range of technologies and practices, including:</p> <ul> <li>Docker: I've developed applications utilizing Docker networks, and have experience deploying simple applications using Docker Compose.</li> <li>Kubernetes: I've deployed full-stack applications on Rocks clusters, showcasing my proficiency in orchestrating complex environments.</li> <li>OpenShift: I've worked with OpenShift to manage containerized applications efficiently.</li> <li>CI/CD with Jenkins: I've scripted pipelines for seamless build, test, and deployment processes.</li> <li>GitHub Actions: I've configured workflow files to automate various tasks and streamline development workflows.</li> <li>Terraform: I'm skilled in infrastructure as code and have utilized Terraform for provisioning and managing resources.</li> <li>Power Linux Porting: I've contributed by writing build scripts for porting packages to Linux on Power architecture.</li> <li>Shell Scripting: I'm proficient in shell scripting to automate tasks and streamline operations.</li> <li>Git &amp; GitHub: I have a strong foundation in version control and collaborative development using Git and GitHub.</li> <li>Open Source Contribution: I've actively contributed to projects like Redis, demonstrating my commitment to the open-source community.</li> </ul> <p>Additionally, I hold a PDEA Certification as a junior Java backend developer from PSL and have practical experience in Java development with Spring Boot. I'm also familiar with Python, showcased through my college project on SMART Traffic Light system. Furthermore, I have experience in C++ and JavaScript.</p> <p>I'm excited about the opportunity to discuss how my skill set aligns with the needs of your team and how I can contribute to your organization's success. Thank you for considering my application.</p>"},{"location":"API/rest-api/","title":"Rest API","text":""},{"location":"API/rest-api/#tour-batch","title":"Tour Batch","text":"<ul> <li>(GET)getBatches <code>localhost:8080/batches</code></li> <li>(GET)getBatchByID <code>localhost:8080/batches/2</code></li> <li>(GET)status <code>localhost:8080/metadata/status</code></li> <li>(POST)addBatch <code>localhost:8080/tours</code> <pre><code>  {\n    \"startDate\": \"2023-11-03\",\n    \"capacity\": 1,\n    \"perParticipantCost\": 6000.00,\n    \"guide\": {\n        \"name\": {\n            \"first\": \"Tusar\",\n            \"last\": \"Gandi\"\n        },\n        \"mobile\": {\n            \"number\": \"9900000010\"\n        }\n    }\n}\n</code></pre></li> <li>(PUT)updateBatches <code>localhost:8080/tours/1</code> <pre><code>{\n        \"id\": 2,\n        \"startDate\": \"2023-11-01\",\n        \"endDate\": \"2023-11-04\",\n        \"status\": \"ACTIVE\",\n        \"capacity\": 2,\n        \"perParticipantCost\": 5000.0,\n        \"availableSeats\": 10,\n        \"guide\": {\n            \"sequence\": 0,\n            \"name\": {\n                \"first\": \"Tushar\",\n                \"last\": \"Gandhi\"\n            },\n            \"mobile\": {\n                \"number\": \"9900000010\"\n            }\n        },\n        \"tour\": {\n            \"id\": 1,\n            \"name\": \"MUMBAI-NASIK\",\n            \"mode\": \"BICYCLE\",\n            \"itinerary\": {\n                \"dayPlans\": [\n                    {\n                        \"dayCount\": 1,\n                        \"place\": \"Mumbai\",\n                        \"distance\": 0.0,\n                        \"activity\": \"reporting between 5 pm to 7 pm. Introduction, tour briefing and ice breaker\",\n                        \"accomodation\": {\n                            \"hotelName\": \"Hotel Mayur\",\n                            \"address\": \"SB road, Thane\",\n                            \"roomType\": \"TWIN_BED\"\n                        }\n                    },\n                    {\n                        \"dayCount\": 2,\n                        \"place\": \"NASIK\",\n                        \"distance\": 150.0,\n                        \"activity\": \"Ride on Mumbai Agra road\",\n                        \"accomodation\": {\n                            \"hotelName\": \"Dwaraka\",\n                            \"address\": \"Dwaraka\",\n                            \"roomType\": \"TWIN_BED\"\n                        }\n                    },\n                    {\n                        \"dayCount\": 3,\n                        \"place\": \"NASIK\",\n                        \"distance\": 0.0,\n                        \"activity\": \"Breakfast, Certifiate distribution and tour ends. Participants return home\",\n                        \"accomodation\": {\n                            \"hotelName\": \"Dwaraka\",\n                            \"address\": \"Dwaraka\",\n                            \"roomType\": \"TWIN_BED\"\n                        }\n                    }\n                ]\n            },\n            \"days\": 3,\n            \"nights\": 2,\n            \"difficultyLevel\": \"MODERATE\",\n            \"startAt\": \"Mumbai\",\n            \"endAt\": \"Nasik\"\n        },\n        \"bookings\": []\n    }\n</code></pre></li> <li>(DELETE)deleteBatch <code>localhost:8080/batches/1</code></li> </ul>"},{"location":"API/rest-api/#booking","title":"Booking","text":"<ul> <li>(GET)getBookings <code>localhost:8080/bookings</code></li> <li>(POST)bookParticipants <code>localhost:8080/batches/book</code> <pre><code>{\n    \"date\" : \"2023-10-15\",\n    \"amount\" : 10000.00,\n    \"username\" : \"harsh@gmail.com\",\n    \"batchId\" : 3,\n    \"travellers\" : [\n        {\n            \"name\" : {\n                \"first\" : \"Bhavana\",\n                \"last\"  : \"Pradhan\"\n            },\n            \"mobile\" : {\n                \"number\" : \"999999922222\"\n            }\n        },\n        {\n            \"name\" : {\n                \"first\" : \"Ramesh\",\n                \"last\"  : \"Pradhan\"\n            },\n            \"mobile\" : {\n                \"number\" : \"999999922222\"\n            }\n        }\n    ]\n}\n</code></pre></li> </ul>"},{"location":"API/rest-api/#tour","title":"Tour","text":"<ul> <li>(GET)getTours <code>localhost:8080/tours</code> <pre><code>{\n                    \"bookingDate\":\"12-10-2023\",\n                    \"participants\":[\n                        {\n                            \"name\":{\n                                \"first\":\"Rohit\",\n                                \"last\":\"Vishwakarma\"\n                            },\n                            \"email\":{\n                                \"id\":\"rohit@gmail.com\"\n                            },\n                            \"mobile\":{\n                                \"number\":\"7972614545\"\n                            }\n\n                        }\n\n\n\n\n                        {\n                            \"name\":{\n                                \"first\":\"Rahul\",\n                                \"last\":\"Vishwakarma\"\n                            },\n                            \"email\":{\n                                \"id\":\"rahul@gmail.com\"\n                            },\n                            \"mobile\":{\n                                \"number\":\"8788582604\"\n                            }\n\n                        },\n\n\n\n                        \"guide\":{},\n            \"bookings\":[\n\n                    ]\n                }\n            ]\n</code></pre></li> <li>(GET)getTourById <code>localhost:8080/tours/1</code></li> <li>(GET)DifficultyLevels <code>localhost:8080/metadata/difficultyLevels</code></li> <li>(GET)Modes <code>localhost:8080/metadata/modes</code></li> <li>(GET)RoomTypes <code>localhost:8080/metadata/roomTypes</code></li> <li>(POST)addTour <code>localhost:8080/tours</code> <pre><code>{\n    \"name\": \"MUMBAI-NASIK\",\n    \"startAt\" : \"Mumbai\",\n    \"endAt\" : \"Nasik\",\n    \"mode\": \"BICYCLE\",\n    \"difficultyLevel\": \"MODERATE\",\n    \"itinerary\": {\n        \"dayPlans\": [\n            {\n                \"dayCount\": 1,\n                \"place\": \"Mumbai\",\n                \"distance\": 0.0,\n                \"activity\" : \"reporting between 5 pm to 7 pm. Introduction, tour briefing and ice breaker\",\n                \"accomodation\" : {\n                    \"hotelName\" : \"Hotel Mayur\",\n                    \"address\" : \"SB road, Thane\",\n                    \"roomType\" : \"TWIN_BED\"\n                }\n            },\n            {\n                \"dayCount\": 2,\n                \"place\": \"NASIK\",\n                \"distance\": 150.0,\n                \"activity\" : \"Ride on Mumbai Agra road\",\n                \"accomodation\" : {\n                    \"hotelName\" : \"Dwaraka\",\n                    \"address\" : \"Dwaraka\",\n                    \"roomType\" : \"TWIN_BED\"\n                }\n            },\n            {\n                \"dayCount\": 3,\n                \"place\": \"NASIK\",\n                \"distance\": 0,\n                \"activity\" : \"Breakfast, Certifiate distribution and tour ends. Participants return home\",\n                \"accomodation\" : {\n                    \"hotelName\" : \"Dwaraka\",\n                    \"address\" : \"Dwaraka\",\n                    \"roomType\" : \"TWIN_BED\"\n                }\n            }\n        ]\n    }\n}\n</code></pre></li> <li>(PUT)updateTourById <code>localhost:8080/batches</code> <pre><code>{\n    \"id\": 1,\n    \"name\": \"MUMBAI-GOA\",\n    \"mode\": \"WALk\",\n    \"noDays\": \"3\",\n    \"difficulty\": \"EASY\",\n    \"startAt\": \"nov\",\n    \"endAt\": \"jan\",\n    \"itinerary\": {\n        \"id\": 2,\n        \"dailyPlans\": [\n            {\n                \"dayCount\": 3,\n                \"place\": \"DHULE\",\n                \"distanceToCover\": 50.0,\n                \"accomodation\": {\n                    \"hotelName\": \"Dhule Palace\",\n                    \"address\": \"102, main crossroad, Dhule-424006\",\n                    \"roomType\": \"TWIN_BED\"\n                }\n            },\n            {\n                \"dayCount\": 0,\n                \"place\": \"IGATPURI\",\n                \"distanceToCover\": 60.0,\n                \"accomodation\": {\n                    \"hotelName\": \"Kasara Hotel\",\n                    \"address\": \"12, Kasara, Igatpuri-414006\",\n                    \"roomType\": \"SINGLE\"\n                }\n            },\n            {\n                \"dayCount\": 1,\n                \"place\": \"NASIK\",\n                \"distanceToCover\": 55.0,\n                \"accomodation\": {\n                    \"hotelName\": \"Dwarka Palace\",\n                    \"address\": \"12, Dwarka Chauk, Nasik-414006\",\n                    \"roomType\": \"SINGLE\"\n                }\n            },\n            {\n                \"dayCount\": 2,\n                \"place\": \"SHIRPUR\",\n                \"distanceToCover\": 30.0,\n                \"accomodation\": {\n                    \"hotelName\": \"Shirpur Guest house\",\n                    \"address\": \"12, MIDC, Shirpur-433006\",\n                    \"roomType\": \"SINGLE\"\n                }\n            }\n        ]\n    },\n    \"batches\": [\n        {\n            \"batch_id\": 3,\n            \"startDate\": \"27-10-2023\",\n            \"endDate\": \"27-01-2024\",\n            \"status\": \"ACTIVE\",\n            \"capacity\": 50,\n            \"perParticipantCost\": 5999.9,\n            \"guide\": {\n                \"id\": 4,\n                \"name\": {\n                    \"first\": \"Rahul\",\n                    \"last\": \"Vishwakarma\"\n                },\n                \"email\": {\n                    \"id\": \"rahul@gmail.com\"\n                },\n                \"mobile\": {\n                    \"number\": \"8788582604\"\n                }\n            },\n            \"bookings\": []\n        }\n    ]\n}\n</code></pre></li> <li>(PUT)updateTour <code>localhost:8080/tours</code> <pre><code> {\n        \"id\": 1,\n        \"name\": \"MUMBAI-GOA\",\n        \"mode\": \"BICYCLE\",\n        \"itinerary\": {\n            \"id\": 2,\n            \"dailyPlans\": [\n                {\n                    \"dayCount\": 3,\n                    \"place\": \"DHULE\",\n                    \"distanceToCover\": 50.0,\n                    \"accomodation\": {\n                        \"hotelName\": \"Dhule Palace\",\n                        \"address\": \"102, main crossroad, Dhule-424006\",\n                        \"roomType\": \"TWIN_BED\"\n                    }\n                },\n                {\n                    \"dayCount\": 0,\n                    \"place\": \"IGATPURI\",\n                    \"distanceToCover\": 60.0,\n                    \"accomodation\": {\n                        \"hotelName\": \"Kasara Hotel\",\n                        \"address\": \"12, Kasara, Igatpuri-414006\",\n                        \"roomType\": \"SINGLE\"\n                    }\n                },\n                {\n                    \"dayCount\": 1,\n                    \"place\": \"NASIK\",\n                    \"distanceToCover\": 55.0,\n                    \"accomodation\": {\n                        \"hotelName\": \"Dwarka Palace\",\n                        \"address\": \"12, Dwarka Chauk, Nasik-414006\",\n                        \"roomType\": \"SINGLE\"\n                    }\n                },\n                {\n                    \"dayCount\": 2,\n                    \"place\": \"SHIRPUR\",\n                    \"distanceToCover\": 30.0,\n                    \"accomodation\": {\n                        \"hotelName\": \"Shirpur Guest house\",\n                        \"address\": \"12, MIDC, Shirpur-433006\",\n                        \"roomType\": \"SINGLE\"\n                    }\n                }\n            ]\n        },\n        \"noDays\": \"3\",\n        \"difficulty\": \"EASY\",\n        \"startAt\": \"oct\",\n        \"endAt\": \"jan\",\n        \"batches\": [\n            {\n                \"batch_id\": 3,\n                \"startDate\": \"27-10-2023\",\n                \"endDate\": \"27-01-2024\",\n                \"status\": \"ACTIVE\",\n                \"capacity\": 50,\n                \"perParticipantCost\": 5999.9,\n                \"guide\": {\n                    \"id\": 4,\n                    \"name\": {\n                        \"first\": \"Rahul\",\n                        \"last\": \"Vishwakarma\"\n                    },\n                    \"email\": {\n                        \"id\": \"rahul@gmail.com\"\n                    },\n                    \"mobile\": {\n                        \"number\": \"8788582604\"\n                    }\n                },\n                \"bookings\": []\n            }\n        ]\n    }\n</code></pre></li> <li>(DELETE)deleteTour <code>localhost:8080/tours/1</code></li> </ul>"},{"location":"API/rest-api/#auth","title":"Auth","text":"<ul> <li>(POST)Register <code>localhost:8080/auth/register</code> <pre><code>{\n    \"userName\":\"harsh@gmail.com\",\n    \"password\":\"harsh\",\n    \"role\":\"CUSTOMER\"\n}\n</code></pre></li> <li>(POST)Login <code>localhost:8080/auth/login</code> <pre><code>{\n    \"userName\":\"harsh@gmail.com\",\n    \"password\":\"harsh\"\n}\n</code></pre></li> </ul>"},{"location":"CICD/git/","title":"Git Commands","text":""},{"location":"CICD/git/#basic-concepts","title":"Basic Concepts:","text":""},{"location":"CICD/git/#initialization-and-configuration","title":"Initialization and Configuration:","text":"<pre><code>git init                             # Initialize a new Git repository\ngit config --global user.name \"John Doe\"\ngit config --global user.email \"john.doe@example.com\"\n</code></pre>"},{"location":"CICD/git/#basic-workflow","title":"Basic Workflow:","text":"<pre><code>touch README.md # Create a new README.md file\ngit status                           # Check the status of the repository\ngit add README.md # Add README.md to the staging area\ngit commit -m \"Add README.md\"       # Commit changes with a message\ngit log                              # View commit history\n</code></pre>"},{"location":"CICD/git/#branching-and-merging","title":"Branching and Merging:","text":"<pre><code>git branch                          # List all branches\ngit branch feature                  # Create a new branch named 'feature'\ngit checkout feature                # Switch to the 'feature' branch\n# Make changes, commit them\ngit checkout main                   # Switch back to the 'main' branch\ngit merge feature                   # Merge 'feature' branch into 'main'\n</code></pre>"},{"location":"CICD/git/#remote-repositories","title":"Remote Repositories:","text":"<pre><code>git remote add origin &lt;remote-repository-URL&gt;  # Add a remote repository\ngit push -u origin main           # Push changes to the remote 'main' branch\ngit pull                           # Fetch and merge changes from the remote repository\ngit fetch                          # Fetch changes from the remote repository\n</code></pre>"},{"location":"CICD/git/#collaboration","title":"Collaboration:","text":"<pre><code>git checkout -b my-feature         # Create and switch to a new branch in one command\n# Make changes, commit them\ngit push origin my-feature         # Push changes to a new remote branch 'my-feature'\ngit pull origin main              # Pull changes from the 'main' branch of the remote repository\ngit push origin --delete old-feature  # Delete a remote branch named 'old-feature'\n</code></pre>"},{"location":"CICD/git/#advanced-concepts","title":"Advanced Concepts:","text":""},{"location":"CICD/git/#rebasing","title":"Rebasing:","text":"<pre><code>git checkout my-feature\ngit rebase main                    # Rebase 'my-feature' onto the latest changes in the 'main' branch\n</code></pre>"},{"location":"CICD/git/#stashing","title":"Stashing:","text":"<pre><code># Make changes to working directory\ngit stash                          # Stash changes in the working directory\n# Work on something else\ngit stash apply                    # Apply the most recent stash\n</code></pre>"},{"location":"CICD/git/#submodules","title":"Submodules:","text":"<pre><code>git submodule add &lt;submodule-URL&gt; &lt;path&gt;  # Add a submodule to the repository\ngit submodule update --init        # Initialize and update submodules\n</code></pre>"},{"location":"CICD/git/#cherry-picking","title":"Cherry-picking:","text":"<pre><code>git log                             # View commit history and find the commit to cherry-pick\ngit cherry-pick &lt;commit-hash&gt;      # Apply changes from a specific commit to the current branch\n</code></pre>"},{"location":"CICD/git/#interactive-rebasing","title":"Interactive Rebasing:","text":"<pre><code>git rebase -i main                 # Interactively rebase to modify commits before applying them\n# Squash, reword, edit, or drop commits as needed\n</code></pre>"},{"location":"CICD/git/#reflog","title":"Reflog:","text":"<pre><code>git reflog                         # View the reflog to recover lost commits or branches\ngit reset --hard HEAD@{n}          # Reset to a previous state based on the reflog\n</code></pre>"},{"location":"CICD/git/#undoing-changes","title":"Undoing Changes:","text":"<pre><code>git reset HEAD file.txt            # Unstage changes for a file\ngit checkout -- file.txt           # Discard changes in the working directory for a file\ngit revert &lt;commit-hash&gt;           # Revert a commit, creating a new commit with the reverted changes\n</code></pre>"},{"location":"CICD/git/#viewing-differences","title":"Viewing Differences:","text":"<pre><code>git diff                            # Show changes between the working directory and the staging area\ngit diff --cached                   # Show changes between the staging area and the repository\ngit diff &lt;commit1&gt; &lt;commit2&gt;        # Show changes between two commits\n</code></pre>"},{"location":"CICD/git/#tagging","title":"Tagging:","text":"<pre><code>git tag &lt;tag-name&gt;                  # Create a lightweight tag at the current commit\ngit tag -a &lt;tag-name&gt; -m \"Tag message\"  # Create an annotated tag with a message\ngit show &lt;tag-name&gt;                # Show information about a tag\n</code></pre>"},{"location":"CICD/git/#gitignore","title":"Gitignore:","text":"<pre><code>touch .gitignore                    # Create a .gitignore file\n# Add file patterns to ignore, such as '*.log' or 'node_modules/'\n</code></pre>"},{"location":"CICD/github-actions/","title":"Github Actions","text":"<p>GitHub Actions is a powerful tool for automating workflows directly within your GitHub repository. It allows you to define custom workflows using YAML files, enabling you to automate tasks such as testing, building, deploying, and more. Let's break down some key concepts:</p> <ol> <li>Workflow: A workflow is a configurable automated process made up of one or more jobs. It's defined in a YAML file stored in the <code>.github/workflows</code> directory of your repository. Workflows are triggered by various events, such as pushes to the repository, pull requests, or scheduled events.</li> </ol> <p>Example:    <pre><code>name: CI\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n    - name: Install dependencies\n      run: npm install\n    - name: Run tests\n      run: npm test\n</code></pre></p> <ol> <li>Jobs: A job is a set of steps that execute on the same runner. By default, jobs run in parallel, but you can configure them to run sequentially if needed. Each job runs in a fresh instance of the virtual environment specified in the workflow file.</li> </ol> <p>Example:    <pre><code>jobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n    - name: Install dependencies\n      run: npm install\n    - name: Run tests\n      run: npm test\n</code></pre></p> <ol> <li>Steps: Steps are individual tasks within a job. They are the building blocks of a workflow and perform actions like checking out code, running commands, or calling other actions. Each step is an individual task and can have its own settings and configurations.</li> </ol> <p>Example:    <pre><code>steps:\n- name: Checkout code\n  uses: actions/checkout@v2\n- name: Install dependencies\n  run: npm install\n- name: Run tests\n  run: npm test\n</code></pre></p> <ol> <li>Actions: Actions are reusable units of code that can be shared and reused across different workflows. They encapsulate a single task, such as deploying to a cloud provider, sending notifications, or publishing packages. You can use actions provided by the GitHub community or create your own custom actions.</li> </ol> <p>Example:    <pre><code>steps:\n- name: Checkout code\n  uses: actions/checkout@v2\n- name: Install dependencies\n  run: npm install\n- name: Run tests\n  run: npm test\n- name: Deploy to production\n  uses: actions/aws/lambda@v1\n  with:\n    function-name: my-function\n    region: us-east-1\n</code></pre></p> <p>These are the fundamental concepts of GitHub Actions. By understanding and utilizing these concepts effectively, you can automate various aspects of your development workflow and streamline your processes.</p>"},{"location":"CICD/jenkins/","title":"CICD with Jenkins","text":""},{"location":"CICD/jenkins/#jenkins-container-with-oc-and-docker-installed","title":"Jenkins container with oc and docker installed","text":"<ul> <li>First download oc cli tar file in root folder.</li> <li>Install OC client in Ubuntu/Debian <pre><code>FROM docker.io/jenkins/jenkins:lts\nUSER root\nCOPY $PWD/oc /usr/local/bin/\nRUN chmod +x /usr/local/bin/oc\nRUN apt-get update -qq \\\n    &amp;&amp; apt-get install -qqy apt-transport-https ca-certificates curl gnupg2 software-properties-common \nRUN curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -\nRUN add-apt-repository \\\n   \"deb [arch=amd64] https://download.docker.com/linux/debian \\\n   $(lsb_release -cs) \\\n   stable\"\nRUN apt-get update  -qq \\\n    &amp;&amp; apt-cache policy docker-ce\\\n    &amp;&amp; apt-get install docker-ce -y\nRUN usermod -aG docker jenkins\n</code></pre></li> <li><code>docker build -t rahul1181/jenkins .</code></li> <li><code>chown 1000 $PWD/jenkins</code></li> <li><code>cd jenkins/</code></li> <li><code>docker run -d -p 49001:8080 -v /var/run/docker.sock:/var/run/docker.sock -v $PWD/jenkins:/var/jenkins_home:z -t rahul1181/jenkins</code></li> </ul>"},{"location":"CICD/jenkins/#setup-user-and-install-plugins","title":"Setup user and Install plugins","text":""},{"location":"CICD/jenkins/#plugins","title":"plugins","text":"<ul> <li>pipeline</li> <li>git</li> <li>docker : pipeline, </li> <li>openshift</li> <li>credentials</li> </ul>"},{"location":"CICD/jenkins/#setup-credentials","title":"Setup Credentials","text":"<ul> <li>DOCKER_ID: username, password</li> <li>OPENSHIFT_ID: secret(token)</li> <li>GITHUB_LOGIN: username, password</li> </ul>"},{"location":"CICD/jenkins/#create-a-pipeline-jttours","title":"Create a pipeline (jttours)","text":"<ul> <li>Add the git repository url.</li> <li>Place Jenkinsfile in root of git repository.</li> </ul> <p><code>Jenkinsfile</code> <pre><code>pipeline {\n    agent any\n\n    environment {\n        OPENSHIFT_SERVER = 'https://c100-e.us-south.containers.cloud.ibm.com:30954'\n        OPENSHIFT_PROJECT = 'jttours'\n        OPENSHIFT_TOKEN_CREDENTIALS_ID = 'OPENSHIFT_ID'\n        DOCKER_HUB_CREDENTIALS = 'DOCKER_ID'\n        FRONTEND_IMAGE_NAME = 'rahul1181/frontend-image:1.16'\n        BACKEND_IMAGE_NAME = 'rahul1181/backend-image:1.3'\n    }\n\n    stages {\n        stage('Authenticate to OpenShift') {\n            steps {\n                script {\n                    withCredentials([string(credentialsId: OPENSHIFT_TOKEN_CREDENTIALS_ID, variable: 'OPENSHIFT_TOKEN')]) {\n                        sh \"oc login --token=${OPENSHIFT_TOKEN} ${OPENSHIFT_SERVER}\"\n                    }\n                }\n            }\n        }\n        stage('Build and Push Images') {\n            parallel {\n                stage('Frontend') {\n                    steps {\n                        script {\n                            // Build frontend Docker image\n                            sh \"docker build -t ${FRONTEND_IMAGE_NAME} ./frontend\"\n                            // Push frontend image to Docker Hub\n                            dockerLoginAndPush(FRONTEND_IMAGE_NAME)\n                        }\n                    }\n                }\n                stage('Backend') {\n                    steps {\n                        script {\n                            // Build backend Docker image\n                            sh \"docker build -t ${BACKEND_IMAGE_NAME} ./backend\"\n                            // Push backend image to Docker Hub\n                            dockerLoginAndPush(BACKEND_IMAGE_NAME)\n                        }\n                    }\n                }\n            }\n        }\n        stage('Deploy to OpenShift') {\n            steps {\n                script {\n                    // Use OpenShift CLI or Jenkins Kubernetes plugin to deploy\n                    sh \"./sh\"\n                }\n            }\n        }\n\n\n    }\n\n    post {\n        always {\n            // Cleanup or additional steps after the pipeline\n            script{\n                echo \"Always block executed!\"\n            }\n        }\n\n    }\n\n}\n\ndef dockerLoginAndPush(imageName) {\n        // Docker login to Docker Hub\n        withCredentials([usernamePassword(credentialsId: DOCKER_HUB_CREDENTIALS, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {\n            sh \"docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}\"\n            sh \"docker push ${imageName}\"\n        }\n}\n</code></pre></p>"},{"location":"CICD/jenkins/#run-build-pipeline","title":"RUN Build pipeline","text":"<p><code>Maintain following tree in git repository:</code> <pre><code>frontend\n    \u251c\u2500\u2500 Dockerfile\n    \u2514\u2500\u2500 ui\nbackend\n    \u251c\u2500\u2500 Dockerfile\n    \u2514\u2500\u2500 jttours-0.0.1-SNAPSHOT.jar\nkubernetes\n    \u251c\u2500\u2500 backend\n    \u2502   \u251c\u2500\u2500 backend-configmap.yaml\n    \u2502   \u251c\u2500\u2500 backend-deployment.yaml\n    \u2502   \u2514\u2500\u2500 backend-service.yaml\n    \u251c\u2500\u2500 frontend\n    \u2502   \u251c\u2500\u2500 frontend-configmap.yaml\n    \u2502   \u251c\u2500\u2500 frontend-deployment.yaml\n    \u2502   \u2514\u2500\u2500 frontend-service.yaml\n    \u251c\u2500\u2500 mysql\n    \u2502   \u251c\u2500\u2500 mysql-configmap.yaml\n    \u2502   \u251c\u2500\u2500 mysql-deployment.yaml\n    \u2502   \u251c\u2500\u2500 mysql-pv.yaml\n    \u2502   \u251c\u2500\u2500 mysql-secret.yaml\n    \u2502   \u251c\u2500\u2500 mysql-service.yaml\n    \u2502   \u2514\u2500\u2500 mysql-statefulset.yaml\n    \u2514\u2500\u2500 namespace.yaml\n</code></pre> <code>frontend/Dockerfile</code> <pre><code>FROM ubuntu:latest\nMAINTAINER rahul_vishwakarma1\nRUN apt-get update\nRUN apt-get -y install curl gnupg\nRUN curl -sL https://deb.nodesource.com/setup_14.x  | bash -\nRUN apt-get -y install nodejs\n\nCOPY ./ui /home/ui\n\nWORKDIR /home/ui\n\nRUN useradd ui\n\nRUN chmod -R ugoa+rwx /home/ui &amp;&amp; chown -R ui:0 /home/ui\n\nUSER ui\n\nEXPOSE 3000\n\nRUN npm install\nRUN mkdir -p node_modules/.cache &amp;&amp; chmod -R 777 node_modules/.cache\n\nCMD npm run build &amp;&amp; npx serve -s build\n#CMD [\"npm\", \"start\"]\n</code></pre> <code>backend/Dockerfile</code> <pre><code>FROM openjdk:17-jdk-alpine\nMAINTAINER rahul_vishwakarma1\nCOPY . .\nENTRYPOINT [\"java\",\"-jar\",\"/jttours-0.0.1-SNAPSHOT.jar\"]\n</code></pre> <code>sh</code> <pre><code>#!/bin/bash\noc create ns jttours\n\n# For MySQL Database\noc apply -f kubernetes/mysql/mysql-pv.yaml -n jttours\noc apply -f kubernetes/mysql/mysql-secret.yaml -n jttours\noc apply -f kubernetes/mysql/mysql-configmap.yaml -n jttours\noc apply -f kubernetes/mysql/mysql-statefulset.yaml -n jttours\noc apply -f kubernetes/mysql/mysql-service.yaml -n jttours\n\n# For Backend\noc create configmap backend-configmap \\\n  --from-literal=SPRING_DATASOURCE_URL=\"jdbc:mysql://$(oc get svc mysql-service -n jttours -o jsonpath='{.spec.clusterIP}')/jttoursdb\" \\\n  --from-literal=SPRING_DATASOURCE_USERNAME=\"root\" \\\n  --from-literal=SPRING_DATASOURCE_PASSWORD=\"admin\" \\\n  -n jttours\n\noc apply -f kubernetes/backend/backend-deployment.yaml -n jttours\noc apply -f kubernetes/backend/backend-service.yaml -n jttours\noc expose svc backend-service -n jttours\n\n\n# For frontend\noc create configmap frontend-configmap \\\n  --from-literal=REACT_APP_API_URL=$(oc get route backend-service -n jttours -o jsonpath='{.spec.host}')\\\n  -n jttours\n\noc apply -f kubernetes/frontend/frontend-deployment.yaml -n jttours\noc apply -f kubernetes/frontend/frontend-service.yaml -n jttours\noc expose svc frontend-service -n jttours\n\noc get all -n jttours\n\necho http://$(oc get route frontend-service -n jttours -o jsonpath='{.spec.host}')\n</code></pre></p>"},{"location":"DSA/1%20Arrays%20%26%20Hashing/","title":"1. Arrays &amp; Hashing","text":""},{"location":"DSA/1%20Arrays%20%26%20Hashing/#contains-duplicate","title":"Contains Duplicate","text":"<pre><code>class Solution {\n    public boolean containsDuplicate(int[] nums) {\n        Set&lt;Integer&gt; s = new HashSet&lt;&gt;();\n        for (int i = 0; i &lt; nums.length; i++) {\n            if (!s.add(nums[i])) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n</code></pre>"},{"location":"DSA/1%20Arrays%20%26%20Hashing/#valid-anagram","title":"Valid Anagram","text":"<pre><code>class Solution {\n    public boolean isAnagram(String s, String t) {\n        if(s.length()!=t.length()){\n            return false;\n        }\n        int[] store = new int[26];\n        for(int i=0;i&lt;s.length();i++){\n            store[s.charAt(i)-'a']++;\n            store[t.charAt(i)-'a']--;\n        }\n        for(int i:store){\n            if(i!=0){\n                return false;\n            }\n        }\n        return true;\n    }\n}\n</code></pre>"},{"location":"DSA/1%20Arrays%20%26%20Hashing/#two-sum","title":"Two Sum","text":"<pre><code>class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        int[] arr = new int[2];\n        for (int i = 0; i &lt; nums.length - 1; i++) {\n            for (int j = i + 1; j &lt; nums.length; j++) {\n                if (nums[i] + nums[j] == target) {\n                    arr[0] = i;\n                    arr[1] = j;\n                }\n            }\n        }\n        return arr;\n    }\n}\n</code></pre> <pre><code>class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        HashMap&lt;Integer,Integer&gt; hm=new HashMap&lt;&gt;();\n        for(int i=0;i&lt;nums.length;i++){\n            if(hm.containsKey(target-nums[i])){\n\n                return new int[]{hm.get(target-nums[i]),i};\n            }\n            hm.put(nums[i],i);\n        }\n        return new int[1];\n    }\n}\n</code></pre>"},{"location":"DSA/1%20Arrays%20%26%20Hashing/#group-anagrams","title":"Group Anagrams","text":"<pre><code>class Solution {\n    public List&lt;List&lt;String&gt;&gt; groupAnagrams(String[] strs) {\n        HashMap&lt;String,List&lt;String&gt;&gt; anagrams= new HashMap&lt;&gt;();\n        for(String word : strs){\n            char[] charWord=word.toCharArray();\n            Arrays.sort(charWord);\n            String str=new String(charWord);\n            if(!anagrams.containsKey(str)){\n                anagrams.put(str, new ArrayList&lt;&gt;());\n            }\n            anagrams.get(str).add(word);\n        }\n        return new ArrayList&lt;&gt;(anagrams.values());\n    }\n}\n</code></pre>"},{"location":"DSA/1%20Arrays%20%26%20Hashing/#top-k-frequent-elements","title":"Top K Frequent Elements","text":"<pre><code>public class Solution {\n    public int[] topKFrequent(int[] nums, int k) {\n        int[] arr = new int[k];\n        HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();\n        for (int num : nums) map.put(num, map.getOrDefault(num, 0) + 1);\n        PriorityQueue&lt;Map.Entry&lt;Integer, Integer&gt;&gt; pq = new PriorityQueue&lt;&gt;(\n                (a, b) -&gt;\n            a.getValue() - b.getValue()\n        );\n        for (Map.Entry&lt;Integer, Integer&gt; it : map.entrySet()) {\n            pq.add(it);\n            if (pq.size() &gt; k) pq.poll();\n        }\n        int i = k;\n        while (!pq.isEmpty()) {\n            arr[--i] = pq.poll().getKey();\n        }\n        return arr;\n    }\n}\n</code></pre>"},{"location":"DSA/1%20Arrays%20%26%20Hashing/#product-of-array-except-self","title":"Product of Array Except Self","text":"<pre><code>class Solution {\n    public int[] productExceptSelf(int[] nums) {\n        int n=nums.length;\n        int left=1;\n        int right=1;\n        int[] arr= new int[n];\n        for(int i=0;i&lt;n;i++){\n            arr[i]=left;\n            left*=nums[i];\n        }\n        for(int j=n-1;j&gt;=0;j--){\n            arr[j]*=right;\n            right*=nums[j];\n        }\n        return arr;\n    }\n}\n</code></pre>"},{"location":"DSA/1%20Arrays%20%26%20Hashing/#valid-sudoku","title":"Valid Sudoku","text":"<pre><code>class Solution {\n    public boolean isValidSudoku(char[][] board) {\n\n        for(int i=0;i&lt;9;i++){\n            Set&lt;Character&gt; row=new HashSet&lt;Character&gt;();\n            Set&lt;Character&gt; col=new HashSet&lt;Character&gt;();\n            for(int j=0;j&lt;9;j++){\n                if(board[i][j]!='.'){\n                    if(!row.add(board[i][j])){\n                        return false;\n                    }\n\n                }\n                if(board[j][i]!='.'){\n                    if(!col.add(board[j][i])){\n                        return false;\n                    }\n                }\n\n            }\n        }\n\n        for (int k=0;k&lt;9;k=k+3){\n            for(int l=0;l&lt;9;l=l+3){\n                if(!sudokuBox(k,l,board)){\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    public static boolean sudokuBox(int x, int y, char[][] box){\n        Set&lt;Character&gt; cube =new HashSet&lt;Character&gt;();\n        for(int i=x;i&lt;x+3;i++){\n\n            for(int j=y;j&lt;y+3;j++){\n                if(box[i][j]!='.'){\n                    if(!cube.add(box[i][j])){\n                    return false;\n                }\n                }\n\n            }\n        }\n        return true;\n    }\n}\n</code></pre>"},{"location":"DSA/1%20Arrays%20%26%20Hashing/#encode-and-decode-strings","title":"Encode and Decode Strings","text":"<pre><code>public class Solution {\n\n    public String encode(List&lt;String&gt; strs) {\n        StringBuilder encodedString = new StringBuilder();\n        for (String str : strs) {\n            encodedString.append(str.length()).append(\"#\").append(str);\n        }\n        return encodedString.toString();\n    }\n\n    public List&lt;String&gt; decode(String str) {\n        List&lt;String&gt; list = new ArrayList&lt;&gt;();\n        int i = 0;\n        while (i &lt; str.length()) {\n            int j = i;\n            while (str.charAt(j) != '#') j++;\n\n            int length = Integer.valueOf(str.substring(i, j));\n            i = j + 1 + length;\n            list.add(str.substring(j + 1, i));\n        }\n        return list;\n    }\n}\n</code></pre>"},{"location":"DSA/1%20Arrays%20%26%20Hashing/#longest-consecutive-sequence","title":"Longest Consecutive Sequence","text":"<pre><code>class Solution {\n    public int longestConsecutive(int[] nums) {\n       if (nums.length == 0) return 0;\n       HashSet&lt;Integer&gt; hs = new HashSet&lt;&gt;();\n       for(int num:nums) hs.add(num);\n       int longest =1;\n       for(int num: nums ){\n           //check if the num is the start of a sequence by checking if left exists\n           if(!hs.contains(num-1)){ // start of a sequence\n                int count =1;\n                while(hs.contains(num + 1)){ // check if hs contains next no.\n                    num++;\n                    count++;\n                }\n                longest = Math.max(longest, count);\n\n           }\n           if(longest &gt; nums.length/2) break;\n\n       }\n       return longest;\n    }\n}\n</code></pre>"},{"location":"DSA/10%20Backtracking/","title":"10. Backtracking","text":""},{"location":"DSA/10%20Backtracking/#subsets","title":"Subsets","text":"<pre><code>class Solution {\n    public List&lt;List&lt;Integer&gt;&gt; subsets(int[] nums) {\n        List&lt;List&lt;Integer&gt;&gt; list = new ArrayList&lt;&gt;();\n        backtrack(list, new ArrayList&lt;Integer&gt;(), nums, 0);\n        return list;\n    }\n\n    public void backtrack(List&lt;List&lt;Integer&gt;&gt; list, ArrayList&lt;Integer&gt; tempList, int[] nums, int start) {\n        list.add(new ArrayList&lt;&gt;(tempList));\n        for (int i = start; i &lt; nums.length; i++) {\n            tempList.add(nums[i]);\n            backtrack(list, tempList, nums, i + 1);\n            tempList.remove(tempList.size() - 1);\n        }\n    }\n}\n</code></pre>"},{"location":"DSA/10%20Backtracking/#combination-sum","title":"Combination Sum","text":"<pre><code>class Solution {\n    public List&lt;List&lt;Integer&gt;&gt; combinationSum(int[] candidates, int target) {\n        List&lt;List&lt;Integer&gt;&gt; list = new ArrayList&lt;&gt;();\n        // Arrays.sort(candidates);\n        backtrack(candidates, target, list, new ArrayList&lt;Integer&gt;(), 0);\n        return list;\n    }\n\n    public void backtrack(int[] candidates, int target, List&lt;List&lt;Integer&gt;&gt; list, ArrayList&lt;Integer&gt; tempList,\n            int start) {\n        if (target &lt; 0)\n            return;\n        else if (target == 0) {\n            list.add(new ArrayList&lt;&gt;(tempList));\n\n        } else {\n            for (int i = start; i &lt; candidates.length; i++) {\n\n                tempList.add(candidates[i]);\n                backtrack(candidates, target - candidates[i], list, tempList, i);\n                tempList.remove(tempList.size() - 1);\n            }\n        }\n\n    }\n}\n</code></pre>"},{"location":"DSA/10%20Backtracking/#permutations","title":"Permutations","text":"<pre><code>class Solution {\n    public List&lt;List&lt;Integer&gt;&gt; permute(int[] nums) {\n        List&lt;List&lt;Integer&gt;&gt; list = new ArrayList&lt;&gt;();\n        backTrack(list, new ArrayList&lt;Integer&gt;(), nums);\n        return list;\n    }\n\n    public void backTrack(List&lt;List&lt;Integer&gt;&gt; list, ArrayList&lt;Integer&gt; tempList, int[] nums) {\n        if (tempList.size() == nums.length) {\n            list.add(new ArrayList&lt;&gt;(tempList));\n        }\n\n        for (int i = 0; i &lt; nums.length; i++) {\n            if (tempList.contains(nums[i])) {\n                continue;\n            }\n            tempList.add(nums[i]);\n            backTrack(list, tempList, nums);\n            tempList.remove(tempList.size() - 1);\n        }\n    }\n}\n</code></pre>"},{"location":"DSA/10%20Backtracking/#subsets-ii","title":"Subsets II","text":"<pre><code>class Solution {\n    public List&lt;List&lt;Integer&gt;&gt; subsetsWithDup(int[] nums) {\n        List&lt;List&lt;Integer&gt;&gt; list = new ArrayList&lt;&gt;();\n        Arrays.sort(nums);\n        backTrack(list, new ArrayList&lt;Integer&gt;(), nums, 0);\n        return list;\n\n    }\n\n    public void backTrack(List&lt;List&lt;Integer&gt;&gt; list, ArrayList&lt;Integer&gt; tempList, int[] nums, int start) {\n        if (!list.contains(tempList)) {\n            list.add(new ArrayList&lt;&gt;(tempList));\n        }\n\n        for (int i = start; i &lt; nums.length; i++) {\n            // if(tempList.contains(nums[i])){\n            // continue;\n            // }\n            tempList.add(nums[i]);\n            backTrack(list, tempList, nums, i + 1);\n            tempList.remove(tempList.size() - 1);\n        }\n    }\n}\n</code></pre>"},{"location":"DSA/10%20Backtracking/#combination-sum-ii","title":"Combination Sum II","text":"<pre><code>class Solution {\n    public List&lt;List&lt;Integer&gt;&gt; combinationSum2(int[] candidates, int target) {\n        List&lt;List&lt;Integer&gt;&gt; list = new ArrayList&lt;&gt;();\n        Arrays.sort(candidates);\n        backtrack(list, new ArrayList&lt;&gt;(), candidates, target, 0);\n        return list;\n    }\n\n    public void backtrack(List&lt;List&lt;Integer&gt;&gt; list, ArrayList&lt;Integer&gt; tempList, int[] candidates, int remaining,\n            int start) {\n        if (remaining &lt; 0)\n            return;\n        else if (remaining == 0) {\n            list.add(new ArrayList&lt;&gt;(tempList));\n        } else {\n            for (int i = start; i &lt; candidates.length; i++) {\n                if (i &gt; start &amp;&amp; candidates[i] == candidates[i - 1])\n                    continue;\n                tempList.add(candidates[i]);\n                backtrack(list, tempList, candidates, remaining - candidates[i], i + 1);\n                tempList.remove(tempList.size() - 1);\n            }\n        }\n\n    }\n}\n</code></pre>"},{"location":"DSA/10%20Backtracking/#word-search","title":"Word Search","text":"<pre><code>class Solution {\n    public boolean exist(char[][] board, String word) {\n        for (int i = 0; i &lt; board.length; i++) {\n            for (int j = 0; j &lt; board[0].length; j++) {\n                if (board[i][j] == word.charAt(0) &amp;&amp; backtrack(board, word, 0, i, j))\n                    return true;\n            }\n        }\n        return false;\n\n    }\n\n    public boolean backtrack(char[][] board, String word, int index, int i, int j) {\n        if (index &gt;= word.length()) {\n            return true;\n\n        }\n        if (i &lt; 0 || j &lt; 0 || i &gt;= board.length || j &gt;= board[0].length || board[i][j] == '0'\n                || board[i][j] != word.charAt(index))\n            return false;\n        char temp = board[i][j];\n        board[i][j] = '0';\n        if (backtrack(board, word, index + 1, i + 1, j) ||\n                backtrack(board, word, index + 1, i - 1, j) ||\n                backtrack(board, word, index + 1, i, j + 1) ||\n                backtrack(board, word, index + 1, i, j - 1)) {\n            return true;\n        }\n        board[i][j] = temp;\n\n        return false;\n\n    }\n\n}\n</code></pre>"},{"location":"DSA/10%20Backtracking/#palindrome-partitioning","title":"Palindrome Partitioning","text":"<pre><code>class Solution {\n    public List&lt;List&lt;String&gt;&gt; partition(String s) {\n        List&lt;List&lt;String&gt;&gt; list = new ArrayList&lt;&gt;();\n        backtrack(list, new ArrayList&lt;String&gt;(), s, 0);\n        return list;\n    }\n\n    public void backtrack(List&lt;List&lt;String&gt;&gt; list, ArrayList&lt;String&gt; tempList, String s, int start) {\n        if (start == s.length()) {\n            list.add(new ArrayList&lt;&gt;(tempList));\n            return;\n        }\n\n        for (int i = start; i &lt; s.length(); i++) {\n            if (isPalidrome(s, start, i)) {\n                tempList.add(s.substring(start, i + 1));\n                backtrack(list, tempList, s, i + 1);\n                tempList.remove(tempList.size() - 1);\n            }\n        }\n    }\n\n    public boolean isPalidrome(String s, int low, int high) {\n        while (low &lt; high) {\n            if (s.charAt(low) != s.charAt(high))\n                return false;\n            low++;\n            high--;\n        }\n        return true;\n    }\n}\n</code></pre>"},{"location":"DSA/10%20Backtracking/#letter-combinations-of-a-phone-number","title":"Letter Combinations of a Phone Number","text":"<pre><code>class Solution {\n    public List&lt;String&gt; letterCombinations(String digits) {\n        List&lt;String&gt; list = new ArrayList&lt;&gt;();\n        if (digits.equals(\"\")) {\n            return list;\n        }\n        String[] letters = new String[] { \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqrs\", \"tuv\", \"wxyz\" };\n        backtrack(list, new StringBuilder(), letters, digits, 0);\n        return list;\n    }\n\n    public void backtrack(List&lt;String&gt; list, StringBuilder str, String[] letters, String digits, int index) {\n        if (index == digits.length()) {\n            list.add(str.toString());\n            return;\n        }\n        int digit = digits.charAt(index) - '0';\n        String letter = letters[digit - 2];\n        for (int i = 0; i &lt; letter.length(); i++) {\n            str.append(letter.charAt(i));\n            backtrack(list, str, letters, digits, index + 1);\n            str.deleteCharAt(str.length() - 1);\n        }\n    }\n}\n</code></pre>"},{"location":"DSA/10%20Backtracking/#n-queens","title":"N Queens","text":"<pre><code>class Solution {\n    HashSet&lt;Integer&gt; cols = new HashSet&lt;Integer&gt;();\n    HashSet&lt;Integer&gt; diag1 = new HashSet&lt;Integer&gt;();\n    HashSet&lt;Integer&gt; diag2 = new HashSet&lt;Integer&gt;();\n\n    public List&lt;List&lt;String&gt;&gt; solveNQueens(int n) {\n        List&lt;List&lt;String&gt;&gt; lists = new ArrayList&lt;&gt;();\n        backtrack(lists, new ArrayList&lt;String&gt;(), n, 0);\n        return lists;\n    }\n\n    public void backtrack(List&lt;List&lt;String&gt;&gt; lists, List&lt;String&gt; list, int n, int row) {\n        if (row == n) {\n            lists.add(new ArrayList&lt;&gt;(list));\n            return;\n        }\n        for (int i = 0; i &lt; n; i++) {\n            if (cols.contains(i) || diag1.contains(row + i) || diag2.contains(row - i))\n                continue;\n            char[] charArr = new char[n];\n            Arrays.fill(charArr, '.');\n            charArr[i] = 'Q';\n            list.add(new String(charArr));\n            cols.add(i);\n            diag1.add(row + i);\n            diag2.add(row - i);\n            backtrack(lists, list, n, row + 1);\n            list.remove(list.size() - 1);\n            cols.remove(i);\n            diag1.remove(row + i);\n            diag2.remove(row - i);\n        }\n    }\n}\n</code></pre>"},{"location":"DSA/11%20Graph/","title":"11. Graph","text":""},{"location":"DSA/11%20Graph/#number-of-islands","title":"Number of Islands","text":"<pre><code>class Solution {\n    public int numIslands(char[][] grid) {\n        int count=0;\n        int n=grid.length;\n        int m=grid[0].length;\n        for(int i=0;i&lt;n;i++){\n            for(int j=0;j&lt;m;j++){\n                if(grid[i][j]=='1'){\n                    dfs(grid,i,j);\n                    ++count;\n                }\n            }\n        }\n        return count;\n    }\n    public void dfs(char[][] grid,int i,int j){\n        if(i&lt;0||j&lt;0||i&gt;=grid.length||j&gt;=grid[0].length||grid[i][j]=='0') return;\n        grid[i][j]='0';\n        dfs(grid,i+1,j);\n        dfs(grid,i,j+1);\n        dfs(grid,i-1,j);\n        dfs(grid,i,j-1);\n\n    }\n}\n</code></pre>"},{"location":"DSA/11%20Graph/#clone-graph","title":"Clone Graph","text":"<pre><code>/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public List&lt;Node&gt; neighbors;\n    public Node() {\n        val = 0;\n        neighbors = new ArrayList&lt;Node&gt;();\n    }\n    public Node(int _val) {\n        val = _val;\n        neighbors = new ArrayList&lt;Node&gt;();\n    }\n    public Node(int _val, ArrayList&lt;Node&gt; _neighbors) {\n        val = _val;\n        neighbors = _neighbors;\n    }\n}\n*/\n\nclass Solution {\n    public void dfs(Node node , Node copy , Node[] visited){\n        visited[copy.val] = copy;// store the current node at it's val index which will tell us that this node is now visited\n\n//         now traverse for the adjacent nodes of root node\n        for(Node n : node.neighbors){\n//             check whether that node is visited or not\n//              if it is not visited, there must be null\n            if(visited[n.val] == null){\n//                 so now if it not visited, create a new node\n                Node newNode = new Node(n.val);\n//                 add this node as the neighbor of the prev copied node\n                copy.neighbors.add(newNode);\n//                 make dfs call for this unvisited node to discover whether it's adjacent nodes are explored or not\n                dfs(n , newNode , visited);\n            }else{\n//                 if that node is already visited, retrieve that node from visited array and add it as the adjacent node of prev copied node\n//                 THIS IS THE POINT WHY WE USED NODE[] INSTEAD OF BOOLEAN[] ARRAY\n                copy.neighbors.add(visited[n.val]);\n            }\n        }\n\n    }\n    public Node cloneGraph(Node node) {\n        if(node == null) return null; // if the actual node is empty there is nothing to copy, so return null\n        Node copy = new Node(node.val); // create a new node , with same value as the root node(given node)\n        Node[] visited = new Node[101]; // in this question we will create an array of Node(not boolean) why ? , because i have to add all the adjacent nodes of particular vertex, whether it's visited or not, so in the Node[] initially null is stored, if that node is visited, we will store the respective node at the index, and can retrieve that easily.\n        Arrays.fill(visited , null); // initially store null at all places\n        dfs(node , copy , visited); // make a dfs call for traversing all the vertices of the root node\n        return copy; // in the end return the copy node\n    }\n}\n</code></pre>"},{"location":"DSA/11%20Graph/#max-area-of-island","title":"Max Area of Island","text":"<pre><code>class Solution {\n    private int n, m;\n    public int maxAreaOfIsland(int[][] grid) {\n        int ans = 0;\n        n = grid.length;\n        m = grid[0].length;\n        for (int i = 0; i &lt; n; i++) \n            for (int j = 0; j &lt; m; j++)\n                if (grid[i][j] &gt; 0) ans = Math.max(ans, trav(i, j, grid));\n        return ans;\n    }\n    private int trav(int i, int j, int[][] grid) {\n        if (i &lt; 0 || j &lt; 0 || i &gt;= n || j &gt;= m || grid[i][j] &lt; 1) return 0;\n        grid[i][j] = 0;\n        return 1 + trav(i-1, j, grid) + trav(i, j-1, grid) + trav(i+1, j, grid) + trav(i, j+1, grid);\n    }\n}\n</code></pre>"},{"location":"DSA/11%20Graph/#pacific-atlantic-water-flow","title":"Pacific Atlantic Water Flow","text":"<p>DFS</p> <pre><code>public class Solution {\n    public List&lt;int[]&gt; pacificAtlantic(int[][] matrix) {\n        List&lt;int[]&gt; res = new LinkedList&lt;&gt;();\n        if(matrix == null || matrix.length == 0 || matrix[0].length == 0){\n            return res;\n        }\n        int n = matrix.length, m = matrix[0].length;\n        boolean[][]pacific = new boolean[n][m];\n        boolean[][]atlantic = new boolean[n][m];\n        for(int i=0; i&lt;n; i++){\n            dfs(matrix, pacific, Integer.MIN_VALUE, i, 0);\n            dfs(matrix, atlantic, Integer.MIN_VALUE, i, m-1);\n        }\n        for(int i=0; i&lt;m; i++){\n            dfs(matrix, pacific, Integer.MIN_VALUE, 0, i);\n            dfs(matrix, atlantic, Integer.MIN_VALUE, n-1, i);\n        }\n        for (int i = 0; i &lt; n; i++) \n            for (int j = 0; j &lt; m; j++) \n                if (pacific[i][j] &amp;&amp; atlantic[i][j]) \n                    res.add(new int[] {i, j});\n        return res;\n    }\n\n    int[][]dir = new int[][]{{0,1},{0,-1},{1,0},{-1,0}};\n\n    public void dfs(int[][]matrix, boolean[][]visited, int height, int x, int y){\n        int n = matrix.length, m = matrix[0].length;\n        if(x&lt;0 || x&gt;=n || y&lt;0 || y&gt;=m || visited[x][y] || matrix[x][y] &lt; height)\n            return;\n        visited[x][y] = true;\n        for(int[]d:dir){\n            dfs(matrix, visited, matrix[x][y], x+d[0], y+d[1]);\n        }\n    }\n}\n</code></pre> <p>BFS</p> <pre><code>public class Solution {\n    int[][]dir = new int[][]{{1,0},{-1,0},{0,1},{0,-1}};\n    public List&lt;int[]&gt; pacificAtlantic(int[][] matrix) {\n        List&lt;int[]&gt; res = new LinkedList&lt;&gt;();\n        if(matrix == null || matrix.length == 0 || matrix[0].length == 0){\n            return res;\n        }\n        int n = matrix.length, m = matrix[0].length;\n        //One visited map for each ocean\n        boolean[][] pacific = new boolean[n][m];\n        boolean[][] atlantic = new boolean[n][m];\n        Queue&lt;int[]&gt; pQueue = new LinkedList&lt;&gt;();\n        Queue&lt;int[]&gt; aQueue = new LinkedList&lt;&gt;();\n        for(int i=0; i&lt;n; i++){ //Vertical border\n            pQueue.offer(new int[]{i, 0});\n            aQueue.offer(new int[]{i, m-1});\n            pacific[i][0] = true;\n            atlantic[i][m-1] = true;\n        }\n        for(int i=0; i&lt;m; i++){ //Horizontal border\n            pQueue.offer(new int[]{0, i});\n            aQueue.offer(new int[]{n-1, i});\n            pacific[0][i] = true;\n            atlantic[n-1][i] = true;\n        }\n        bfs(matrix, pQueue, pacific);\n        bfs(matrix, aQueue, atlantic);\n        for(int i=0; i&lt;n; i++){\n            for(int j=0; j&lt;m; j++){\n                if(pacific[i][j] &amp;&amp; atlantic[i][j])\n                    res.add(new int[]{i,j});\n            }\n        }\n        return res;\n    }\n    public void bfs(int[][]matrix, Queue&lt;int[]&gt; queue, boolean[][]visited){\n        int n = matrix.length, m = matrix[0].length;\n        while(!queue.isEmpty()){\n            int[] cur = queue.poll();\n            for(int[] d:dir){\n                int x = cur[0]+d[0];\n                int y = cur[1]+d[1];\n                if(x&lt;0 || x&gt;=n || y&lt;0 || y&gt;=m || visited[x][y] || matrix[x][y] &lt; matrix[cur[0]][cur[1]]){\n                    continue;\n                }\n                visited[x][y] = true;\n                queue.offer(new int[]{x, y});\n            } \n        }\n    }\n}\n</code></pre>"},{"location":"DSA/11%20Graph/#surrounded-regions","title":"Surrounded Regions","text":"<pre><code>class Solution {\n    public void solve(char[][] board) {\n        if (board.length == 0 || board[0].length == 0) return;\n        if (board.length &lt; 3 || board[0].length &lt; 3) return;\n        int m = board.length;\n        int n = board[0].length;\n        for (int i = 0; i &lt; m; i++) {\n            if (board[i][0] == 'O') helper(board, i, 0);\n            if (board[i][n - 1] == 'O') helper(board, i, n - 1);\n        }\n        for (int j = 1; j &lt; n - 1; j++) {\n            if (board[0][j] == 'O') helper(board, 0, j);\n            if (board[m - 1][j] == 'O') helper(board, m - 1, j);\n        }\n        for (int i = 0; i &lt; m; i++) {\n            for (int j = 0; j &lt; n; j++) {\n                if (board[i][j] == 'O') board[i][j] = 'X';\n                if (board[i][j] == '*') board[i][j] = 'O';\n            }\n        }\n    }\n\n    private void helper(char[][] board, int r, int c) {\n        if (r &lt; 0 || c &lt; 0 || r &gt; board.length - 1 || c &gt; board[0].length - 1 || board[r][c] != 'O') return;\n        board[r][c] = '*';\n        helper(board, r + 1, c);\n        helper(board, r - 1, c);\n        helper(board, r, c + 1);\n        helper(board, r, c - 1);\n    }\n}\n</code></pre>"},{"location":"DSA/11%20Graph/#rotting-oranges","title":"Rotting Oranges","text":"<pre><code>class Solution {\n    // store the position of rotten orange\n    static class Position {\n        int x;\n        int y;\n        Position(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n    }\n\n    public int orangesRotting(int[][] grid) {\n        Queue&lt;Position&gt; q = new LinkedList&lt;&gt;();\n        int total = 0, rotten = 0, time = 0;\n\n        // traverse the grid, offer position of rotten orange into queue, and count the total num of orange\n        for (int i = 0; i &lt; grid.length; i++) {\n            for (int j = 0; j &lt; grid[0].length; j++) {\n                if (grid[i][j] == 1 || grid[i][j] == 2) total++;\n                if (grid[i][j] == 2) q.offer(new Position(i, j));\n            }\n        }\n\n        // if there is no orange, return 0;\n        if (total == 0) return 0;\n\n        while (! q.isEmpty() &amp;&amp; rotten &lt; total) {\n            // size is the num of rotten oranges of the last round\n            int size = q.size();\n\n            // count the num of rotten oranges, if it equals to total num, return time;\n            rotten += size;\n            if (rotten == total) return time;\n\n            // every round, time ++\n            time++;\n\n            // Continue to dequeue until all rotten oranges of last round are removed from the queue\n            for (int i = 0; i &lt; size; i++) {\n                Position p = q.peek();\n\n                // check the cell in the left/right/top/down of the rotten orange, if it is a fresh orange, enqueue it.\n                if (p.x + 1 &lt; grid.length &amp;&amp; grid[p.x + 1][p.y] == 1) {\n                    grid[p.x + 1][p.y] = 2;\n                    q.offer(new Position(p.x + 1, p.y));\n                }\n                if (p.x - 1 &gt;= 0 &amp;&amp; grid[p.x - 1][p.y] == 1) {\n                    grid[p.x - 1][p.y] = 2;\n                    q.offer(new Position(p.x - 1, p.y));\n                }\n                if (p.y + 1 &lt; grid[0].length &amp;&amp; grid[p.x][p.y + 1] == 1) {\n                    grid[p.x][p.y + 1] = 2;\n                    q.offer(new Position(p.x, p.y + 1));\n                }\n                if (p.y - 1 &gt;= 0 &amp;&amp; grid[p.x][p.y - 1] == 1) {\n                    grid[p.x][p.y - 1] = 2;\n                    q.offer(new Position(p.x, p.y - 1));\n                }\n                q.poll();\n            }\n        }\n        return -1;\n    }\n}\n</code></pre>"},{"location":"DSA/11%20Graph/#walls-and-gates","title":"Walls And Gates","text":""},{"location":"DSA/11%20Graph/#islands-and-treasure","title":"Islands And Treasure","text":""},{"location":"DSA/11%20Graph/#course-schedule","title":"Course Schedule","text":"<pre><code>    public boolean canFinish(int n, int[][] prerequisites) {\n        ArrayList&lt;Integer&gt;[] G = new ArrayList[n];\n        int[] degree = new int[n];\n        ArrayList&lt;Integer&gt; bfs = new ArrayList();\n        for (int i = 0; i &lt; n; ++i) G[i] = new ArrayList&lt;Integer&gt;();\n        for (int[] e : prerequisites) {\n            G[e[1]].add(e[0]);\n            degree[e[0]]++;\n        }\n        for (int i = 0; i &lt; n; ++i) if (degree[i] == 0) bfs.add(i);\n        for (int i = 0; i &lt; bfs.size(); ++i)\n            for (int j: G[bfs.get(i)])\n                if (--degree[j] == 0) bfs.add(j);\n        return bfs.size() == n;\n    }\n</code></pre>"},{"location":"DSA/11%20Graph/#course-schedule-ii","title":"Course Schedule II","text":"<pre><code>public class Solution {\n    public int[] findOrder(int numCourses, int[][] prerequisites) {\n        //prepare\n        List&lt;List&lt;Integer&gt;&gt; graph = new ArrayList&lt;&gt;();\n        for(int i = 0; i &lt; numCourses; i++){\n            graph.add(new ArrayList&lt;&gt;());\n        }\n\n        for(int[] pair : prerequisites){\n            int prev = pair[1];\n            int next = pair[0];\n            graph.get(prev).add(next);\n        }\n\n        Map&lt;Integer, Integer&gt; visited = new HashMap&lt;&gt;();\n        //initail visited\n        for(int i = 0; i &lt; numCourses; i++){\n            visited.put(i, 0);//0 -&gt; unvisited, 1 -&gt; visiting, 2 -&gt; visited\n        }\n\n        List&lt;Integer&gt; res = new ArrayList&lt;&gt;();\n        for(int i = 0; i &lt; numCourses; i++){\n            if(!topoSort(res, graph, visited, i)) return new int[0];\n        }\n\n        int[] result = new int[numCourses];\n        for(int i = 0; i &lt; numCourses; i++){\n            result[i] = res.get(numCourses - i - 1);\n        }\n        return result;\n    }\n\n    //the return value of this function only contains the ifCycle info and does not interfere dfs process. if there is Cycle, then return false\n    private boolean topoSort(List&lt;Integer&gt; res, List&lt;List&lt;Integer&gt;&gt; graph, Map&lt;Integer, Integer&gt; visited, int i){\n        int visit = visited.get(i);\n        if(visit == 2){//when visit = 2, which means the subtree whose root is i has been dfs traversed and all the nodes in subtree has been put in the result(if we request), so we do not need to traverse it again\n            return true;\n        }if(visit == 1){\n            return false;\n        }\n\n        visited.put(i, 1);\n        for(int j : graph.get(i)){\n            if(!topoSort(res, graph, visited, j)) return false;\n        }\n        visited.put(i, 2);\n        res.add(i);//the only difference with traversing a graph\n\n        return true;\n    }\n}\n</code></pre>"},{"location":"DSA/11%20Graph/#redundant-connection","title":"Redundant Connection","text":"<pre><code>public int[] findRedundantConnection(int[][] edges) {\n        int[] ret = null;\n        int n = edges.length;\n        List&lt;Set&lt;Integer&gt;&gt; adjList = new ArrayList&lt;&gt;(1001);\n        for(int i=0; i &lt; 1001; i++)\n            adjList.add(new HashSet&lt;&gt;());\n\n        for(int[] edge : edges){\n            int u = edge[0], v = edge[1];\n            if(dfs(u, v, 0, adjList)){\n                ret = edge;\n            }else{\n                adjList.get(u).add(v);\n                adjList.get(v).add(u);\n            }\n        }\n        return ret;\n    }\n\n    private boolean dfs(int u, int v, int pre, List&lt;Set&lt;Integer&gt;&gt; adjList){\n        if(u == v)\n            return true;\n        for(int w : adjList.get(u)){\n            if(w == pre) continue;\n            boolean ret = dfs(w, v, u, adjList);\n            if(ret) return true;\n        }\n        return false;\n    }\n</code></pre>"},{"location":"DSA/11%20Graph/#number-of-connected-components-in-an-undirected-graph","title":"Number of Connected Components In An Undirected Graph","text":""},{"location":"DSA/11%20Graph/#count-connected-components","title":"count-connected-components","text":""},{"location":"DSA/11%20Graph/#graph-valid-tree","title":"Graph Valid Tree","text":""},{"location":"DSA/11%20Graph/#valid-tree","title":"Valid Tree","text":""},{"location":"DSA/11%20Graph/#word-ladder","title":"Word Ladder","text":"<pre><code>class Solution {\n    public int ladderLength(String beginWord, String endWord, List&lt;String&gt; wordList) {\n        Set&lt;String&gt; set = new HashSet&lt;&gt;(wordList);\n        if(!set.contains(endWord)) return 0;\n\n        Queue&lt;String&gt; queue = new LinkedList&lt;&gt;();\n        queue.add(beginWord);\n\n        Set&lt;String&gt; visited = new HashSet&lt;&gt;();\n        queue.add(beginWord);\n\n        int changes = 1;\n\n        while(!queue.isEmpty()){\n            int size = queue.size();\n            for(int i = 0; i &lt; size; i++){\n                String word = queue.poll();\n                if(word.equals(endWord)) return changes;\n\n                for(int j = 0; j &lt; word.length(); j++){\n                    for(int k = 'a'; k &lt;= 'z'; k++){\n                        char arr[] = word.toCharArray();\n                        arr[j] = (char) k;\n\n                        String str = new String(arr);\n                        if(set.contains(str) &amp;&amp; !visited.contains(str)){\n                            queue.add(str);\n                            visited.add(str);\n                        }\n                    }\n                }\n            }\n            ++changes;\n        }\n        return 0;\n    }\n}\n</code></pre>"},{"location":"DSA/12%20Advanced%20Graphs/","title":"12. Advanced Graphs","text":""},{"location":"DSA/12%20Advanced%20Graphs/#reconstruct-itinerary","title":"Reconstruct Itinerary","text":"<pre><code>class Solution {\n    public List&lt;String&gt; findItinerary(List&lt;List&lt;String&gt;&gt; tickets) {\n        List&lt;String&gt; res = new ArrayList&lt;&gt;();\n        if (tickets == null || tickets.size() == 0) {\n            return res;\n        }  \n        Map&lt;String, PriorityQueue&lt;String&gt;&gt; map = new HashMap&lt;&gt;();\n        for (List&lt;String&gt; ticket : tickets) {\n            map.putIfAbsent(ticket.get(0), new PriorityQueue&lt;&gt;());\n            map.get(ticket.get(0)).add(ticket.get(1));\n        }\n        dfs(map, \"JFK\", res);        \n        return res;\n    }\n\n    private void dfs(Map&lt;String, PriorityQueue&lt;String&gt;&gt; map, String curAirport, List&lt;String&gt; res) {\n        while (map.containsKey(curAirport) &amp;&amp; !map.get(curAirport).isEmpty()) {\n            dfs(map, map.get(curAirport).remove(), res);\n        }\n        res.add(0, curAirport);\n    }\n}\n</code></pre>"},{"location":"DSA/12%20Advanced%20Graphs/#min-cost-to-connect-all-points","title":"Min Cost to Connect All Points","text":"<pre><code>class Solution {\n    public int minCostConnectPoints(int[][] points) {\n        int n = points.length, ans = 0;\n        HashSet&lt;Integer&gt; mst = new HashSet&lt;&gt;();\n        mst.add(0);\n        int[] dist = new int[n];\n        for(int i = 1; i &lt; n; i++) dist[i] = findDist(points, 0, i);\n        while(mst.size() != n) {\n            // Find the node that has shortest distance\n            int next = -1;\n            for(int i = 0; i &lt; n; i++) {\n                if(mst.contains(i)) continue;\n                if(next == -1 || dist[next] &gt; dist[i]) next = i;\n            }\n            // Put the node into the Minning Spanning Tree\n            mst.add(next);\n            ans += dist[next];\n            // Update distance array\n            for(int i = 0; i &lt; n; i++) {\n                if(!mst.contains(i)) {\n                    dist[i] = Math.min(dist[i], findDist(points, i, next));\n                }\n            }\n        }\n        return ans;\n    }\n    private int findDist(int[][] points, int a, int b) {\n        return Math.abs(points[a][0] - points[b][0]) + Math.abs(points[a][1] - points[b][1]);\n    }\n}\n</code></pre>"},{"location":"DSA/12%20Advanced%20Graphs/#network-delay-time","title":"Network Delay Time","text":"<pre><code>class Solution {\n    public int networkDelayTime(int[][] times, int N, int K) {\n        Map&lt;Integer, Map&lt;Integer,Integer&gt;&gt; map = new HashMap&lt;&gt;();\n        for(int[] time : times){\n            map.putIfAbsent(time[0], new HashMap&lt;&gt;());\n            map.get(time[0]).put(time[1], time[2]);\n        }\n\n        //distance, node into pq\n        Queue&lt;int[]&gt; pq = new PriorityQueue&lt;&gt;((a,b) -&gt; (a[0] - b[0]));\n\n        pq.add(new int[]{0, K});\n\n        boolean[] visited = new boolean[N+1];\n        int res = 0;\n\n        while(!pq.isEmpty()){\n            int[] cur = pq.remove();\n            int curNode = cur[1];\n            int curDist = cur[0];\n            if(visited[curNode]) continue;\n            visited[curNode] = true;\n            res = curDist;\n            N--;\n            if(map.containsKey(curNode)){\n                for(int next : map.get(curNode).keySet()){\n                    pq.add(new int[]{curDist + map.get(curNode).get(next), next});\n                }\n            }\n        }\n        return N == 0 ? res : -1;\n\n    }\n}\n</code></pre>"},{"location":"DSA/12%20Advanced%20Graphs/#swim-in-rising-water","title":"Swim In Rising Water","text":"<pre><code>// 2 ms. 99.20%\nclass Solution {\n    int n;\n    private boolean dfs(int[][] grid, int i, int j, int T, boolean[][] visited) {\n        if(i &lt; 0 || i &gt;= n || j &lt; 0 || j &gt;= n || visited[i][j] || grid[i][j] &gt; T) return false;\n        visited[i][j] = true;\n        if(i == n-1 &amp;&amp; j == n-1) return true;\n        return dfs(grid, i-1, j, T, visited) || dfs(grid, i+1, j, T, visited) || dfs(grid, i, j-1, T, visited) || dfs(grid, i, j+1, T, visited);\n    }\n    public int swimInWater(int[][] grid) {\n        this.n = grid.length;\n        int l = grid[0][0], r = n*n - 1;\n        while(l &lt; r) {\n            int m = l + ((r-l) &gt;&gt; 1);\n            if(dfs(grid, 0, 0, m, new boolean[n][n])) {\n                r = m;\n            } else {\n                l = m + 1;\n            }\n        }\n        return l;\n    }\n}\n</code></pre>"},{"location":"DSA/12%20Advanced%20Graphs/#alien-dictionary","title":"Alien Dictionary","text":""},{"location":"DSA/12%20Advanced%20Graphs/#foreign-dictionary","title":"Foreign Dictionary","text":""},{"location":"DSA/12%20Advanced%20Graphs/#cheapest-flights-within-k-stops","title":"Cheapest Flights Within K Stops","text":"<pre><code>// Time Complexity O(k * n) | Space Complexity O(n)\nclass Solution {\n\n    public int findCheapestPrice(\n        int n,\n        int[][] flights,\n        int src,\n        int dst,\n        int k\n    ) {\n        // initialize an array with max value of size n\n        int[] prices = new int[n];\n        Arrays.fill(prices, Integer.MAX_VALUE);\n\n        // price from source to source is always 0\n        prices[src] = 0;\n\n        for (int i = 0; i &lt;= k; i++) {\n            // make a copy of prices\n            int[] temp = new int[n];\n            temp = Arrays.copyOf(prices, prices.length);\n\n            // loop through flights\n            for (int j = 0; j &lt; flights.length; j++) {\n                int s = flights[j][0]; // from\n                int d = flights[j][1]; // to\n                int p = flights[j][2]; // price\n\n                if (prices[s] == Integer.MAX_VALUE) {\n                    continue;\n                }\n\n                if (prices[s] + p &lt; temp[d]) {\n                    temp[d] = prices[s] + p;\n                }\n            }\n\n            // set prices to temp\n            prices = temp;\n        }\n\n        if (prices[dst] != Integer.MAX_VALUE) {\n            return prices[dst];\n        }\n\n        return -1;\n    }\n}\n</code></pre>"},{"location":"DSA/13%201-D%20Dynamic%20Programming/","title":"13. 1-D Dynamic Programming","text":""},{"location":"DSA/13%201-D%20Dynamic%20Programming/#climbing-stairs","title":"Climbing Stairs","text":"<p>Recursion</p> <pre><code>class Solution {\n    public int climbStairs(int n) {\n        if (n == 0 || n == 1) {\n            return 1;\n        }\n        return climbStairs(n-1) + climbStairs(n-2);\n    }\n}\n</code></pre> <p>Memoization</p> <pre><code>class Solution {\n    public int climbStairs(int n) {\n        Map&lt;Integer, Integer&gt; memo = new HashMap&lt;&gt;();\n        return climbStairs(n, memo);\n    }\n\n    private int climbStairs(int n, Map&lt;Integer, Integer&gt; memo) {\n        if (n == 0 || n == 1) {\n            return 1;\n        }\n        if (!memo.containsKey(n)) {\n            memo.put(n, climbStairs(n-1, memo) + climbStairs(n-2, memo));\n        }\n        return memo.get(n);\n    }\n}\n</code></pre> <p>Tabulation </p> <pre><code>class Solution {\n    public int climbStairs(int n) {\n        if (n == 0 || n == 1) {\n            return 1;\n        }\n\n        int[] dp = new int[n+1];\n        dp[0] = dp[1] = 1;\n\n        for (int i = 2; i &lt;= n; i++) {\n            dp[i] = dp[i-1] + dp[i-2];\n        }\n        return dp[n];\n    }\n}\n</code></pre> <p>Space Optimization</p> <pre><code>class Solution {\n    public int climbStairs(int n) {\n        if (n == 0 || n == 1) {\n            return 1;\n        }\n        int prev = 1, curr = 1;\n        for (int i = 2; i &lt;= n; i++) {\n            int temp = curr;\n            curr = prev + curr;\n            prev = temp;\n        }\n        return curr;\n    }\n}\n</code></pre>"},{"location":"DSA/13%201-D%20Dynamic%20Programming/#min-cost-climbing-stairs","title":"Min Cost Climbing Stairs","text":"<p>We start at either step 0 or step 1. The target is to reach either last or second last step, whichever is minimum.</p> <p>Step 1 - Identify a recurrence relation between subproblems.\u00a0In this problem,</p> <p>Recurrence Relation:</p> <p><code>mincost(i) = cost[i]+min(mincost(i-1), mincost(i-2))</code></p> <p>Base cases:</p> <p><code>mincost(0) = cost[0]</code></p> <p><code>mincost(1) = cost[1]</code></p> <p>Step 2 - Convert the recurrence relation to recursion</p> <pre><code>// Recursive Top Down - O(2^n) Time Limit Exceeded\npublic int minCostClimbingStairs(int[] cost) {\n    int n = cost.length;\n    return Math.min(minCost(cost, n-1), minCost(cost, n-2));\n}\nprivate int minCost(int[] cost, int n) {\n    if (n &lt; 0) return 0;\n    if (n==0 || n==1) return cost[n];\n    return cost[n] + Math.min(minCost(cost, n-1), minCost(cost, n-2));\n}\n</code></pre> <p>Step 3 - Optimization 1 - Top Down DP - Add memoization to recursion\u00a0- From exponential to linear.</p> <pre><code>`// Top Down Memoization - O(n) 1ms\nint[] dp;\npublic int minCostClimbingStairs(int[] cost) {\n    int n = cost.length;\n    dp = new int[n];\n    return Math.min(minCost(cost, n-1), minCost(cost, n-2));\n}\nprivate int minCost(int[] cost, int n) {\n    if (n &lt; 0) return 0;\n    if (n==0 || n==1) return cost[n];\n    if (dp[n] != 0) return dp[n];\n    dp[n] = cost[n] + Math.min(minCost(cost, n-1), minCost(cost, n-2));\n    return dp[n];\n}`\n</code></pre> <p>Step 4 - Optimization 2 -Bottom Up DP - Convert recursion to iteration\u00a0- Getting rid of recursive stack</p> <pre><code>// Bottom up tabulation - O(n) 1ms\npublic int minCostClimbingStairs(int[] cost) {\n    int n = cost.length;\n    int[] dp = new int[n];\n    for (int i=0; i&lt;n; i++) {\n        if (i&lt;2) dp[i] = cost[i];\n        else dp[i] = cost[i] + Math.min(dp[i-1], dp[i-2]);\n    }\n    return Math.min(dp[n-1], dp[n-2]);\n}\n</code></pre> <p>Step 5 - Optimization 3 - Fine Tuning - Reduce O(n) space to O(1).</p> <pre><code>// Bottom up computation - O(n) time, O(1) space\npublic int minCostClimbingStairs(int[] cost) {\n    int n = cost.length;\n    int first = cost[0];\n    int second = cost[1];\n    if (n&lt;=2) return Math.min(first, second);\n    for (int i=2; i&lt;n; i++) {\n        int curr = cost[i] + Math.min(first, second);\n        first = second;\n        second = curr;\n    }\n    return Math.min(first, second);\n}\n</code></pre>"},{"location":"DSA/13%201-D%20Dynamic%20Programming/#house-robber","title":"House Robber","text":"<ol> <li>Find recursive relation</li> <li>Recursive (top-down)</li> <li>Recursive + memo (top-down)</li> <li>Iterative + memo (bottom-up)</li> <li>Iterative + N variables (bottom-up)</li> </ol> <p>Step 1.\u00a0Figure out recursive relation.</p> <p>A robber has 2 options: a) rob current house\u00a0<code>i</code>; b) don't rob current house.</p> <p>If an option \"a\" is selected it means she can't rob previous\u00a0<code>i-1</code>\u00a0house but can safely proceed to the one before previous\u00a0<code>i-2</code>\u00a0and gets all cumulative loot that follows.</p> <p>If an option \"b\" is selected the robber gets all the possible loot from robbery of\u00a0<code>i-1</code>\u00a0and all the following buildings.</p> <p>So it boils down to calculating what is more profitable:</p> <ul> <li>robbery of current house + loot from houses before the previous</li> <li>loot from the previous house robbery and any loot captured before that</li> </ul> <p><code>rob(i) = Math.max( rob(i - 2) + currentHouseValue, rob(i - 1) )</code></p> <p>Step 2.\u00a0Recursive (top-down)</p> <p>Converting the recurrent relation from Step 1 shound't be very hard.</p> <pre><code>public int rob(int[] nums) {\n    return rob(nums, nums.length - 1);\n}\nprivate int rob(int[] nums, int i) {\n    if (i &lt; 0) {\n        return 0;\n    }\n    return Math.max(rob(nums, i - 2) + nums[i], rob(nums, i - 1));\n}\n</code></pre> <p>This algorithm will process the same\u00a0<code>i</code>\u00a0multiple times and it needs improvement. Time complexity: [to fill]</p> <p>Step 3.\u00a0Recursive + memo (top-down).</p> <pre><code>int[] memo;\npublic int rob(int[] nums) {\n    memo = new int[nums.length + 1];\n    Arrays.fill(memo, -1);\n    return rob(nums, nums.length - 1);\n}\n\nprivate int rob(int[] nums, int i) {\n    if (i &lt; 0) {\n        return 0;\n    }\n    if (memo[i] &gt;= 0) {\n        return memo[i];\n    }\n    int result = Math.max(rob(nums, i - 2) + nums[i], rob(nums, i - 1));\n    memo[i] = result;\n    return result;\n}\n</code></pre> <p>Much better, this should run in\u00a0<code>O(n)</code>\u00a0time. Space complexity is\u00a0<code>O(n)</code>\u00a0as well, because of the recursion stack, let's try to get rid of it.</p> <p>Step 4.\u00a0Iterative + memo (bottom-up)</p> <pre><code>public int rob(int[] nums) {\n    if (nums.length == 0) return 0;\n    int[] memo = new int[nums.length + 1];\n    memo[0] = 0;\n    memo[1] = nums[0];\n    for (int i = 1; i &lt; nums.length; i++) {\n        int val = nums[i];\n        memo[i+1] = Math.max(memo[i], memo[i-1] + val);\n    }\n    return memo[nums.length];\n}\n</code></pre> <p>Step 5.\u00a0Iterative + 2 variables (bottom-up)</p> <p>We can notice that in the previous step we use only\u00a0<code>memo[i]</code>\u00a0and\u00a0<code>memo[i-1]</code>, so going just 2 steps back. We can hold them in 2 variables instead. This optimization is met in Fibonacci sequence creation and some other problems [to paste links].</p> <pre><code>/* the order is: prev2, prev1, num  */\npublic int rob(int[] nums) {\n    if (nums.length == 0) return 0;\n    int prev1 = 0;\n    int prev2 = 0;\n    for (int num : nums) {\n        int tmp = prev1;\n        prev1 = Math.max(prev2 + num, prev1);\n        prev2 = tmp;\n    }\n    return prev1;\n}\n</code></pre>"},{"location":"DSA/13%201-D%20Dynamic%20Programming/#house-robber-ii","title":"House Robber II","text":"<p>Since this question is a follow-up to House Robber, we can assume we already have a way to solve the simpler question, i.e. given a 1 row of house, we know how to rob them. So we already have such a helper function. We modify it a bit to rob a given range of houses.</p> <pre><code>private int rob(int[] num, int lo, int hi) {\n    int include = 0, exclude = 0;\n    for (int j = lo; j &lt;= hi; j++) {\n        int i = include, e = exclude;\n        include = e + num[j];\n        exclude = Math.max(e, i);\n    }\n    return Math.max(include, exclude);\n}\n</code></pre> <p>Now the question is how to rob a circular row of houses. It is a bit complicated to solve like the simpler question. It is because in the simpler question whether to rob\u00a0num[lo]\u00a0is entirely our choice. But, it is now constrained by whether\u00a0num[hi]\u00a0is robbed.</p> <p>However, since we already have a nice solution to the simpler problem. We do not want to throw it away. Then, it becomes how can we reduce this problem to the simpler one. Actually, extending from the logic that if house i is not robbed, then you are free to choose whether to rob house i + 1, you can break the circle by assuming a house is not robbed.</p> <p>For example, 1 -&gt; 2 -&gt; 3 -&gt; 1 becomes 2 -&gt; 3 if 1 is not robbed.</p> <p>Since every house is either robbed or not robbed and at least half of the houses are not robbed, the solution is simply the larger of two cases with consecutive houses, i.e. house i not robbed, break the circle, solve it, or house i + 1 not robbed. Hence, the following solution. I chose i = n and i + 1 = 0 for simpler coding. But, you can choose whichever two consecutive ones.</p> <pre><code>public int rob(int[] nums) {\n    if (nums.length == 1) return nums[0];\n    return Math.max(rob(nums, 0, nums.length - 2), rob(nums, 1, nums.length - 1));\n}\n</code></pre>"},{"location":"DSA/13%201-D%20Dynamic%20Programming/#longest-palindromic-substring","title":"Longest Palindromic Substring","text":"<p><code>dp(i, j)</code>\u00a0represents whether\u00a0<code>s(i ... j)</code>\u00a0can form a palindromic substring,\u00a0<code>dp(i, j)</code>\u00a0is true when\u00a0<code>s(i)</code>\u00a0equals to\u00a0<code>s(j)</code>\u00a0and\u00a0<code>s(i+1 ... j-1)</code>\u00a0is a palindromic substring. When we found a palindrome, check if it's the longest one. Time complexity O(n^2).</p> <pre><code>public String longestPalindrome(String s) {\n  int n = s.length();\n  String res = null;\n\n  boolean[][] dp = new boolean[n][n];\n\n  for (int i = n - 1; i &gt;= 0; i--) {\n    for (int j = i; j &lt; n; j++) {\n      dp[i][j] = s.charAt(i) == s.charAt(j) &amp;&amp; (j - i &lt; 3 || dp[i + 1][j - 1]);\n\n      if (dp[i][j] &amp;&amp; (res == null || j - i + 1 &gt; res.length())) {\n        res = s.substring(i, j + 1);\n      }\n    }\n  }\n\n  return res;\n}\n</code></pre>"},{"location":"DSA/13%201-D%20Dynamic%20Programming/#palindromic-substrings","title":"Palindromic Substrings","text":"<p>Step 1:\u00a0Start a for loop to point at every single character from where we will trace the palindrome string.</p> <p>checkPalindrome(s,i,i); //To check the palindrome of odd length palindromic sub-string</p> <p>checkPalindrome(s,i,i+1); //To check the palindrome of even length palindromic sub-string</p> <p>Step 2:\u00a0From each character of the string, we will keep checking if the sub-string is a palindrome and increment the palindrome count. To check the palindrome, keep checking the left and right of the character if it is same or not.</p> <p>First Loop:</p> <p></p> <p>Palindrome: a (Count=1)</p> <p></p> <p>Palindrome: aa (Count=2)</p> <p>Second Loop:</p> <p></p> <p>Palindrome: a (Count=3)</p> <p></p> <p>Palindrome: No Palindrome</p> <p>Third Loop:</p> <p></p> <p>Palindrome: b,aba,aabaa (Count=6)</p> <p></p> <p>Palindrome: No Palindrome</p> <p>Forth Loop:</p> <p></p> <p>Palindrome: a (Count=7)</p> <p></p> <p>Palindrome: aa (Count=8)</p> <p>Count = 9 (For the last character)</p> <p>Answer = 9</p> <p>'''</p> <pre><code>int count =1;\npublic int countSubstrings(String s) {\n    if(s.length()==0) \n        return 0;\n    for(int i=0; i&lt;s.length()-1; i++){\n        checkPalindrome(s,i,i);     //To check the palindrome of odd length palindromic sub-string\n        checkPalindrome(s,i,i+1);   //To check the palindrome of even length palindromic sub-string\n    }\n    return count;\n}    \n\nprivate void checkPalindrome(String s, int i, int j) {\n    while(i&gt;=0 &amp;&amp; j&lt;s.length() &amp;&amp; s.charAt(i)==s.charAt(j)){    //Check for the palindrome string \n        count++;    //Increment the count if palindromin substring found\n        i--;    //To trace string in left direction\n        j++;    //To trace string in right direction\n    }\n}\n</code></pre>"},{"location":"DSA/13%201-D%20Dynamic%20Programming/#decode-ways","title":"Decode Ways","text":"<p>I used a dp array of size n + 1 to save subproblem solutions.\u00a0<code>dp[0]</code>\u00a0means an empty string will have one way to decode,\u00a0<code>dp[1]</code>\u00a0means the way to decode a string of size 1. I then check one digit and two digit combination and save the results along the way. In the end,\u00a0<code>dp[n]</code>\u00a0will be the end result.</p> <pre><code>public class Solution {\n    public int numDecodings(String s) {\n        if (s == null || s.length() == 0) {\n            return 0;\n        }\n        int n = s.length();\n        int[] dp = new int[n + 1];\n        dp[0] = 1;\n        dp[1] = s.charAt(0) != '0' ? 1 : 0;\n        for (int i = 2; i &lt;= n; i++) {\n            int first = Integer.valueOf(s.substring(i - 1, i));\n            int second = Integer.valueOf(s.substring(i - 2, i));\n            if (first &gt;= 1 &amp;&amp; first &lt;= 9) {\n               dp[i] += dp[i-1];  \n            }\n            if (second &gt;= 10 &amp;&amp; second &lt;= 26) {\n                dp[i] += dp[i-2];\n            }\n        }\n        return dp[n];\n    }\n}\n</code></pre>"},{"location":"DSA/13%201-D%20Dynamic%20Programming/#coin-change","title":"Coin Change","text":"<p>Recursive Method:</p> <p>The idea is very classic dynamic programming: think of the last step we take. Suppose we have already found out the best way to sum up to amount\u00a0<code>a</code>, then for the last step, we can choose any coin type which gives us a remainder\u00a0<code>r</code>\u00a0where\u00a0<code>r = a-coins[i]</code>\u00a0for all\u00a0<code>i</code>'s. For every remainder, go through exactly the same process as before until either the remainder is 0 or less than 0 (meaning not a valid solution). With this idea, the only remaining detail is to store the minimum number of coins needed to sum up to\u00a0<code>r</code>\u00a0so that we don't need to recompute it over and over again.</p> <p>Code in Java:</p> <pre><code>public class Solution {\npublic int coinChange(int[] coins, int amount) {\n    if(amount&lt;1) return 0;\n    return helper(coins, amount, new int[amount]);\n}\n\nprivate int helper(int[] coins, int rem, int[] count) { // rem: remaining coins after the last step; count[rem]: minimum number of coins to sum up to rem\n    if(rem&lt;0) return -1; // not valid\n    if(rem==0) return 0; // completed\n    if(count[rem-1] != 0) return count[rem-1]; // already computed, so reuse\n    int min = Integer.MAX_VALUE;\n    for(int coin : coins) {\n        int res = helper(coins, rem-coin, count);\n        if(res&gt;=0 &amp;&amp; res &lt; min)\n            min = 1+res;\n    }\n    count[rem-1] = (min==Integer.MAX_VALUE) ? -1 : min;\n    return count[rem-1];\n}\n}\n</code></pre> <p>Iterative Method:</p> <p>For the iterative solution, we think in bottom-up manner. Suppose we have already computed all the minimum counts up to\u00a0<code>sum</code>, what would be the minimum count for\u00a0<code>sum+1</code>?</p> <p>Code in Java:</p> <pre><code>public class Solution {\npublic int coinChange(int[] coins, int amount) {\n    if(amount&lt;1) return 0;\n    int[] dp = new int[amount+1];\n    int sum = 0;\n\n    while(++sum&lt;=amount) {\n        int min = -1;\n        for(int coin : coins) {\n            if(sum &gt;= coin &amp;&amp; dp[sum-coin]!=-1) {\n                int temp = dp[sum-coin]+1;\n                min = min&lt;0 ? temp : (temp &lt; min ? temp : min);\n            }\n        }\n        dp[sum] = min;\n    }\n    return dp[amount];\n}\n}\n</code></pre>"},{"location":"DSA/13%201-D%20Dynamic%20Programming/#maximum-product-subarray","title":"Maximum Product Subarray","text":"<p>Intution:\u00a0Since we have to find the contiguous subarray having maximum product then your approach should be combination of following three cases :</p> <ul> <li>Case1 :- All the elements are positive :\u00a0Then your answer will be product of all the elements in the array.</li> <li>Case2 :- Array have positive and negative elements both :<ol> <li>If the number of negative elements is even then again your answer will be complete array because on multiplying all the negative numbers it will become positive.</li> <li>If the number of negative elements is odd then you have to remove just one negative element and for that u need to check your subarrays to get the max product.</li> </ol> </li> <li>Case3 :- Array also contains 0 :\u00a0Then there will be not much difference...its just that your array will be divided into subarray around that 0. What u have to so is just as soon as your product becomes 0 make it 1 for the next iteration, now u will be searching new subarray and previous max will already be updated.(These cases are much clear in approach 3)</li> <li> <ul> <li>As it is said \"Talk is Cheap, Show me the Code\", so based on above discussion we can frame our code in many different ways, out of which I have mentioned 3 intutive approaches.</li> </ul> </li> </ul> <p>Approach 1:\u00a0For each index i keep updating the max and min. We are also keeping min because on multiplying with any negative number your min will become max and max will become min. So for every index i we will take max of (i-th element, prevMax * i-th element, prevMin * i-th element).</p> <pre><code>class Solution {\n    public int maxProduct(int[] nums) {\n\n        int max = nums[0], min = nums[0], ans = nums[0];\n\n        for (int i = 1; i &lt; nums.length; i++) {\n\n            int temp = max;  // store the max because before updating min your max will already be updated\n\n            max = Math.max(Math.max(max * nums[i], min * nums[i]), nums[i]);\n            min = Math.min(Math.min(temp * nums[i], min * nums[i]), nums[i]);\n\n            if (max &gt; ans) {\n                ans = max;\n            }\n        }\n\n        return ans;\n\n    }\n}\n</code></pre> <p>Approach 2:\u00a0Just the slight modification of previous approach. As we know that on multiplying with negative number max will become min and min will become max, so why not as soon as we encounter negative element, we swap the max and min already.</p> <pre><code>class Solution {\n    public int maxProduct(int[] nums) {\n\n        int max = nums[0], min = nums[0], ans = nums[0];\n        int n = nums.length;\n\n        for (int i = 1; i &lt; n; i++) {\n\n            // Swapping min and max\n            if (nums[i] &lt; 0){\n                int temp = max;\n                max = min;\n                min = temp;\n            }\n\n\n            max = Math.max(nums[i], max * nums[i]);\n            min = Math.min(nums[i], min * nums[i]);\n\n            ans = Math.max(ans, max);\n        }\n\n        return ans;\n\n    }\n}\n</code></pre> <p>Approach 3:\u00a0Two pointer Approach</p> <p>Explanation :</p> <p>1.) Through intution explanation we know that if all the elements are positive or the negative elements are even then ur answer will be product of complete array which u will get in variable l and r at the last iteration.</p> <p>2.) But if negative elements are odd then u have to remove one negative element and it is sure that it will be either right of max prefix product or left of max suffix product. So u need not to modify anything in your code as u are getting prefix product in l and suffix prduxt in r.</p> <p>3.) If array also contains 0 then your l and r will become 0 at that point...then just update it to 1(or else u will keep multiplying with 0) to get the product ahead making another subarray.</p> <p></p> <pre><code>class Solution {\n    public int maxProduct(int[] nums) {\n\n        int n = nums.length;\n        int l=1,r=1;\n        int ans=nums[0];\n\n        for(int i=0;i&lt;n;i++){\n\n            //if any of l or r become 0 then update it to 1\n            l = l==0 ? 1 : l;\n            r = r==0 ? 1 : r;\n\n            l *= nums[i];   //prefix product\n            r *= nums[n-1-i];    //suffix product\n\n            ans = Math.max(ans,Math.max(l,r));\n\n        }\n\n        return ans;\n\n    }\n}\n</code></pre>"},{"location":"DSA/13%201-D%20Dynamic%20Programming/#word-break","title":"Word Break","text":"<pre><code>class Solution {\n    public boolean wordBreak(String s, List&lt;String&gt; wordDict) {\n        // put all words into a hashset\n        Set&lt;String&gt; set = new HashSet&lt;&gt;(wordDict);\n        return wb(s, set);\n    }\n    private boolean wb(String s, Set&lt;String&gt; set) {\n        int len = s.length();\n        if (len == 0) {\n            return true;\n        }\n        for (int i = 1; i &lt;= len; ++i) {\n            if (set.contains(s.substring(0, i)) &amp;&amp; wb(s.substring(i), set)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n</code></pre> <p>The time complexity depends on how many nodes the recursion tree has. In the worst case, the recursion tree has the most nodes, which means the program should not return in the middle and it should try as many possibilities as possible. So the branches and depth of the tree are as many as possible. For the worst case, for example, we take\u00a0<code>s = \"abcd\"</code>\u00a0and\u00a0<code>wordDict = [\"a\", \"b\", \"c\", \"bc\", \"ab\", \"abc\"]</code>, the recursion tree is shown below:</p> <p></p> <p>From the code\u00a0<code>if (set.contains(s.substring(0, i)) &amp;&amp; wb(s.substring(i), set)) { }</code>, we can see that only if the wordDict contains the prefix, the recursion function can go down to the next level. So on the figure above, string on the edge means the wordDict contains that string. All the gray node with empty string cannot be reached because if the program reaches one such node, the program will return, which lead to some nodes right to it will not be reached. So the conclusion is for a string with length 4, the recursion tree has 8 nodes (all black nodes), and 8 is 2^(4-1). So to generalize this, for a string with length n, the recursion tree wil have 2^(n-1) nodes, i.e., the time complexity is O(2^n). I will prove this generalization below using mathmatical induction:</p> <p></p> <p>Explanation: the value of a node is the string length. We calculate the number of nodes in the recursion tree for string length=1, 2, ...., n respectively.</p> <p>For example, when string length=4, the second layer of the recursion tree has three nodes where the string length is 3, 2 and 1 respectively. And the number of subtree rooted at these three nodes have been calculated when we do the mathmatical induction.</p> <p>So time complexity is O(2^n).</p>"},{"location":"DSA/13%201-D%20Dynamic%20Programming/#longest-increasing-subsequence","title":"Longest Increasing Subsequence","text":"<p><code>tails</code>\u00a0is an array storing the smallest tail of all increasing subsequences with length\u00a0<code>i+1</code>\u00a0in\u00a0<code>tails[i]</code>.</p> <p>For example, say we have\u00a0<code>nums = [4,5,6,3]</code>, then all the available increasing subsequences are:</p> <p><code>len = 1   :      [4], [5], [6], [3]   =&gt; tails[0] = 3 len = 2   :      [4, 5], [5, 6]       =&gt; tails[1] = 5 len = 3   :      [4, 5, 6]            =&gt; tails[2] = 6</code></p> <p>We can easily prove that tails is a increasing array. Therefore it is possible to do a binary search in tails array to find the one needs update.</p> <p>Each time we only do one of the two:</p> <p><code>(1) if x is larger than all tails, append it, increase the size by 1 (2) if tails[i-1] &lt; x &lt;= tails[i], update tails[i]</code></p> <p>Doing so will maintain the tails invariant. The the final answer is just the size.</p> <pre><code>public int lengthOfLIS(int[] nums) {\n    int[] tails = new int[nums.length];\n    int size = 0;\n    for (int x : nums) {\n        int i = 0, j = size;\n        while (i != j) {\n            int m = (i + j) / 2;\n            if (tails[m] &lt; x)\n                i = m + 1;\n            else\n                j = m;\n        }\n        tails[i] = x;\n        if (i == size) ++size;\n    }\n    return size;\n}\n// Runtime: 2 ms\n</code></pre>"},{"location":"DSA/13%201-D%20Dynamic%20Programming/#partition-equal-subset-sum","title":"Partition Equal Subset Sum","text":"<p>Intution :\u00a0So Lets start step by step and concentrate on the process:</p> <ol> <li> <p>Since we have to make two subset both having equal sum then our first condition is to check whether the sum of given array can be divided in two equal part which is if total sum is odd then partition is not possible at all and if sum is even then there is chance.For example:</p> <p><code>1.) arr1-&gt; [1,5,11,5]   and     2.) arr2 -&gt; [1,5,3,11]  Both arr1 and arr2 has even sum but 1st can be partitioned into ([1,5,5] &amp; [11]) and 2nd can not.</code></p> </li> </ol> <p>2.)\u00a0Now lets try to visualize it as 0/1 Knapsack Problem:</p> <ul> <li>Since in 0/1 knapsack we have 2 choices for each object having value v whether to keep it or not in your kanpsack having certain weight W.</li> <li>Same as in this case we have n elements in array and we have two choices to make whether to keep it in subset1 or subset2 (inclusion in one is direct exclusion in other) and weight of knapsack/subset will be sum/2.</li> </ul> <p>3.) So now what our target remain is we have to take care about only one subset because if one subset with weight sum/2 is possible then other subset will surely have the weight sum/2.</p> <p>4.) So now using subset sum problem code we have to just check if its possible to have a subset having sum = totalSum/2;</p> <p>Approach1: Memoization (TLE)</p> <pre><code>class Solution {\n    boolean mem[][];\n    public boolean canPartition(int[] nums) {\n        int sum = 0;\n        int n = nums.length;\n\n        for(int i : nums) sum+=i;\n\n        if(sum%2!=0) return false;\n\n        sum /= 2;\n\n        mem = new boolean[n+1][sum+1];\n\n        return subsetSum(nums,0,sum);\n    }\n\n    boolean subsetSum(int[] nums, int pos, int sum){\n        if(sum==0) return true;\n\n        else if(pos&gt;=nums.length || sum&lt;0) return false;\n\n        if(mem[pos][sum]) return true;\n\n        return mem[pos][sum] = subsetSum(nums,pos+1,sum-nums[pos]) ||\n                                subsetSum(nums,pos+1,sum);\n    }\n}\n</code></pre> <ul> <li>*A little update:**\u00a0After reading comments on my post I analyze my memoization code that why its giving TLE so I figured that in subset function if (mem[pos][sum]==true) then I am returning true but if its false then it will keep on computing but the problem was that boolean array automatically initialises array with false..so i cant differentiate... so for that we need to take object boolean array so that it initialises with null or assign null value manually to boolean array.</li> </ul> <p>Updated Memoization Code: (100% Faster)</p> <pre><code>class Solution {\n    Boolean mem[][];\n    public boolean canPartition(int[] nums) {\n        int sum = 0;\n        int n = nums.length;\n\n        for(int i : nums) sum+=i;\n\n        if(sum%2!=0) return false;\n\n        sum /= 2;\n\n        mem = new Boolean[n+1][sum+1];\n\n        return subsetSum(nums,0,sum);\n    }\n\n    boolean subsetSum(int[] nums, int pos, int sum){\n        if(sum==0) return true;\n\n        else if(pos&gt;=nums.length || sum&lt;0) return false;\n\n        if(mem[pos][sum]!=null) return mem[pos][sum];\n\n        return mem[pos][sum] = subsetSum(nums,pos+1,sum-nums[pos]) ||\n                                subsetSum(nums,pos+1,sum);\n\n\n    }\n}\n</code></pre> <p>Approach2: Dynamic Programming</p> <pre><code>class Solution {\n\n    public boolean canPartition(int[] nums) {\n        int sum = 0;\n        int n = nums.length;\n\n        for(int i : nums) sum+=i;\n\n        if(sum%2!=0) return false;\n\n        sum /= 2;\n\n        boolean dp[][] = new boolean[n+1][sum+1];\n\n        for(int i=0;i&lt;=n;i++){\n            for(int j=0;j&lt;=sum;j++){\n                if(i==0 || j==0)\n                    dp[i][j] = false;\n                else if(nums[i-1] &gt; j)     // if curr sum value is greater than the current element value then just skip(take previous value)\n                    dp[i][j] = dp[i-1][j];\n                else if(nums[i-1]==j)  // we got required sum\n                    dp[i][j] = true;\n                else\n                    dp[i][j] = dp[i-1][j] || dp[i-1][j-nums[i-1]];\n            }\n        }\n        return dp[n][sum];\n\n\n    }\n}\n</code></pre> <p>Approach3: Space Optimized DP</p> <p>Explanation: Idea behind reverse loop for sum</p> <ul> <li>If you observe the 2d DP then dp[i][j] is the value either from dp[i-1][j] or dp[i-1][j-nums[i-1]] and when we converted 2d DP into 1d DP then the thinking was that, dp[i] will have values for one iteration and then again for next iteration we will use that stored values which will act as dp[i-1] for this iteration.</li> <li>So now we need value of dp[i-num] that is value from previous index so here is the problem in left to right loop that each time when we enter into new interation we need value from previous iteration but the value will already be updated in this iteartion and we will loss the previous value.</li> <li>Thats why using reverse loop.</li> </ul> <p>Example: Lets in first iteration dp array is filled as [2,6,1,8,5]</p> <p>So now we started from left and upadated 2 as 4 and 6 as 7 and 1 as 5([4,7,5,8,5]) and now we reach to 8 and we need dp[1] value but we need the value from previous iteration which we have lost and hence will get the wrong answer.</p> <p>So move from right to left and use the previous iteration value.</p> <p>(these are pure random values used in example, so dont think about them just get the example)</p> <pre><code>class Solution {\n\n    public boolean canPartition(int[] nums) {\n        int sum = 0;\n        int n = nums.length;\n\n        for(int i : nums) sum+=i;\n\n        if(sum%2!=0) return false;\n\n        sum /= 2;\n\n        boolean[] dp = new boolean[sum+1];\n\n        dp[0] = true;\n\n        for (int j : nums) {\n            for (int i = sum; i &gt; 0; i--) {\n                if (i &gt;= j) {\n                    dp[i] = dp[i] || dp[i-j];\n                }\n            }\n        }\n\n        return dp[sum];\n\n\n    }\n}\n</code></pre>"},{"location":"DSA/14%202-D%20Dynamic%20Programming/","title":"14. 2-D Dynamic Programming","text":""},{"location":"DSA/14%202-D%20Dynamic%20Programming/#unique-paths","title":"Unique Paths","text":"<p>Recursion</p> <p>Check out the comments.</p> <p></p> <pre><code>// Define: opt(i, j) the number of ways to the point (i, j)\n// (0, 0) is the starting point, (m - 1, n - 1) is the finish point\n// Recurrence: opt(i, j) = opt(i - 1, j) + opt(i, j - 1)\n// Init: opt(0, 0) = 1, opt(0, j) = opt(i, 0) = 1\npublic int uniquePaths(int m, int n) {\n  if (m == 0 || n == 0) {\n    throw new IllegalArgumentException(\"m or n can't be 0\");\n  }\n  return numPaths(m - 1, n - 1);\n}\n\nprivate int numPaths(int i, int j) {\n  if (i == 0 || j == 0) { // includes the row 0 and col 0\n    return 1;\n  }\n  return numPaths(i - 1, j) + numPaths(i, j - 1);\n}\n</code></pre> <p>Time: <code>O(2^{M + N})</code></p> <p>Space: <code>O(M + N)</code></p> <p>Recurrence Tree for complexity analysis:</p> <p></p> <p>DP (Top-down with Memoization)</p> <p>Use an 2D array\u00a0<code>mem</code>\u00a0to do memoization.</p> <pre><code>public int uniquePaths(int m, int n) {\n  if (m == 0 || n == 0) {\n    throw new IllegalArgumentException(\"m or n can't be 0\");\n  }\n  int[][] mem = new int[m][n];\n  for (int i = 0; i &lt; m; ++i) { // init\n    for (int j = 0; j &lt; n; ++j) {\n      mem[i][j] = -1;\n    }\n  }\n  return numPaths(m - 1, n - 1, mem);\n}\n\nprivate int numPaths(int i, int j, int[][] mem) {\n  if (i == 0 || j == 0) {\n    return 1;\n  }\n  if (mem[i - 1][j] == -1) mem[i - 1][j] = numPaths(i - 1, j, mem);\n  if (mem[i][j - 1] == -1) mem[i][j - 1] = numPaths(i, j - 1, mem);\n  return mem[i - 1][j] + mem[i][j - 1];\n}\n</code></pre> <p>Time: <code>O(MN)</code>\u00a0where\u00a0<code>MN</code>\u00a0is the number of subproblems.</p> <p>Space: <code>O(MN)</code></p> <p></p> <p>DP (Bottom-up)</p> <p></p> <pre><code>public int uniquePaths(int m, int n) {\n  if (m == 0 || n == 0) {\n    throw new IllegalArgumentException(\"m or n can't be 0\");\n  }\n  int[][] dp = new int[m][n];\n  // init\n  for (int i = 0; i &lt; m; ++i) dp[i][0] = 1;\n  for (int i = 0; i &lt; n; ++i) dp[0][i] = 1;\n  // dp\n  for (int i = 1; i &lt; m; ++i) {\n    for (int j = 1; j &lt; n; ++j) {\n      dp[i][j] = dp[i - 1][j] + dp[i][j - 1];\n    }\n  }\n  return dp[m - 1][n - 1];\n}\n</code></pre> <p>Time: <code>O(MN)</code></p> <p>Space: <code>O(MN)</code></p> <p>DP (Bottom-up, Linear Space)</p> <p>Reduce the\u00a0O(MN)O(MN)O(MN)\u00a0space complexity to\u00a0O(N)O(N)O(N)\u00a0(a row) or\u00a0O(M)O(M)O(M)\u00a0(a column). In terms of a row, we would update\u00a0<code>dp[j]</code>\u00a0by its old value plus\u00a0<code>dp[j - 1]</code>.</p> <p></p> <pre><code>public int uniquePaths(int m, int n) {\n  if (m == 0 || n == 0) {\n    throw new IllegalArgumentException(\"m or n can't be 0\");\n  }\n  int[] dp = new int[n]; // row\n  // init\n  for (int i = 0; i &lt; n; ++i) dp[i] = 1;\n  // dp\n  for (int i = 1; i &lt; m; ++i) {\n    for (int j = 1; j &lt; n; ++j) {\n      dp[j] = dp[j] + dp[j - 1];\n    }\n  }\n  return dp[n - 1];\n}\n</code></pre> <p>Time: <code>O(MN)</code></p> <p>Space: <code>O(N)</code>\u00a0or\u00a0<code>O(M)</code></p>"},{"location":"DSA/14%202-D%20Dynamic%20Programming/#longest-common-subsequence","title":"Longest Common Subsequence","text":"<p>Brute Force</p> <pre><code>class Solution {\n    public int longestCommonSubsequence(String text1, String text2) {\n        return longestCommonSubsequence(text1, text2, 0, 0);\n    }\n\n    private int longestCommonSubsequence(String text1, String text2, int i, int j) {\n        if (i == text1.length() || j == text2.length())\n            return 0;\n        if (text1.charAt(i) == text2.charAt(j))\n            return 1 + longestCommonSubsequence(text1, text2, i + 1, j + 1);\n        else\n            return Math.max(\n                longestCommonSubsequence(text1, text2, i + 1, j),\n                longestCommonSubsequence(text1, text2, i, j + 1)\n            );\n    }\n}\n</code></pre> <p>Top-down DP</p> <p>We might use memoization to overcome overlapping subproblems.</p> <p>Since there are two changing values, i.e.\u00a0<code>i</code>\u00a0and\u00a0<code>j</code>\u00a0in the recursive function\u00a0<code>longestCommonSubsequence</code>, we might apply a two-dimensional array.</p> <pre><code>class Solution {\n    private Integer[][] dp;\n    public int longestCommonSubsequence(String text1, String text2) {\n        dp = new Integer[text1.length()][text2.length()];\n        return longestCommonSubsequence(text1, text2, 0, 0);\n    }\n\n    private int longestCommonSubsequence(String text1, String text2, int i, int j) {\n        if (i == text1.length() || j == text2.length())\n            return 0;\n\n        if (dp[i][j] != null)\n            return dp[i][j];\n\n        if (text1.charAt(i) == text2.charAt(j))\n            return dp[i][j] = 1 + longestCommonSubsequence(text1, text2, i + 1, j + 1);\n        else\n            return dp[i][j] = Math.max(\n                longestCommonSubsequence(text1, text2, i + 1, j),\n                longestCommonSubsequence(text1, text2, i, j + 1)\n            );\n    }\n}\n</code></pre> <p>Bottom-up DP</p> <p>For every\u00a0<code>i</code>\u00a0in text1,\u00a0<code>j</code>\u00a0in text2, we will choose one of the following two options:</p> <ul> <li>if two characters match, length of the common subsequence would be 1 plus the length of the common subsequence till the\u00a0<code>i-1</code>\u00a0and\u00a0<code>j-1</code>\u00a0indexes</li> <li>if two characters doesn't match, we will take the longer by either skipping\u00a0<code>i</code>\u00a0or\u00a0<code>j</code>\u00a0indexes</li> </ul> <pre><code>class Solution {\n    public int longestCommonSubsequence(String text1, String text2) {\n        int[][] dp = new int[text1.length() + 1][text2.length() + 1];\n        for (int i = 1; i &lt;= text1.length(); i++) {\n            for (int j = 1; j &lt;= text2.length(); j++) {\n                if (text1.charAt(i - 1) == text2.charAt(j - 1))\n                    dp[i][j] = 1 + dp[i - 1][j - 1];\n                else\n                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n            }\n        }\n        return dp[text1.length()][text2.length()];\n    }\n}\n</code></pre>"},{"location":"DSA/14%202-D%20Dynamic%20Programming/#best-time-to-buy-and-sell-stock-with-cooldown","title":"Best Time to Buy And Sell Stock With Cooldown","text":"<p>The series of problems are typical dp. The key for dp is to find the variables to represent the states and deduce the transition function.</p> <p>Of course one may come up with a O(1) space solution directly, but I think it is better to be generous when you think and be greedy when you implement.</p> <p>The natural states for this problem is the 3 possible transactions :\u00a0<code>buy</code>,\u00a0<code>sell</code>,\u00a0<code>rest</code>. Here\u00a0<code>rest</code>\u00a0means no transaction on that day (aka cooldown).</p> <p>Then the transaction sequences can end with any of these three states.</p> <p>For each of them we make an array,\u00a0<code>buy[n]</code>,\u00a0<code>sell[n]</code>\u00a0and\u00a0<code>rest[n]</code>.</p> <p><code>buy[i]</code>\u00a0means before day\u00a0<code>i</code>\u00a0what is the maxProfit for any sequence end with\u00a0<code>buy</code>.</p> <p><code>sell[i]</code>\u00a0means before day\u00a0<code>i</code>\u00a0what is the maxProfit for any sequence end with\u00a0<code>sell</code>.</p> <p><code>rest[i]</code>\u00a0means before day\u00a0<code>i</code>\u00a0what is the maxProfit for any sequence end with\u00a0<code>rest</code>.</p> <p>Then we want to deduce the transition functions for\u00a0<code>buy</code> <code>sell</code>\u00a0and\u00a0<code>rest</code>. By definition we have:</p> <p><code>buy[i]  = max(rest[i-1]-price, buy[i-1])  sell[i] = max(buy[i-1]+price, sell[i-1]) rest[i] = max(sell[i-1], buy[i-1], rest[i-1])</code></p> <p>Where\u00a0<code>price</code>\u00a0is the price of day\u00a0<code>i</code>. All of these are very straightforward. They simply represents :</p> <p><code>(1) We have to</code>rest<code>before we</code>buy<code>and  (2) we have to</code>buy<code>before we</code>sell``</p> <p>One tricky point is how do you make sure you\u00a0<code>sell</code>\u00a0before you\u00a0<code>buy</code>, since from the equations it seems that\u00a0<code>[buy, rest, buy]</code>\u00a0is entirely possible.</p> <p>Well, the answer lies within the fact that\u00a0<code>buy[i] &lt;= rest[i]</code>\u00a0which means\u00a0<code>rest[i] = max(sell[i-1], rest[i-1])</code>. That made sure\u00a0<code>[buy, rest, buy]</code>\u00a0is never occurred.</p> <p>A further observation is that and\u00a0<code>rest[i] &lt;= sell[i]</code>\u00a0is also true therefore</p> <p><code>rest[i] = sell[i-1]</code></p> <p>Substitute this in to\u00a0<code>buy[i]</code>\u00a0we now have 2 functions instead of 3:</p> <p><code>buy[i] = max(sell[i-2]-price, buy[i-1]) sell[i] = max(buy[i-1]+price, sell[i-1])</code></p> <p>This is better than 3, but</p> <p>we can do even better</p> <p>Since states of day\u00a0<code>i</code>\u00a0relies only on\u00a0<code>i-1</code>\u00a0and\u00a0<code>i-2</code>\u00a0we can reduce the O(n) space to O(1). And here we are at our final solution:</p> <p>Java</p> <pre><code>public int maxProfit(int[] prices) {\n    int sell = 0, prev_sell = 0, buy = Integer.MIN_VALUE, prev_buy;\n    for (int price : prices) {\n        prev_buy = buy;\n        buy = Math.max(prev_sell - price, prev_buy);\n        prev_sell = sell;\n        sell = Math.max(prev_buy + price, prev_sell);\n    }\n    return sell;\n}\n</code></pre>"},{"location":"DSA/14%202-D%20Dynamic%20Programming/#coin-change-ii","title":"Coin Change II","text":"<p>This is a classic knapsack problem. Honestly, I'm not good at knapsack problem, it's really tough for me.</p> <p><code>dp[i][j]</code>\u00a0: the number of combinations to make up amount\u00a0<code>j</code>\u00a0by using the first\u00a0<code>i</code>\u00a0types of coins</p> <p><code>State transition</code>:</p> <ol> <li>not using the\u00a0<code>i</code>th coin, only using the first\u00a0<code>i-1</code>\u00a0coins to make up amount\u00a0<code>j</code>, then we have\u00a0<code>dp[i-1][j]</code>\u00a0ways.</li> <li>using the\u00a0<code>i</code>th coin, since we can use unlimited same coin, we need to know how many ways to make up amount\u00a0<code>j - coins[i-1]</code>\u00a0by using first\u00a0<code>i</code>\u00a0coins(including\u00a0<code>i</code>th), which is\u00a0<code>dp[i][j-coins[i-1]]</code></li> </ol> <p><code>Initialization</code>:\u00a0<code>dp[i][0] = 1</code></p> <p>Once you figure out all these, it's easy to write out the code:</p> <pre><code>    public int change(int amount, int[] coins) {\n        int[][] dp = new int[coins.length+1][amount+1];\n        dp[0][0] = 1;\n\n        for (int i = 1; i &lt;= coins.length; i++) {\n            dp[i][0] = 1;\n            for (int j = 1; j &lt;= amount; j++) {\n                dp[i][j] = dp[i-1][j] + (j &gt;= coins[i-1] ? dp[i][j-coins[i-1]] : 0);\n            }\n        }\n        return dp[coins.length][amount];\n    }\n</code></pre> <p>Now we can see that\u00a0<code>dp[i][j]</code>\u00a0only rely on\u00a0<code>dp[i-1][j]</code>\u00a0and\u00a0<code>dp[i][j-coins[i]]</code>, then we can optimize the space by only using one-dimension array.</p> <pre><code>    public int change(int amount, int[] coins) {\n        int[] dp = new int[amount + 1];\n        dp[0] = 1;\n        for (int coin : coins) {\n            for (int i = coin; i &lt;= amount; i++) {\n                dp[i] += dp[i-coin];\n            }\n        }\n        return dp[amount];\n    }\n</code></pre>"},{"location":"DSA/14%202-D%20Dynamic%20Programming/#target-sum","title":"Target Sum","text":"<p>the THINKING process behind Dynamic Programming so that you can solve these questions on your own.</p> <ol> <li> <p>Category</p> <p>Most dynamic programming questions can be boiled down to a few categories. It's important to recognize the category because it allows us to FRAME a new question into something we already know. Frame means use the framework, not copy an approach from another problem into the current problem. You must understand that every DP problem is different.</p> <p>Question:\u00a0Identify this problem as one of the categories below before continuing.</p> <ul> <li>0/1 Knapsack</li> <li>Unbounded Knapsack</li> <li>Shortest Path (eg: Unique Paths I/II)</li> <li>Fibonacci Sequence (eg: House Thief, Jump Game)</li> <li>Longest Common Substring/Subsequeunce</li> </ul> <p>Answer:\u00a00/1 Knapsack</p> <p>Why 0/1 Knapsack?\u00a0Our 'Capacity' is the target we want to reach 'S'. Our 'Items' are the numbers in the input subset and the 'Weights' of the items are the values of the numbers itself. This question follows 0/1 and not unbounded knapsack because we can use each number ONCE.</p> <p>What is the variation?\u00a0The twist on this problem from standard knapsack is that we must add ALL items in the subset to our knapsack. We can reframe the question into adding the positive or negative value of the current number to our knapsack in order to reach the target capacity 'S'.</p> </li> <li> <p>States</p> <p>What variables we need to keep track of in order to reach our optimal result? This Quora post explains state beautifully, so please refer to this link if you are confused:\u00a0www.quora.com/What-does-a-state-represent-in-terms-of-Dynamic-Programming</p> <p>Question:\u00a0Determine State variables.</p> <p>Hint:\u00a0As a general rule, Knapsack problems will require 2 states at minimum.</p> <p>Answer:\u00a0Index and Current Sum</p> <p>Why Index?\u00a0Index represents the index of the input subset we are considering. This tells us what values we have considered, what values we haven't considered, and what value we are currently considering. As a general rule, index is a required state in nearly all dynamic programming problems, except for shortest paths which is row and column instead of a single index but we'll get into that in a seperate post.</p> <p>Why Current Sum?\u00a0The question asks us if we can sum every item (either the positive or negative value of that item) in the subset to reach the target value. Current Sum gives us the sum of all the values we have processed so far. Our answer revolves around Current Sum being equal to Target.</p> </li> <li> <p>Decisions</p> <p>Dynamic Programming is all about making the optimal decision. In order to make the optimal decision, we will have to try all decisions first. The MIT lecture on DP (highly recommended) refers to this as the guessing step. My brain works better calling this a decision instead of a guess. Decisions will have to bring us closer to the base case and lead us towards the question we want to answer. Base case is covered in Step 4 but really work in tandem with the decision step.</p> <p>Question:\u00a0What decisions do we have to make at each recursive call?</p> <p>Hint:\u00a0As a general rule, Knapsack problems will require 2 decisions.</p> <p>Answer:\u00a0This problem requires we take ALL items in our input subset, so at every step we will be adding an item to our knapsack. Remember, we stated in Step 2 that\u00a0\"The question asks us if we can sum every item (either the positive or negative value of that item) in the subset to reach the target value.\"\u00a0The decision is:</p> <ol> <li>Should we add the current numbers positive value</li> <li>Should we add the current numbers negative value</li> </ol> <p>As a note, knapsack problems usually don't require us to take all items, thus a usual knapsack decision is to take the item or leave the item.</p> </li> <li> <p>Base Case</p> <p>Base cases need to relate directly to the conditions required by the answer we are seeking. This is why it is important for our decisions to work towards our base cases, as it means our decisions are working towards our answer.</p> <p>Let's revisit the conditions for our answers.</p> <ol> <li>We use all numbers in our input subset.</li> <li>The sum of all numbers is equal to our target 'S'.</li> </ol> <p>Question:\u00a0Identify the base cases.</p> <p>Hint:\u00a0There are 2 base cases.</p> <p>Answer:\u00a0We need 2 base cases. One for when the current state is valid and one for when the current state is invalid.</p> <ol> <li>Valid: Index is out of bounds AND current sum is equal to target 'S'</li> <li>Invalid: Index is out of bounds</li> </ol> <p>Why Index is out of bounds?\u00a0A condition for our answer is that we use EVERY item in our input subset. When the index is out of bounds, we know we have considered every item in our input subset.</p> <p>Why current sum is equal to target?\u00a0A condition for our answer is that the sum of using either the positive or negative values of items in our input subet equal to the target sum 'S'.</p> <p>If we have considered all the items in our input subset and our current sum is equal to our target, we have successfully met both conditions required by our answer.</p> <p>On the other hand, if we have considered all the items in our input subset and our current sum is NOT equal to our target, we have only met condition required by our answer. No bueno.</p> </li> <li> <p>Code it</p> <p>If you've thought through all the steps and understand the problem, it's trivial to code the actual solution.</p> <pre><code> def findTargetSumWays(self, nums, S):\n     index = len(nums) - 1\n     curr_sum = 0\n     return self.dp(nums, S, index, curr_sum)\n\n def dp(self, nums, target, index, curr_sum):\n    # Base Cases\n     if index &lt; 0 and curr_sum == target:\n         return 1\n     if index &lt; 0:\n         return 0 \n\n    # Decisions\n     positive = self.dp(nums, target, index-1, curr_sum + nums[index])\n     negative = self.dp(nums, target, index-1, curr_sum + -nums[index])\n\n     return positive + negative\n</code></pre> </li> <li> <p>Optimize</p> <p>Once we introduce memoization, we will only solve each subproblem ONCE. We can remove recursion altogether and avoid the overhead and potential of a stack overflow by introducing tabulation. It's important to note that the top down recursive and bottom up tabulation methods perform the EXACT same amount of work. The only different is memory. If they peform the exact same amount of work, the conversion just requires us to specify the order in which problems should be solved. This post is really long now so I won't cover these steps here, possibly in a future post.</p> </li> </ol> <p>Memoization Solution for Reference</p> <pre><code>class Solution:\n    def findTargetSumWays(self, nums, S):\n        index = len(nums) - 1\n        curr_sum = 0\n        self.memo = {}\n        return self.dp(nums, S, index, curr_sum)\n\n    def dp(self, nums, target, index, curr_sum):\n        if (index, curr_sum) in self.memo:\n            return self.memo[(index, curr_sum)]\n\n        if index &lt; 0 and curr_sum == target:\n            return 1\n        if index &lt; 0:\n            return 0 \n\n        positive = self.dp(nums, target, index-1, curr_sum + nums[index])\n        negative = self.dp(nums, target, index-1, curr_sum + -nums[index])\n\n        self.memo[(index, curr_sum)] = positive + negative\n        return self.memo[(index, curr_sum)]\n</code></pre> <p>Leave a comment on what DP problems you would like this type of post for next and upvote this solution if you found it helpful. I'd like to get this to the top because I'm honestly tired of seeing straight optimized tabulated solutions with no THINKING process behind it.</p> <p>DP IS EASY!</p> <pre><code>public class Solution {\n    public int findTargetSumWays(int[] nums, int s) {\n        int sum = 0; \n        for(int i: nums) sum+=i;\n        if(s&gt;sum || s&lt;-sum) return 0;\n        int[] dp = new int[2*sum+1];\n        dp[0+sum] = 1;\n        for(int i = 0; i&lt;nums.length; i++){\n            int[] next = new int[2*sum+1];\n            for(int k = 0; k&lt;2*sum+1; k++){\n                if(dp[k]!=0){\n                    next[k + nums[i]] += dp[k];\n                    next[k - nums[i]] += dp[k];\n                }\n            }\n            dp = next;\n        }\n        return dp[sum+s];\n    }\n}\n</code></pre> <p></p>"},{"location":"DSA/14%202-D%20Dynamic%20Programming/#interleaving-string","title":"Interleaving String","text":"<p>BFS solution (6ms)</p> <p>Imagine a grid, which x-axis and y-axis are s1 and s2, matching s3 is the same as</p> <p>finding a path from (0,0) to (len1, len2). It actually becomes a</p> <p>BFS on grid. Since we don't need exact paths, a HashSet of</p> <p>coordinates is used to eliminate duplicated paths.</p> <pre><code>public class Solution {\n    public boolean isInterleave(String s1, String s2, String s3) {\n        int len1 = s1.length(),\n            len2 = s2.length(),\n            len3 = s3.length();\n        if (len1 + len2 != len3) return false;\n        Deque&lt;Integer&gt; queue = new LinkedList&lt;&gt;();\n        int matched = 0;\n        queue.offer(0);\n        Set&lt;Integer&gt; set = new HashSet&lt;&gt;();\n        while (queue.size() &gt; 0 &amp;&amp; matched &lt; len3) {\n            int size = queue.size();\n            for (int i = 0; i &lt; size; i++) {\n                int p1 = queue.peek() / len3,\n                    p2 = queue.peek() % len3;\n                queue.poll();\n                if (p1 &lt; len1 &amp;&amp; s1.charAt(p1) == s3.charAt(matched)) {\n                    int key = (p1 + 1) * len3 + p2;\n                    if (!set.contains(key)) {\n                        set.add(key);\n                        queue.offer(key);\n                    }\n                }\n                if (p2 &lt; len2 &amp;&amp; s2.charAt(p2) == s3.charAt(matched)) {\n                    int key = p1 * len3 + (p2 + 1);\n                    if (!set.contains(key)) {\n                        set.add(key);\n                        queue.offer(key);\n                    }\n                }\n            }\n            matched++;\n        }\n        return queue.size() &gt; 0 &amp;&amp; matched == len3;\n    }\n}\n</code></pre> <p>DFS solution with memorization (2ms)</p> <p>This looks slow but is actually faster than BFS! Think about it carefully, in this</p> <p>particular problem, search always ends at the same depth. DFS with memorization</p> <p>searches about the same amount of paths with the same length as BFS, if it is doesn't</p> <p>terminate on the first path found. Without the queue operations, the overall cost</p> <p>is only smaller if we don't count call stack. The most significant runtime reducer is</p> <p>probably the early termination</p> <pre><code>public class Solution {\n    public boolean isInterleave(String s1, String s2, String s3) {\n        if (s1.length() + s2.length() != s3.length()) return false;\n        HashSet&lt;Integer&gt; cache = new HashSet&lt;Integer&gt;();\n        return isInterleave0(s1, s2, s3, 0, 0, cache);\n    }\n\n    private boolean isInterleave0(String s1, String s2, String s3, int p1, int p2, HashSet&lt;Integer&gt; cache) {\n        if (p1 + p2 == s3.length())\n            return true;\n        if (cache.contains(p1 * s3.length() + p2))\n            return false;\n        // no need to store actual result.\n        // if we found the path, we have already terminated.\n        cache.add(p1 * s3.length() + p2);\n        boolean match1 = p1 &lt; s1.length() &amp;&amp; s3.charAt(p1 + p2) == s1.charAt(p1);\n        boolean match2 = p2 &lt; s2.length() &amp;&amp; s3.charAt(p1 + p2) == s2.charAt(p2);\n        if (match1 &amp;&amp; match2)\n            return isInterleave0(s1, s2, s3, p1 + 1, p2, cache) ||\n                   isInterleave0(s1, s2, s3, p1, p2 + 1, cache);\n        else if (match1)\n            return isInterleave0(s1, s2, s3, p1 + 1, p2, cache);\n        else if (match2)\n            return isInterleave0(s1, s2, s3, p1, p2 + 1, cache);\n        else\n            return false;\n    }\n}\n</code></pre> <p>2d DP solution (6ms)</p> <p>It's an interesting practice. There are further optimization could be done to</p> <p>reduce cache matrix to 1d. However doing DP for this problem is tedious and not</p> <p>seem to worth the trouble.</p> <pre><code>public class Solution {\n    public boolean isInterleave(String s1, String s2, String s3) {\n        int len1 = s1.length(),\n            len2 = s2.length(),\n            len3 = s3.length();\n        if (len1 + len2 != len3) return false;\n        // cache[i][j] == true means first i + j chars are matched by\n        // first j chars from s1 and first i chars from s2\n        boolean[][] cache = new boolean[len2 + 1][len1 + 1];\n        cache[0][0] = true; // empty and empty matches empty\n        int m3 = 1; // matched length, m1 and m2 are similar\n        while (m3 &lt;= len3) {\n            // this loop fill in cache matrix from left-top to right-bottom, diagonally.\n            // note that loop conditions are pretty tricky here.\n            for (int m1 = Math.max(m3 - len2, 0); m1 &lt;= len1 &amp;&amp; m1 &lt;= m3; m1++) {\n                int m2 = m3 - m1;\n                cache[m2][m1] =\n                    m1 &gt; 0 &amp;&amp; cache[m2][m1 - 1] &amp;&amp; s3.charAt(m3 - 1) == s1.charAt(m1 - 1) ||\n                    m2 &gt; 0 &amp;&amp; cache[m2 - 1][m1] &amp;&amp; s3.charAt(m3 - 1) == s2.charAt(m2 - 1);\n            }\n            m3++;\n        }\n        return cache[len2][len1];\n    }\n}\n</code></pre>"},{"location":"DSA/14%202-D%20Dynamic%20Programming/#longest-increasing-path-in-a-matrix","title":"Longest Increasing Path In a Matrix","text":"<p>To get max length of increasing sequences:</p> <ol> <li>Do\u00a0<code>DFS</code>\u00a0from every cell</li> <li>Compare every 4 direction and skip cells that are out of boundary or smaller</li> <li>Get matrix\u00a0<code>max</code>\u00a0from every cell's\u00a0<code>max</code></li> <li>Use\u00a0<code>matrix[x][y] &lt;= matrix[i][j]</code>\u00a0so we don't need a\u00a0<code>visited[m][n]</code>\u00a0array</li> <li>The key is to\u00a0<code>cache</code>\u00a0the distance because it's highly possible to revisit a cell</li> </ol> <p>Hope it helps!</p> <pre><code>public static final int[][] dirs = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n\npublic int longestIncreasingPath(int[][] matrix) {\n    if(matrix.length == 0) return 0;\n    int m = matrix.length, n = matrix[0].length;\n    int[][] cache = new int[m][n];\n    int max = 1;\n    for(int i = 0; i &lt; m; i++) {\n        for(int j = 0; j &lt; n; j++) {\n            int len = dfs(matrix, i, j, m, n, cache);\n            max = Math.max(max, len);\n        }\n    }   \n    return max;\n}\n\npublic int dfs(int[][] matrix, int i, int j, int m, int n, int[][] cache) {\n    if(cache[i][j] != 0) return cache[i][j];\n    int max = 1;\n    for(int[] dir: dirs) {\n        int x = i + dir[0], y = j + dir[1];\n        if(x &lt; 0 || x &gt;= m || y &lt; 0 || y &gt;= n || matrix[x][y] &lt;= matrix[i][j]) continue;\n        int len = 1 + dfs(matrix, x, y, m, n, cache);\n        max = Math.max(max, len);\n    }\n    cache[i][j] = max;\n    return max;\n}\n</code></pre>"},{"location":"DSA/14%202-D%20Dynamic%20Programming/#distinct-subsequences","title":"Distinct Subsequences","text":"<p>The idea is the following:</p> <ul> <li>we will build an array\u00a0<code>mem</code>\u00a0where\u00a0<code>mem[i+1][j+1]</code>\u00a0means that\u00a0<code>S[0..j]</code>\u00a0contains\u00a0<code>T[0..i]</code>\u00a0that many times as distinct subsequences. Therefor the result will be\u00a0<code>mem[T.length()][S.length()]</code>.</li> <li>we can build this array rows-by-rows:</li> <li>the first row must be filled with 1. That's because the empty string is a subsequence of any string but only 1 time. So\u00a0<code>mem[0][j] = 1</code>\u00a0for every\u00a0<code>j</code>. So with this we not only make our lives easier, but we also return correct value if\u00a0<code>T</code>\u00a0is an empty string.</li> <li>the first column of every rows except the first must be 0. This is because an empty string cannot contain a non-empty string as a substring -- the very first item of the array:\u00a0<code>mem[0][0] = 1</code>, because an empty string contains the empty string 1 time.</li> </ul> <p>So the matrix looks like this:</p> <p><code>S 0123....j T +----------+   |1111111111| 0 |0         | 1 |0         | 2 |0         | . |0         | . |0         | i |0         |</code></p> <p>From here we can easily fill the whole grid: for each\u00a0<code>(x, y)</code>, we check if\u00a0<code>S[x] == T[y]</code>\u00a0we add the previous item and the previous item in the previous row, otherwise we copy the previous item in the same row. The reason is simple:</p> <ul> <li>if the current character in S doesn't equal to current character T, then we have the same number of distinct subsequences as we had without the new character.</li> <li>if the current character in S equal to the current character T, then the distinct number of subsequences: the number we had before\u00a0plus\u00a0the distinct number of subsequences we had with less longer T and less longer S.</li> </ul> <p>An example:</p> <p><code>S: [acdabefbc]</code>\u00a0and\u00a0<code>T: [ab]</code></p> <p>first we check with\u00a0<code>a</code>:</p> <pre><code>       `*  *\n  S = [acdabefbc]\n</code></pre> <p>mem[1] = [0111222222]`</p> <p>then we check with\u00a0<code>ab</code>:</p> <pre><code>           `*  * ]\n  S = [acdabefbc]\n</code></pre> <p>mem[1] = [0111222222] mem[2] = [0000022244]`</p> <p>And the result is 4, as the distinct subsequences are:</p> <pre><code>  `S = [a   b    ]\n  S = [a      b ]\n  S = [   ab    ]\n  S = [   a   b ]`\n</code></pre> <p>See the code in Java:</p> <pre><code>public int numDistinct(String S, String T) {\n    // array creation\n    int[][] mem = new int[T.length()+1][S.length()+1];\n\n    // filling the first row: with 1s\n    for(int j=0; j&lt;=S.length(); j++) {\n        mem[0][j] = 1;\n    }\n\n    // the first column is 0 by default in every other rows but the first, which we need.\n\n    for(int i=0; i&lt;T.length(); i++) {\n        for(int j=0; j&lt;S.length(); j++) {\n            if(T.charAt(i) == S.charAt(j)) {\n                mem[i+1][j+1] = mem[i][j] + mem[i+1][j];\n            } else {\n                mem[i+1][j+1] = mem[i+1][j];\n            }\n        }\n    }\n\n    return mem[T.length()][S.length()];\n}\n</code></pre>"},{"location":"DSA/14%202-D%20Dynamic%20Programming/#edit-distance","title":"Edit Distance","text":"<p>First we may want to consider recursion.</p> <pre><code>public class Solution {\n    /**\n     * Recursive solution.\n     * For each poisition, check three subproblem:\n     * 1. insert\n     * 2. delete\n     * 3. replace\n     * We only modify the first string since no matter which one we choose, the result is the same. \n     * Got TLE since we recursively solve the same subproblem several times.\n     * Appromixately O(len1 ^ 3) time in the worst case.\n     * Need to optimize it using cache, which is the idea of dynamic programming. \n     * The key point is to find out the subproblem we have solved duplicately and cache the recursion.\n     * Noticed that each subproblem is specificed by i and j pointer, so we can cache the result of these subproblems. \n     */\n    public int minDistance(String word1, String word2) {\n        if (word1 == null || word1.length() == 0) return word2.length();\n        if (word2 == null || word2.length() == 0) return word1.length();\n\n        return match(word1, word2, 0, 0);\n    }\n\n    private int match(String s1, String s2, int i, int j) {\n        //If one of the string's pointer have reached the end of it\n        if (s1.length() == i) {\n            return s2.length() - j;\n        }\n        if (s2.length() == j) {\n            return s1.length() - i;\n        }\n\n        int res;\n        //If current poisition is the same.\n        if (s1.charAt(i) == s2.charAt(j)) {\n            res = match(s1, s2, i + 1, j + 1);\n        } else {\n            //Case1: insert\n            int insert = match(s1, s2, i, j + 1);\n            //Case2: delete\n            int delete = match(s1, s2, i + 1, j);\n            //Case3: replace\n            int replace = match(s1, s2, i + 1, j + 1);\n            res = Math.min(Math.min(insert, delete), replace) + 1;\n        }\n\n        return res;\n    }\n}\n</code></pre> <p>This got TLE. based on the analysis above, we may try DP.</p> <pre><code>public class Solution {\n    /**\n     * Optimization using dynamic programming\n     * Top-down solution\n     * O(len1 * len2) time, O(len1 * len2) space\n     */\n    public int minDistance(String word1, String word2) {\n        if (word1 == null || word2 == null) return -1;\n        if (word1.length() == 0) return word2.length();\n        if (word2.length() == 0) return word1.length();\n\n        char[] c1 = word1.toCharArray();\n        char[] c2 = word2.toCharArray();\n\n        int[][] cache = new int[c1.length][c2.length];\n        for (int i = 0; i &lt; c1.length; i++) {\n            for (int j = 0; j &lt; c2.length; j++) {\n                cache[i][j] = -1;\n            }\n        }\n\n        return match(c1, c2, 0, 0, cache);\n    }\n\n    private int match(char[] c1, char[] c2, int i, int j, int[][] cache) {\n        if (c1.length == i) return c2.length - j;\n        if (c2.length == j) return c1.length - i;\n\n        if (cache[i][j] != -1) {\n            return cache[i][j];\n        }\n\n        if (c1[i] == c2[j]) {\n            cache[i][j] = match(c1, c2, i + 1, j + 1, cache);\n        } else {\n            //Case1: insert\n            int insert = match(c1, c2, i, j + 1, cache);\n            //Case2: delete\n            int delete = match(c1, c2, i + 1, j, cache);\n            //Case3: replace\n            int replace = match(c1, c2, i + 1, j + 1, cache);\n\n            cache[i][j] = Math.min(Math.min(insert, delete), replace) + 1;\n        }\n\n        return cache[i][j];\n    }\n\n\n\n\n    /**\n     * Bottom-up approach\n     */\n    public int minDistance(String word1, String word2) {\n        if (word1 == null || word2 == null) return -1;\n        if (word1.length() == 0) return word2.length();\n        if (word2.length() == 0) return word1.length();\n\n        char[] c1 = word1.toCharArray();\n        char[] c2 = word2.toCharArray();\n\n        int[][] matched = new int[c1.length + 1][c2.length + 1];\n        //matched[length of c1 already been matched][length of c2 already been matched]\n\n        for (int i = 0; i &lt;= c1.length; i++) {\n            matched[i][0] = i;\n        }\n        for (int j = 0; j &lt;= c2.length; j++) {\n            matched[0][j] = j;\n        }\n\n        for (int i = 0; i &lt; c1.length; i++) {\n            for (int j = 0; j &lt; c2.length; j++) {\n                if (c1[i] == c2[j]) {\n                    matched[i + 1][j + 1] = matched[i][j];\n                } else {\n                    matched[i + 1][j + 1] = Math.min(Math.min(matched[i][j + 1], matched[i + 1][j]), matched[i][j]) + 1;\n                    //Since it is bottom up, we are considering in the ascending order of indexes.\n                    //Insert means plus 1 to j, delete means plus 1 to i, replace means plus 1 to both i and j. \n                    //above sequence is delete, insert and replace. \n                }\n            }\n        }\n\n        return matched[c1.length][c2.length];\n    }\n\n}\n</code></pre>"},{"location":"DSA/14%202-D%20Dynamic%20Programming/#burst-balloons","title":"Burst Balloons","text":"<p>Be Naive First</p> <p>When I first get this problem, it is far from dynamic programming to me. I started with the most naive idea the backtracking.</p> <p>We have n balloons to burst, which mean we have n steps in the game. In the i th step we have n-i balloons to burst, i = 0~n-1. Therefore we are looking at an algorithm of O(n!). Well, it is slow, probably works for n &lt; 12 only.</p> <p>Of course this is not the point to implement it. We need to identify the redundant works we did in it and try to optimize.</p> <p>Well, we can find that for any balloons left the maxCoins does not depends on the balloons already bursted. This indicate that we can use memorization (top down) or dynamic programming (bottom up) for all the cases from small numbers of balloon until n balloons. How many cases are there? For k balloons there are C(n, k) cases and for each case it need to scan the k balloons to compare. The sum is quite big still. It is better than O(n!) but worse than O(2^n).</p> <p>Better idea</p> <p>We then think can we apply the divide and conquer technique? After all there seems to be many self similar sub problems from the previous analysis.</p> <p>Well, the nature way to divide the problem is burst one balloon and separate the balloons into 2 sub sections one on the left and one one the right. However, in this problem the left and right become adjacent and have effects on the maxCoins in the future.</p> <p>Then another interesting idea come up. Which is quite often seen in dp problem analysis. That is reverse thinking. Like I said the coins you get for a balloon does not depend on the balloons already burst. Therefore</p> <p>instead of divide the problem by the first balloon to burst, we divide the problem by the last balloon to burst.</p> <p>Why is that? Because only the first and last balloons we are sure of their adjacent balloons before hand!</p> <p>For the first we have\u00a0<code>nums[i-1]*nums[i]*nums[i+1]</code>\u00a0for the last we have\u00a0<code>nums[-1]*nums[i]*nums[n]</code>.</p> <p>OK. Think about n balloons if i is the last one to burst, what now?</p> <p>We can see that the balloons is again separated into 2 sections. But this time since the balloon i is the last balloon of all to burst, the left and right section now has well defined boundary and do not affect each other! Therefore we can do either recursive method with memoization or dp.</p> <p>Final</p> <p>Here comes the final solutions. Note that we put 2 balloons with 1 as boundaries and also burst all the zero balloons in the first round since they won't give any coins.</p> <p>The algorithm runs in O(n^3) which can be easily seen from the 3 loops in dp solution.</p> <p>Java D&amp;C with Memoization</p> <pre><code>public int maxCoins(int[] iNums) {\n    int[] nums = new int[iNums.length + 2];\n    int n = 1;\n    for (int x : iNums) if (x &gt; 0) nums[n++] = x;\n    nums[0] = nums[n++] = 1;\n\n    int[][] memo = new int[n][n];\n    return burst(memo, nums, 0, n - 1);\n}\n\npublic int burst(int[][] memo, int[] nums, int left, int right) {\n    if (left + 1 == right) return 0;\n    if (memo[left][right] &gt; 0) return memo[left][right];\n    int ans = 0;\n    for (int i = left + 1; i &lt; right; ++i)\n        ans = Math.max(ans, nums[left] * nums[i] * nums[right] \n        + burst(memo, nums, left, i) + burst(memo, nums, i, right));\n    memo[left][right] = ans;\n    return ans;\n}\n// 12 ms\n</code></pre> <p>Java DP</p> <pre><code>public int maxCoins(int[] iNums) {\n    int[] nums = new int[iNums.length + 2];\n    int n = 1;\n    for (int x : iNums) if (x &gt; 0) nums[n++] = x;\n    nums[0] = nums[n++] = 1;\n\n    int[][] dp = new int[n][n];\n    for (int k = 2; k &lt; n; ++k)\n        for (int left = 0; left &lt; n - k; ++left) {\n            int right = left + k;\n            for (int i = left + 1; i &lt; right; ++i)\n                dp[left][right] = Math.max(dp[left][right], \n                nums[left] * nums[i] * nums[right] + dp[left][i] + dp[i][right]);\n        }\n\n    return dp[0][n - 1];\n}\n// 17 ms\n</code></pre>"},{"location":"DSA/14%202-D%20Dynamic%20Programming/#regular-expression-matching","title":"Regular Expression Matching","text":"<p>This Solution use 2D DP. beat 90% solutions, very simple.</p> <p>Here are some conditions to figure out, then the logic can be very straightforward.</p> <pre><code>1, If p.charAt(j) == s.charAt(i) :  dp[i][j] = dp[i-1][j-1];\n2, If p.charAt(j) == '.' : dp[i][j] = dp[i-1][j-1];\n3, If p.charAt(j) == '*': \n   here are two sub conditions:\n               1   if p.charAt(j-1) != s.charAt(i) : dp[i][j] = dp[i][j-2]  //in this case, a* only counts as empty\n               2   if p.charAt(i-1) == s.charAt(i) or p.charAt(i-1) == '.':\n                              dp[i][j] = dp[i-1][j]    //in this case, a* counts as multiple a \n                           or dp[i][j] = dp[i][j-1]   // in this case, a* counts as single a\n                           or dp[i][j] = dp[i][j-2]   // in this case, a* counts as empty\n</code></pre> <p>Here is the solution</p> <pre><code>public boolean isMatch(String s, String p) {\n\n    if (s == null || p == null) {\n        return false;\n    }\n    boolean[][] dp = new boolean[s.length()+1][p.length()+1];\n    dp[0][0] = true;\n    for (int i = 0; i &lt; p.length(); i++) {\n        if (p.charAt(i) == '*' &amp;&amp; dp[0][i-1]) {\n            dp[0][i+1] = true;\n        }\n    }\n    for (int i = 0 ; i &lt; s.length(); i++) {\n        for (int j = 0; j &lt; p.length(); j++) {\n            if (p.charAt(j) == '.') {\n                dp[i+1][j+1] = dp[i][j];\n            }\n            if (p.charAt(j) == s.charAt(i)) {\n                dp[i+1][j+1] = dp[i][j];\n            }\n            if (p.charAt(j) == '*') {\n                if (p.charAt(j-1) != s.charAt(i) &amp;&amp; p.charAt(j-1) != '.') {\n                    dp[i+1][j+1] = dp[i+1][j-1];\n                } else {\n                    dp[i+1][j+1] = (dp[i+1][j] || dp[i][j+1] || dp[i+1][j-1]);\n                }\n            }\n        }\n    }\n    return dp[s.length()][p.length()];\n}\n</code></pre>"},{"location":"DSA/15%20Greedy/","title":"15. Greedy","text":""},{"location":"DSA/15%20Greedy/#maximum-subarray","title":"Maximum Subarray","text":"<p>Analysis of this problem:</p> <p>Apparently, this is a optimization problem, which can be usually solved by DP. So when it comes to DP, the first thing for us to figure out is the format of the sub problem(or the state of each sub problem). The format of the sub problem can be helpful when we are trying to come up with the recursive relation.</p> <p>At first, I think the sub problem should look like:\u00a0<code>maxSubArray(int A[], int i, int j)</code>, which means the maxSubArray for A[i: j]. In this way, our goal is to figure out what\u00a0<code>maxSubArray(A, 0, A.length - 1)</code>\u00a0is. However, if we define the format of the sub problem in this way, it's hard to find the connection from the sub problem to the original problem(at least for me). In other words, I can't find a way to divided the original problem into the sub problems and use the solutions of the sub problems to somehow create the solution of the original one.</p> <p>So I change the format of the sub problem into something like:\u00a0<code>maxSubArray(int A[], int i)</code>, which means the maxSubArray for A[0:i ] which must has A[i] as the end element. Note that now the sub problem's format is less flexible and less powerful than the previous one because there's a limitation that A[i] should be contained in that sequence and we have to keep track of each solution of the sub problem to update the global optimal value. However, now the connect between the sub problem &amp; the original one becomes clearer:</p> <p><code>maxSubArray(A, i) = maxSubArray(A, i - 1) &gt; 0 ? maxSubArray(A, i - 1) : 0 + A[i];</code></p> <p>And here's the code</p> <pre><code>public int maxSubArray(int[] A) {\n        int n = A.length;\n        int[] dp = new int[n];//dp[i] means the maximum subarray ending with A[i];\n        dp[0] = A[0];\n        int max = dp[0];\n\n        for(int i = 1; i &lt; n; i++){\n            dp[i] = A[i] + (dp[i - 1] &gt; 0 ? dp[i - 1] : 0);\n            max = Math.max(max, dp[i]);\n        }\n\n        return max;\n}\n</code></pre>"},{"location":"DSA/15%20Greedy/#jump-game","title":"Jump Game","text":"<p>The basic idea is this: at each step, we keep track of the furthest reachable index. The nature of the problem (eg. maximal jumps where you can hit a range of targets instead of singular jumps where you can only hit one target) is that for an index to be reachable, each of the previous indices have to be reachable.</p> <p>Hence, it suffices that we iterate over each index, and If we ever encounter an index that is not reachable, we abort and return false. By the end, we will have iterated to the last index. If the loop finishes, then the last index is reachable.</p> <pre><code>public boolean canJump(int[] nums) {\n    int reachable = 0;\n    for (int i=0; i&lt;nums.length; ++i) {\n        if (i &gt; reachable) return false;\n        reachable = Math.max(reachable, i + nums[i]);\n    }\n    return true;\n}\n</code></pre>"},{"location":"DSA/15%20Greedy/#jump-game-ii","title":"Jump Game II","text":"<p>The main idea is based on greedy. Let's say the range of the current jump is [curBegin, curEnd], curFarthest is the farthest point that all points in [curBegin, curEnd] can reach. Once the current point reaches curEnd, then trigger another jump, and set the new curEnd with curFarthest, then keep the above steps, as the following:</p> <pre><code>public int jump(int[] A) {\n    int jumps = 0, curEnd = 0, curFarthest = 0;\n    for (int i = 0; i &lt; A.length - 1; i++) {\n        curFarthest = Math.max(curFarthest, i + A[i]);\n        if (i == curEnd) {\n            jumps++;\n            curEnd = curFarthest;\n        }\n    }\n    return jumps;\n}\n</code></pre>"},{"location":"DSA/15%20Greedy/#gas-station","title":"Gas Station","text":"<p>The algorithm is pretty easy to understand. Imagine we take a tour around this circle, the only condition that we can complete this trip is to have more fuel provided than costed in total. That's what the first loop does.</p> <p>If we do have more fuel provided than costed, that means we can always find a start point around this circle that we could complete the journey with an empty tank. Hence, we check from the beginning of the array, if we can gain more fuel at the current station, we will maintain the start point, else, which means we will burn out of oil before reaching to the next station, we will start over at the next station.</p> <pre><code>public int canCompleteCircuit(int[] gas, int[] cost) {\n    int tank = 0;\n    for(int i = 0; i &lt; gas.length; i++)\n        tank += gas[i] - cost[i];\n    if(tank &lt; 0)\n        return - 1;\n\n    int start = 0;\n    int accumulate = 0;\n    for(int i = 0; i &lt; gas.length; i++){\n        int curGain = gas[i] - cost[i];\n        if(accumulate + curGain &lt; 0){\n            start = i + 1;\n            accumulate = 0;\n        }\n        else accumulate += curGain;\n    }\n\n    return start;\n}\n</code></pre>"},{"location":"DSA/15%20Greedy/#hand-of-straights","title":"Hand of Straights","text":"<p>TreeMap:</p> <pre><code>class Solution {\n    public boolean isNStraightHand(int[] hand, int W) {\n        if (hand.length % W != 0) return false;\n\n        TreeMap&lt;Integer, Integer&gt; map = new TreeMap&lt;&gt;();    \n        for (int h : hand) map.put(h, map.getOrDefault(h, 0) + 1);\n\n\n        while (map.size() &gt; 0) {\n            int val = map.firstKey();\n            for (int i = val; i &lt; val + W; i++) {\n                if (!map.containsKey(i)) return false;\n\n                map.put(i, map.get(i) - 1);\n                if (map.get(i) == 0) map.remove(i);\n            }\n        }\n\n        return true;\n    }\n}\n</code></pre> <p>PriorityQueue (min heap):</p> <pre><code>class Solution {\n    public boolean isNStraightHand(int[] hand, int W) {\n        if (hand.length % W != 0) return false;\n\n        PriorityQueue&lt;Integer&gt; heap = new PriorityQueue&lt;&gt;();\n        for (int h : hand) heap.offer(h);\n\n        while (!heap.isEmpty()) {\n            int val = heap.peek();\n            for (int i = val; i &lt; val + W; i++) {\n                if (!heap.remove(i)) return false;\n            }  \n        }\n        return true;\n    }\n}\n</code></pre>"},{"location":"DSA/15%20Greedy/#merge-triplets-to-form-target-triplet","title":"Merge Triplets to Form Target Triplet","text":"<p>Consider only triplets that do not exceed the target in any dimension.</p> <p>Greedily apply the operation using all those triplets. That way,\u00a0<code>res</code>\u00a0will get as close to a target as possible.</p> <pre><code>public boolean mergeTriplets(int[][] triplets, int[] t) {\n    int[] res = new int[3];\n    for (var s : triplets)\n        if (s[0] &lt;= t[0] &amp;&amp; s[1] &lt;= t[1] &amp;&amp; s[2] &lt;= t[2])\n            res = new int[]{ Math.max(res[0], s[0]), Math.max(res[1], s[1]), Math.max(res[2], s[2]) };\n    return Arrays.equals(res, t);\n}\n</code></pre>"},{"location":"DSA/15%20Greedy/#partition-labels","title":"Partition Labels","text":"<p><code>TIME COMPLEXITY &amp; SPACE COMPLEXITY IS O(N)</code></p> <p><code>TIME COMPLEXITY IS O(N) BECAUSE YOU ARE VISITING ANY CHARACTER ONLY ONCE UPDATION OF OUTER LOOP POINTER CLEARLY SHOWS THE PROOF WHERE YOU ARE VISITING CHARACTERS ONLY ONCE.</code></p> <p><code>YOU CAN REDUCE SPACE COMPLEXITY BY USING ARRAY OF SIZE 26.</code></p> <ul> <li>`FIRST STEP IN SOLVING THESE TYPE OF QUESTIONS IS TO NOTE WHERE OUR CHARACTER HAS IT'S LAST APPEARANCE.</li> <li>USE HASMAP TO STORE IT.</li> <li>WE HAVE TO TRAVERSE THE WHOLE STRING SO WE MAINTAIN A LOOP FOR IT.</li> <li>AND WE FIND THE LASTMOST APPEARANCE OF THAT CHARACTER AND RUN OVER THEM.</li> <li>IF WE FIND ANY INDEX OF ANY CHARACTER GREATER THAN THE CURRENT ONE, WE UPDATE THE NEW MAXEND.</li> <li>ADD THE LENGTH TO LIST (MAXEND - OUTERLOOP + 1);</li> <li>UPDATE OUR OUTER LOOP TO FIND OTHER LENGTH.`</li> </ul> <pre><code>class Solution {\n    public List&lt;Integer&gt; partitionLabels(String s) {\n        int n = s.length();\n        List&lt;Integer&gt; l = new ArrayList&lt;&gt;();\n        HashMap&lt;Character, Integer&gt; map = new HashMap&lt;&gt;();\n\n        //Store the last indexes of the characters.\n        for (int i = 0; i &lt; n; i++) map.put(s.charAt(i), i);\n\n        int outerLoop = 0;\n        while (outerLoop &lt; n) {\n            int maxEnd = map.get(s.charAt(outerLoop)), innerLoop = outerLoop + 1;\n            while (innerLoop &lt; maxEnd) {\n                int curr = map.get(s.charAt(innerLoop));\n                if (curr &gt; maxEnd) {\n                    maxEnd = curr;\n                }\n                innerLoop++;\n            }\n            l.add(maxEnd - outerLoop + 1);\n            outerLoop = maxEnd + 1;\n        }\n\n        return l;\n    }\n}\n</code></pre>"},{"location":"DSA/15%20Greedy/#valid-parenthesis-string","title":"Valid Parenthesis String","text":"<p>Problem 1: Check Valid Parenthesis of a string containing only two types of characters: '(', ')'</p> <pre><code>class Solution {\n    public boolean checkValidString(String s) {\n        int openCount = 0;\n        for (char c : s.toCharArray()) {\n            if (c == '(') {\n                openCount++;\n            } else if (c == ')') {\n                openCount--;\n            }\n            if (openCount &lt; 0) return false;    // Currently, don't have enough open parentheses to match close parentheses-&gt; Invalid\n                                                // For example: ())(\n        }\n        return openCount == 0; // Fully match open parentheses with close parentheses\n    }\n}\n</code></pre> <p>Problem 2: Check Valid Parenthesis of a string containing only three types of characters: '(', ')', '*'</p> <p>Example:</p> <p></p> <pre><code>class Solution {\n    public boolean checkValidString(String s) {\n        int cmin = 0, cmax = 0; // open parentheses count in range [cmin, cmax]\n        for (char c : s.toCharArray()) {\n            if (c == '(') {\n                cmax++;\n                cmin++;\n            } else if (c == ')') {\n                cmax--;\n                cmin--;\n            } else if (c == '*') {\n                cmax++; // if `*` become `(` then openCount++\n                cmin--; // if `*` become `)` then openCount--\n                // if `*` become `` then nothing happens\n                // So openCount will be in new range [cmin-1, cmax+1]\n            }\n            if (cmax &lt; 0) return false; // Currently, don't have enough open parentheses to match close parentheses-&gt; Invalid\n                                        // For example: ())(\n            cmin = Math.max(cmin, 0);   // It's invalid if open parentheses count &lt; 0 that's why cmin can't be negative\n        }\n        return cmin == 0; // Return true if can found `openCount == 0` in range [cmin, cmax]\n    }\n}\n</code></pre> <p>Complexity</p> <ul> <li>Time:\u00a0<code>O(n)</code></li> <li>Space:\u00a0<code>O(1)</code></li> </ul>"},{"location":"DSA/16%20Intervals/","title":"16. Intervals","text":""},{"location":"DSA/16%20Intervals/#insert-interval","title":"Insert Interval","text":"<pre><code>class Solution {\n    public int[][] insert(int[][] intervals, int[] newInterval) {\n\n        List&lt;int[]&gt; result = new ArrayList&lt;&gt;();\n\n        // Iterate through all slots\n        for(int[] slot : intervals)\n        {\n\n            // if newInterval before slot insert newInterval &amp; update slot as new interval\n            if(newInterval[1] &lt; slot[0])\n            {\n                result.add(newInterval);\n                newInterval = slot;\n            } \n\n            // if slot is lesser than new Interval insert slot\n            else if(slot[1] &lt; newInterval[0])\n            {\n                result.add(slot);\n            } \n\n            // if above conditions fail its an overlap since possibility of new interval existing in left &amp; right of slot is checked\n            // update lowest of start &amp; highest of end &amp; not insert\n            else {\n                newInterval[0] = Math.min(newInterval[0],slot[0]);\n                newInterval[1] = Math.max(newInterval[1],slot[1]);\n            }\n        }\n\n        // insert the last newInterval\n        result.add(newInterval);\n\n        // convert to int[][] array\n        return result.toArray(new int[result.size()][]);\n    }\n}\n</code></pre>"},{"location":"DSA/16%20Intervals/#merge-intervals","title":"Merge Intervals","text":"<pre><code>class Solution {\n    public int[][] merge(int[][] intervals) {\n        if (intervals.length &lt;= 1) {\n            return intervals;\n        }\n\n        Arrays.sort(intervals, (a, b) -&gt; (a[0] - b[0]));\n\n        List&lt;int[]&gt; result = new ArrayList&lt;&gt;();\n        for (int[] interval : intervals) {\n            // if list is empty or does not overlap with the previous, just append\n            if (result.isEmpty() || result.get(result.size() - 1)[1] &lt; interval[0]) {\n                result.add(interval);\n            } else {\n                // if overlap, merge the current and previous intervals\n                result.get(result.size() - 1)[1] = Math.max(result.get(result.size() - 1)[1], interval[1]);\n            }\n        }\n\n        return result.toArray(new int[result.size()][]);\n    }\n}\n</code></pre>"},{"location":"DSA/16%20Intervals/#non-overlapping-intervals","title":"Non Overlapping Intervals","text":"<p>Actually, the problem is the same as \"Given a collection of intervals, find the maximum number of intervals that are non-overlapping.\" (the classic Greedy problem:\u00a0Interval Scheduling). With the solution to that problem, guess how do we get the minimum number of intervals to remove? : )</p> <p>Sorting Interval.end in ascending order is O(nlogn), then traverse intervals array to get the maximum number of non-overlapping intervals is O(n). Total is O(nlogn).</p> <pre><code>    public int eraseOverlapIntervals(Interval[] intervals) {\n        if (intervals.length == 0)  return 0;\n\n        Arrays.sort(intervals, new myComparator());\n        int end = intervals[0].end;\n        int count = 1;        \n\n        for (int i = 1; i &lt; intervals.length; i++) {\n            if (intervals[i].start &gt;= end) {\n                end = intervals[i].end;\n                count++;\n            }\n        }\n        return intervals.length - count;\n    }\n\n    class myComparator implements Comparator&lt;Interval&gt; {\n        public int compare(Interval a, Interval b) {\n            return a.end - b.end;\n        }\n    }\n</code></pre>"},{"location":"DSA/16%20Intervals/#meeting-rooms","title":"Meeting Rooms","text":""},{"location":"DSA/16%20Intervals/#meeting-schedule","title":"Meeting Schedule","text":""},{"location":"DSA/16%20Intervals/#meeting-rooms-ii","title":"Meeting Rooms II","text":""},{"location":"DSA/16%20Intervals/#meeting-schedule-ii","title":"Meeting Schedule II","text":""},{"location":"DSA/16%20Intervals/#minimum-interval-to-include-each-query","title":"Minimum Interval to Include Each Query","text":"<p>Sort\u00a0<code>queries</code>\u00a0and intervals.</p> <p>Iterate\u00a0<code>queries</code>\u00a0from small to big,</p> <p>and find out all open intervals\u00a0<code>[l, r]</code>,</p> <p>and we add them to a priority queue.</p> <p>Also, we need to remove all closed interval from the queue.</p> <p>In the priority, we use</p> <p><code>[interval size, interval end] = [r-l+1, r]</code>\u00a0as the key.</p> <p>The head of the queue is the smallest interval we want to return for each query.</p> <p>Complexity</p> <p>Time\u00a0<code>O(nlogn + qlogq)</code></p> <p>Space\u00a0<code>O(n+q)</code></p> <p>where\u00a0<code>q = queries.size()</code></p> <p>Using TreeMap</p> <pre><code>    public int[] minInterval(int[][] A, int[] queries) {\n        TreeMap&lt;Integer, Integer&gt; pq = new TreeMap&lt;&gt;();\n        HashMap&lt;Integer, Integer&gt; res = new HashMap&lt;&gt;();\n        int i = 0, n = A.length, m = queries.length;\n        int[] Q = queries.clone(), res2 = new int[m];\n        Arrays.sort(A, (a, b) -&gt; Integer.compare(a[0] , b[0]));\n        Arrays.sort(Q);\n        for (int q : Q) {\n            while (i &lt; n &amp;&amp; A[i][0] &lt;= q) {\n                int l = A[i][0], r = A[i++][1];\n                pq.put(r - l + 1, r);\n            }\n            while (!pq.isEmpty() &amp;&amp; pq.firstEntry().getValue() &lt; q)\n                pq.pollFirstEntry();\n            res.put(q, pq.isEmpty() ? -1 : pq.firstKey());\n        }\n        i = 0;\n        for (int q : queries)\n            res2[i++] = res.get(q);\n        return res2;\n    }\n</code></pre>"},{"location":"DSA/17%20Math%20%26%20Geometry/","title":"17. Math &amp; Geometry","text":""},{"location":"DSA/17%20Math%20%26%20Geometry/#rotate-image","title":"Rotate Image","text":"<p>The idea was firstly transpose the matrix and then flip it symmetrically. For instance,</p> <p><code>1  2  3              4  5  6 7  8  9</code></p> <p>after transpose, it will be swap(matrix[i][j], matrix[j][i])</p> <p><code>1  4  7 2  5  8 3  6  9</code></p> <p>Then flip the matrix horizontally. (swap(matrix[i][j], matrix[i][matrix.length-1-j])</p> <p><code>7  4  1 8  5  2 9  6  3</code></p> <p>Hope this helps.</p> <pre><code>public class Solution {\n    public void rotate(int[][] matrix) {\n        for(int i = 0; i&lt;matrix.length; i++){\n            for(int j = i; j&lt;matrix[0].length; j++){\n                int temp = 0;\n                temp = matrix[i][j];\n                matrix[i][j] = matrix[j][i];\n                matrix[j][i] = temp;\n            }\n        }\n        for(int i =0 ; i&lt;matrix.length; i++){\n            for(int j = 0; j&lt;matrix.length/2; j++){\n                int temp = 0;\n                temp = matrix[i][j];\n                matrix[i][j] = matrix[i][matrix.length-1-j];\n                matrix[i][matrix.length-1-j] = temp;\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"DSA/17%20Math%20%26%20Geometry/#spiral-matrix","title":"Spiral Matrix","text":"<pre><code>public class Solution {\n    public List&lt;Integer&gt; spiralOrder(int[][] matrix) {\n        List&lt;Integer&gt; res = new ArrayList&lt;Integer&gt;();\n        if(matrix.length == 0 || matrix[0].length == 0) return res;\n\n        int top = 0;\n        int bottom = matrix.length-1;\n        int left = 0;\n        int right = matrix[0].length-1;\n\n        while(true){\n            for(int i = left; i &lt;= right; i++) res.add(matrix[top][i]);\n            top++;\n            if(left &gt; right || top &gt; bottom) break;\n\n            for(int i = top; i &lt;= bottom; i++) res.add(matrix[i][right]);\n            right--;\n            if(left &gt; right || top &gt; bottom) break;\n\n            for(int i = right; i &gt;= left; i--) res.add(matrix[bottom][i]);\n            bottom--;\n            if(left &gt; right || top &gt; bottom) break;\n\n            for(int i = bottom; i &gt;= top; i--) res.add(matrix[i][left]);\n            left++;\n            if(left &gt; right || top &gt; bottom) break;\n        }\n\n        return res;\n    }\n\n}\n</code></pre>"},{"location":"DSA/17%20Math%20%26%20Geometry/#set-matrix-zeroes","title":"Set Matrix Zeroes","text":"<pre><code>public class Solution {\npublic void setZeroes(int[][] matrix) {\n    boolean fr = false,fc = false;\n    for(int i = 0; i &lt; matrix.length; i++) {\n        for(int j = 0; j &lt; matrix[0].length; j++) {\n            if(matrix[i][j] == 0) {\n                if(i == 0) fr = true;\n                if(j == 0) fc = true;\n                matrix[0][j] = 0;\n                matrix[i][0] = 0;\n            }\n        }\n    }\n    for(int i = 1; i &lt; matrix.length; i++) {\n        for(int j = 1; j &lt; matrix[0].length; j++) {\n            if(matrix[i][0] == 0 || matrix[0][j] == 0) {\n                matrix[i][j] = 0;\n            }\n        }\n    }\n    if(fr) {\n        for(int j = 0; j &lt; matrix[0].length; j++) {\n            matrix[0][j] = 0;\n        }\n    }\n    if(fc) {\n        for(int i = 0; i &lt; matrix.length; i++) {\n            matrix[i][0] = 0;\n        }\n    }\n\n}\n\n**}**\n</code></pre>"},{"location":"DSA/17%20Math%20%26%20Geometry/#happy-number","title":"Happy Number","text":"<p>Intuition</p> <p>Floyd's tortoise and hare method will be used, because this has something to do with a cycle.</p> <p>Approach</p> <p></p> <p></p> <p>Complexity</p> <ul> <li>Time complexity: O(N)</li> <li>Space complexity: O(1)</li> </ul> <p>Code</p> <pre><code>import java.util.LinkedList;\n\nclass Solution {\n    public boolean isHappy(int n) {\n\n        int slow = n;\n        int fast = n;\n//while loop is not used here because initially slow and \n//fast pointer will be equal only, so the loop won't run.\n        do {\n//slow moving one step ahead and fast moving two steps ahead\n\n            slow = square(slow);\n            fast = square(square(fast));\n        } while (slow != fast);\n\n//if a cycle exists, then the number is not a happy number\n//and slow will have a value other than 1\n\n        return slow == 1;\n    }\n\n//Finding the square of the digits of a number\n\n    public int square(int num) {\n\n        int ans = 0;\n\n        while(num &gt; 0) {\n            int remainder = num % 10;\n            ans += remainder * remainder;\n            num /= 10;\n        }\n\n        return ans;\n    }\n}\n</code></pre>"},{"location":"DSA/17%20Math%20%26%20Geometry/#plus-one","title":"Plus One","text":"<pre><code>public int[] plusOne(int[] digits) {\n\n    int n = digits.length;\n    for(int i=n-1; i&gt;=0; i--) {\n        if(digits[i] &lt; 9) {\n            digits[i]++;\n            return digits;\n        }\n\n        digits[i] = 0;\n    }\n\n    int[] newNumber = new int [n+1];\n    newNumber[0] = 1;\n\n    return newNumber;\n}\n</code></pre>"},{"location":"DSA/17%20Math%20%26%20Geometry/#powx-n","title":"Pow(x, n)","text":"<p>1. nest myPow</p> <pre><code>double myPow(double x, int n) {\n    if(n&lt;0) return 1/x * myPow(1/x, -(n+1));\n    if(n==0) return 1;\n    if(n==2) return x*x;\n    if(n%2==0) return myPow( myPow(x, n/2), 2);\n    else return x*myPow( myPow(x, n/2), 2);\n}\n</code></pre> <p>2. double myPow</p> <pre><code>double myPow(double x, int n) { \n    if(n==0) return 1;\n    double t = myPow(x,n/2);\n    if(n%2) return n&lt;0 ? 1/x*t*t : x*t*t;\n    else return t*t;\n}\n</code></pre> <p>3. double x</p> <pre><code>double myPow(double x, int n) { \n    if(n==0) return 1;\n    if(n&lt;0){\n        n = -n;\n        x = 1/x;\n    }\n    return n%2==0 ? myPow(x*x, n/2) : x*myPow(x*x, n/2);\n}\n</code></pre> <p>4. iterative one</p> <pre><code>double myPow(double x, int n) { \n    if(n==0) return 1;\n    if(n&lt;0) {\n        n = -n;\n        x = 1/x;\n    }\n    double ans = 1;\n    while(n&gt;0){\n        if(n&amp;1) ans *= x;\n        x *= x;\n        n &gt;&gt;= 1;\n    }\n    return ans;\n}\n</code></pre>"},{"location":"DSA/17%20Math%20%26%20Geometry/#multiply-strings","title":"Multiply Strings","text":"<pre><code>public String multiply(String num1, String num2) {\n    int m = num1.length(), n = num2.length();\n    int[] pos = new int[m + n];\n\n    for(int i = m - 1; i &gt;= 0; i--) {\n        for(int j = n - 1; j &gt;= 0; j--) {\n            int mul = (num1.charAt(i) - '0') * (num2.charAt(j) - '0');\n            int p1 = i + j, p2 = i + j + 1;\n            int sum = mul + pos[p2];\n\n            pos[p1] += sum / 10;\n            pos[p2] = (sum) % 10;\n        }\n    }\n\n    StringBuilder sb = new StringBuilder();\n    for(int p : pos) if(!(sb.length() == 0 &amp;&amp; p == 0)) sb.append(p);\n    return sb.length() == 0 ? \"0\" : sb.toString();\n}\n</code></pre>"},{"location":"DSA/17%20Math%20%26%20Geometry/#detect-squares","title":"Detect Squares","text":"<ol> <li>Save all coordinates to a list, in the meanwhile count the frequencies of each coordinate in a hashmap</li> <li>During count method, check if each coordinate form a square diagnol with the query point, if so, use the counts of the other two coordinates of the square to calculate the total</li> </ol> <p>e.g.</p> <p>x, y and px, py formed a diagnol for a square size of |px -x|, now we just need to see the counts of (x, py) and (px, y).</p> <p>using @ for map coordinate keys</p> <pre><code>class DetectSquares {\n    List&lt;int[]&gt; coordinates;\n    Map&lt;String, Integer&gt; counts;\n\n    public DetectSquares() {\n        coordinates = new ArrayList&lt;&gt;();\n        counts = new HashMap&lt;&gt;();\n    }\n\n    public void add(int[] point) {\n        coordinates.add(point);\n        String key = point[0] + \"@\" + point[1];\n        counts.put(key, counts.getOrDefault(key, 0) + 1);\n    }\n\n    public int count(int[] point) {\n        int sum = 0, px = point[0], py = point[1];\n        for (int[] coordinate : coordinates) {\n            int x = coordinate[0], y = coordinate[1];\n            if (px == x || py == y || (Math.abs(px - x) != Math.abs(py - y)))\n                continue;\n            sum += counts.getOrDefault(x + \"@\" + py, 0) * counts.getOrDefault(px + \"@\" + y, 0);\n        }\n\n        return sum;\n    }\n}\n</code></pre>"},{"location":"DSA/18%20Bit%20Manipulation/","title":"18. Bit Manipulation","text":""},{"location":"DSA/18%20Bit%20Manipulation/#single-number","title":"Single Number","text":"<p>known that A XOR A = 0 and the XOR operator is commutative, the solution will be very straightforward.</p> <p>`</p> <pre><code>int singleNumber(int A[], int n) {\n    int result = 0;\n    for (int i = 0; i&lt;n; i++)\n    {\n        result ^=A[i];\n    }\n    return result;\n}\n</code></pre>"},{"location":"DSA/18%20Bit%20Manipulation/#number-of-1-bits","title":"Number of 1 Bits","text":"<pre><code>public static int hammingWeight(int n) {\n    int ones = 0;\n        while(n!=0) {\n            ones = ones + (n &amp; 1);\n            n = n&gt;&gt;&gt;1;\n        }\n        return ones;\n}\n</code></pre> <ul> <li>An Integer in Java has 32 bits, e.g. 00101000011110010100001000011010.</li> <li>To count the 1s in the Integer representation we put the input intn in bit AND with 1 (that is represented as00000000000000000000000000000001, and if this operation result is 1,that means that the last bit of the input integer is 1. Thus we add it to the 1s count.</li> </ul> <p>ones = ones + (n &amp; 1);</p> <ul> <li>Then we shift the input Integer by one on the right, to check for thenext bit.</li> </ul> <p>n = n&gt;&gt;&gt;1; </p> <p>We need to use bit shifting unsigned operation\u00a0&gt;&gt;&gt;\u00a0(while\u00a0&gt;&gt;\u00a0depends on sign extension)</p> <ul> <li>We keep doing this until the input Integer is 0.</li> </ul> <p>In Java we need to put attention on the fact that the maximum integer is 2147483647. Integer type in Java is signed and there is no unsigned int. So the input 2147483648 is represented in Java as -2147483648 (in java int type has a cyclic representation, that means\u00a0Integer.MAX_VALUE+1==Integer.MIN_VALUE).</p> <p>This force us to use</p> <p>n!=0 </p> <p>in the while condition and we cannot use</p> <p>n&gt;0 </p> <p>because the input 2147483648 would correspond to -2147483648 in java and the code would not enter the while if the condition is n&gt;0 for n=2147483648.</p>"},{"location":"DSA/18%20Bit%20Manipulation/#counting-bits","title":"Counting Bits","text":"<p>Prerequisite</p> <p>As we know, a number can be classified into an\u00a0<code>even</code>\u00a0or\u00a0<code>odd</code>\u00a0number.</p> <ol> <li>An even number ends with\u00a0<code>0</code>\u00a0in binary</li> <li>An odd number ends with\u00a0<code>1</code>\u00a0in binary</li> </ol> <p>Strategy</p> <p>Let's denote the number as\u00a0<code>num</code>:</p> <ol> <li> <p>If it is even, the ending bit is\u00a0<code>0</code>, then that bit can be ignored,\u00a0<code>countBits(num)</code>\u00a0is the same as\u00a0<code>countBits(num &gt;&gt; 1)</code>, so\u00a0<code>countBits(num) = countBits(num &gt;&gt; 1)</code>;</p> <p>For example:</p> <p><code>num:      101010101010 num &gt;&gt; 1: 10101010101</code></p> </li> <li> <p>If it is odd, the ending bit is\u00a0<code>1</code>, then the number of set bits is that of\u00a0<code>num - 1</code>\u00a0+ 1, i.e.\u00a0<code>countBits(num) = countBits(num - 1) + 1</code></p> <p>For example:</p> <p><code>num:     101010101011 num - 1: 101010101010</code></p> </li> </ol> <p>Final code</p> <pre><code>class Solution {\n    public int[] countBits(int num) {\n        int[] res = new int[num + 1];\n        res[0] = 0;\n\n        for(int i = 1; i &lt;= num; i++){\n            if((i &amp; 1) == 0){\n                res[i] = res[i &gt;&gt; 1];\n            }else{\n                res[i] = res[i - 1] + 1;\n            }\n        }\n\n        return res;\n    }\n}\n</code></pre> <p>Time complexity:\u00a0<code>O(n)</code></p> <p>Space complexity:\u00a0<code>O(n)</code></p> <p>Variant</p> <p>Of course, you can merge these 2 cases to\u00a0<code>res[i] = res[i &gt;&gt; 1] + (i &amp; 1)</code>\u00a0which also works like the most upvoted solution. It looks more consice but you are\u00a0merging your logic. That is not a good thing I think...</p>"},{"location":"DSA/18%20Bit%20Manipulation/#reverse-bits","title":"Reverse Bits","text":"<p>We first intitialize result to 0. We then iterate from</p> <p>0 to 31 (an integer has 32 bits). In each iteration:</p> <p>We first shift result to the left by 1 bit.</p> <p>Then, if the last digit of input n is 1, we add 1 to result. To</p> <p>find the last digit of n, we just do: (n &amp; 1)</p> <p>Example, if n=5 (101), n&amp;1 = 101 &amp; 001 = 001 = 1;</p> <p>however, if n = 2 (10), n&amp;1 = 10 &amp; 01 = 00 = 0).</p> <p>Finally, we update n by shifting it to the right by 1 (n &gt;&gt;= 1). This is because the last digit is already taken care of, so we need to drop it by shifting n to the right by 1.</p> <p>At the end of the iteration, we return result.</p> <p>Example, if input n = 13 (represented in binary as</p> <p>0000_0000_0000_0000_0000_0000_0000_1101, the \"_\" is for readability),</p> <p>calling reverseBits(13) should return:</p> <p>1011_0000_0000_0000_0000_0000_0000_0000</p> <p>Here is how our algorithm would work for input n = 13:</p> <p>Initially, result = 0 = 0000_0000_0000_0000_0000_0000_0000_0000,</p> <p>n = 13 = 0000_0000_0000_0000_0000_0000_0000_1101</p> <p>Starting for loop:</p> <p>i = 0:</p> <p>result = result &lt;&lt; 1 = 0000_0000_0000_0000_0000_0000_0000_0000.</p> <p>n&amp;1 = 0000_0000_0000_0000_0000_0000_0000_1101</p> <p>&amp; 0000_0000_0000_0000_0000_0000_0000_0001</p> <p>= 0000_0000_0000_0000_0000_0000_0000_0001 = 1</p> <p>therefore result = result + 1 =</p> <p>0000_0000_0000_0000_0000_0000_0000_0000</p> <ul> <li>0000_0000_0000_0000_0000_0000_0000_0001</li> </ul> <p>= 0000_0000_0000_0000_0000_0000_0000_0001 = 1</p> <p>Next, we right shift n by 1 (n &gt;&gt;= 1) (i.e. we drop the least significant bit) to get:</p> <p>n = 0000_0000_0000_0000_0000_0000_0000_0110.</p> <p>We then go to the next iteration.</p> <p>i = 1:</p> <p>result = result &lt;&lt; 1 = 0000_0000_0000_0000_0000_0000_0000_0010;</p> <p>n&amp;1 = 0000_0000_0000_0000_0000_0000_0000_0110 &amp;</p> <p>0000_0000_0000_0000_0000_0000_0000_0001</p> <p>= 0000_0000_0000_0000_0000_0000_0000_0000 = 0;</p> <p>therefore we don't increment result.</p> <p>We right shift n by 1 (n &gt;&gt;= 1) to get:</p> <p>n = 0000_0000_0000_0000_0000_0000_0000_0011.</p> <p>We then go to the next iteration.</p> <p>i = 2:</p> <p>result = result &lt;&lt; 1 = 0000_0000_0000_0000_0000_0000_0000_0100.</p> <p>n&amp;1 = 0000_0000_0000_0000_0000_0000_0000_0011 &amp;</p> <p>0000_0000_0000_0000_0000_0000_0000_0001 =</p> <p>0000_0000_0000_0000_0000_0000_0000_0001 = 1</p> <p>therefore result = result + 1 =</p> <p>0000_0000_0000_0000_0000_0000_0000_0100 +</p> <p>0000_0000_0000_0000_0000_0000_0000_0001 =</p> <p>result = 0000_0000_0000_0000_0000_0000_0000_0101</p> <p>We right shift n by 1 to get:</p> <p>n = 0000_0000_0000_0000_0000_0000_0000_0001.</p> <p>We then go to the next iteration.</p> <p>i = 3:</p> <p>result = result &lt;&lt; 1 = 0000_0000_0000_0000_0000_0000_0000_1010.</p> <p>n&amp;1 = 0000_0000_0000_0000_0000_0000_0000_0001 &amp;</p> <p>0000_0000_0000_0000_0000_0000_0000_0001 =</p> <p>0000_0000_0000_0000_0000_0000_0000_0001 = 1</p> <p>therefore result = result + 1 =</p> <p>= 0000_0000_0000_0000_0000_0000_0000_1011</p> <p>We right shift n by 1 to get:</p> <p>n = 0000_0000_0000_0000_0000_0000_0000_0000 = 0.</p> <p>Now, from here to the end of the iteration, n is 0, so (n&amp;1)</p> <p>will always be 0 and and n &gt;&gt;=1 will not change n. The only change</p> <p>will be for result &lt;&lt;=1, i.e. shifting result to the left by 1 digit.</p> <p>Since there we have i=4 to i = 31 iterations left, this will result</p> <p>in padding 28 0's to the right of result. i.e at the end, we get</p> <p>result = 1011_0000_0000_0000_0000_0000_0000_0000</p> <p>This is exactly what we expected to get</p> <pre><code>public int reverseBits(int n) {\n    if (n == 0) return 0;\n\n    int result = 0;\n    for (int i = 0; i &lt; 32; i++) {\n        result &lt;&lt;= 1;\n        if ((n &amp; 1) == 1) result++;\n        n &gt;&gt;= 1;\n    }\n    return result;\n}\n</code></pre>"},{"location":"DSA/18%20Bit%20Manipulation/#missing-number","title":"Missing Number","text":"<p>The basic idea is to use XOR operation. We all know that a<sup>b</sup>b =a, which means two xor operations with the same number will eliminate the number and reveal the original number.</p> <p>In this solution, I apply XOR operation to both the index and value of the array. In a complete array with no missing numbers, the index and value should be perfectly corresponding( nums[index] = index), so in a missing array, what left finally is the missing number.</p> <pre><code>public int missingNumber(int[] nums) {\n\n    int xor = 0, i = 0;\n    for (i = 0; i &lt; nums.length; i++) {\n        xor = xor ^ i ^ nums[i];\n    }\n\n    return xor ^ i;\n}\n</code></pre>"},{"location":"DSA/18%20Bit%20Manipulation/#sum-of-two-integers","title":"Sum of Two Integers","text":"<p>There's lot of answers here, but none of them shows how they arrived at the answer, here's my simple try to explain.</p> <p>Eg: Let's try this with our hand 3 + 2 = 5 , the carry will be with in the brackets i.e \"()\"</p> <p><code>3 =&gt; 011  2=&gt;  010      ____      1(1)01</code></p> <p>Here we will forward the carry at the second bit to get the result.</p> <p>So which bitwise operator can do this ? A simple observation says that XOR can do that,but it just falls short in dealing with the carry properly, but correctly adds when there is no need to deal with carry.</p> <p>For Eg:</p> <p><code>1   =&gt;  001  2   =&gt;  010  1^2 =&gt;  011 (2+1 = 3)</code></p> <p>So now when we have carry, to deal with, we can see the result as :</p> <p><code>3  =&gt; 011  2  =&gt; 010  3^2=&gt; 001</code></p> <p>Here we can see XOR just fell short with the carry generated at the second bit.</p> <p>So how can we find the carry ? The carry is generated when both the bits are set, i.e (1,1) will generate carry but (0,1 or 1,0 or 0,0) won't generate a carry, so which bitwise operator can do that ? AND gate ofcourse.</p> <p>To find the carry we can do</p> <p><code>3    =&gt;  011  2    =&gt;  010  3&amp;2  =&gt;  010</code></p> <p>now we need to add it to the previous value we generated i.e ( 3 ^ 2), but the carry should be added to the left bit of the one which genereated it.</p> <p>so we left shift it by one so that it gets added at the right spot.</p> <p>Hence (3&amp;2)&lt;&lt;1 =&gt; 100</p> <p>so we can now do</p> <p>`3 ^2        =&gt;  001  (3&amp;2)&lt;&lt;1    =&gt;  100 </p> <p>Now xor them, which will give 101(5) , we can continue this until the carry becomes zero.`</p> <p>A Java program which implements the above logic :</p> <pre><code>class Solution {\n    public int getSum(int a, int b) {\n      int c; \n      while(b !=0 ) {\n        c = (a&amp;b);\n        a = a ^ b;\n        b = (c)&lt;&lt;1;\n      }\n      return a;\n\n    }\n}\n</code></pre>"},{"location":"DSA/18%20Bit%20Manipulation/#reverse-integer","title":"Reverse Integer","text":"<pre><code>public int reverse(int x)\n{\n    int result = 0;\n\n    while (x != 0)\n    {\n        int tail = x % 10;\n        int newResult = result * 10 + tail;\n        if ((newResult - tail) / 10 != result)\n        { return 0; }\n        result = newResult;\n        x = x / 10;\n    }\n\n    return result;\n}\n</code></pre>"},{"location":"DSA/2%20Two%20Pointers/","title":"2. Two Pointers","text":""},{"location":"DSA/2%20Two%20Pointers/#valid-palindrome","title":"Valid Palindrome","text":"<pre><code>class Solution {\n    public boolean isPalindrome(String s) {\n        s=s.replaceAll(\"[^a-zA-Z0-9]+\", \"\");\n        s=s.toLowerCase();\n        StringBuilder s1=new StringBuilder(s);\n        if(s.equals(s1.reverse().toString())){\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n}\n</code></pre>"},{"location":"DSA/2%20Two%20Pointers/#two-sum-ii-input-array-is-sorted","title":"Two Sum II Input Array Is Sorted","text":"<pre><code>class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        int low=0,high=nums.length-1;\n        while(low&lt;high){\n            if(nums[low]+nums[high]==target){\n                return new int[]{low+1,high+1};\n            }else if(nums[low]+nums[high]&lt;target){\n                low++;\n            }else{\n                high--;\n            }\n        }\n        return new int[0];\n    }\n}\n</code></pre> <pre><code>class Solution {\n    public int[] twoSum(int[] numbers, int target) {\n        HashMap&lt;Integer,Integer&gt; h=new HashMap&lt;&gt;();\n        for(int i=0;i&lt;numbers.length;i++){\n            if(h.containsKey(target-numbers[i])){\n                return new int[]{h.get(target-numbers[i]),i+1};\n            }\n            else{\n                h.put(numbers[i],i+1);\n            }\n        }\n        return numbers;\n    }\n}\n</code></pre>"},{"location":"DSA/2%20Two%20Pointers/#3sum","title":"3Sum","text":"<pre><code>class Solution {\n    public List&lt;List&lt;Integer&gt;&gt; threeSum(int[] nums) {\n\n        List&lt;List&lt;Integer&gt;&gt; ans = new ArrayList&lt;List&lt;Integer&gt;&gt;();\n        Arrays.sort(nums);\n        for (int i = 0; i &lt; nums.length - 2; i++) {\n            if (i &gt; 0 &amp;&amp; nums[i] == nums[i - 1]) {\n                continue;\n            }\n            int j = i + 1;\n            int k = nums.length - 1;\n            while (j &lt; k) {\n                int sum = nums[i] + nums[j] + nums[k];\n                if (sum == 0) {\n\n                    ans.add(Arrays.asList(nums[i], nums[j], nums[k]));\n\n                    while (j &lt; k &amp;&amp; nums[j] == nums[j + 1]) {\n                        j++;\n                    }\n                    while (j &lt; k &amp;&amp; nums[k] == nums[k - 1]) {\n                        k--;\n                    }\n                    j++;\n                    k--;\n                } else if (sum &lt; 0) {\n                    j++;\n                } else {\n                    k--;\n                }\n            }\n\n        }\n        return ans;\n    }\n\n}\n</code></pre>"},{"location":"DSA/2%20Two%20Pointers/#container-with-most-water","title":"Container With Most Water","text":"<pre><code>class Solution {\n    public int maxArea(int[] height) {\n        int left = 0;\n        int right = height.length - 1;\n        int max = 0;\n        while (left &lt; right) {\n            int length = Math.min(height[left], height[right]);\n            int width = right - left;\n            int area = length * width;\n            max = Math.max(max, area);\n            if (height[left] &lt; height[right]) {\n                left++;\n            } else if (height[left] &gt; height[right]) {\n                right--;\n            } else {\n                left++;\n                right--;\n            }\n        }\n        return max;\n    }\n}\n</code></pre>"},{"location":"DSA/2%20Two%20Pointers/#trapping-rain-water","title":"Trapping Rain Water","text":"<pre><code>class Solution {\n    public int trap(int[] h) {\n        if (h == null || h.length &lt; 2)\n            return 0;\n        Stack&lt;Integer&gt; s = new Stack&lt;Integer&gt;();\n        int i = 0;\n        int water = 0;\n        int mh = 0;\n        while (i &lt; h.length) {\n            if (s.isEmpty() || h[i] &lt; h[s.peek()]) {\n                s.push(i++);\n            } else {\n                int pre = s.pop();\n                if (!s.empty()) {\n                    mh = Math.min(h[s.peek()], h[i]);\n                    water += (mh - h[pre]) * (i - s.peek() - 1);\n                }\n\n            }\n        }\n        return water;\n    }\n}\n</code></pre>"},{"location":"DSA/3%20Sliding%20Window/","title":"3. Sliding Window","text":""},{"location":"DSA/3%20Sliding%20Window/#best-time-to-buy-and-sell-stock","title":"Best Time to Buy And Sell Stock","text":"<pre><code>class Solution {\n    public int maxProfit(int[] prices) {\n\n        int min = Integer.MAX_VALUE;\n        int profit = 0;\n        int maxProfit = 0;\n        for (int i = 0; i &lt; prices.length; i++) {\n            if (prices[i] &lt; min) {\n                min = prices[i];\n            }\n            profit = prices[i] - min;\n            if (profit &gt; maxProfit) {\n                maxProfit = profit;\n            }\n        }\n        return maxProfit;\n    }\n}\n</code></pre>"},{"location":"DSA/3%20Sliding%20Window/#longest-substring-without-repeating-characters","title":"Longest Substring Without Repeating Characters","text":"<pre><code>class Solution {\n    public int lengthOfLongestSubstring(String s) {\n        Set&lt;Character&gt; cs = new HashSet&lt;Character&gt;();\n        int maxLength = 0;\n        int left = 0;\n        for (int i = 0; i &lt; s.length(); i++) {\n            if (cs.add(s.charAt(i))) {\n                maxLength = Math.max(maxLength, i - left + 1);\n            } else {\n                while (!cs.add(s.charAt(i))) {\n                    cs.remove(s.charAt(left));\n                    left++;\n                }\n            }\n        }\n        return maxLength;\n    }\n}\n</code></pre>"},{"location":"DSA/3%20Sliding%20Window/#longest-repeating-character-replacement","title":"Longest Repeating Character Replacement","text":"<pre><code>class Solution {\n    public int characterReplacement(String s, int k) {\n        int[] arr = new int[26];\n        int l = 0;\n        int max = 0;\n        int res = 0;\n        for (int r = 0; r &lt; s.length(); r++) {\n\n            max = Math.max(max, ++arr[s.charAt(r) - 'A']);\n            if (r - l + 1 - max &gt; k) {\n                arr[s.charAt(l) - 'A']--;\n                l++;\n            }\n            res = Math.max(res, r - l + 1);\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"DSA/3%20Sliding%20Window/#permutation-in-string","title":"Permutation In String","text":"<pre><code>class Solution {\n    public boolean checkInclusion(String s1, String s2) {\n        if (s1.length() &gt; s2.length())\n            return false;\n        int[] arr1 = new int[26];\n        int[] arr2 = new int[26];\n        for (int i = 0; i &lt; s1.length(); i++) {\n            arr1[s1.charAt(i) - 'a']++;\n            arr2[s2.charAt(i) - 'a']++;\n        }\n        if (Arrays.equals(arr1, arr2))\n            return true;\n        int end = s1.length();\n        int begin = 0;\n        while (end &lt; s2.length()) {\n            arr2[s2.charAt(begin) - 'a']--;\n            arr2[s2.charAt(end) - 'a']++;\n\n            if (Arrays.equals(arr1, arr2))\n                return true;\n            end++;\n            begin++;\n        }\n        return false;\n    }\n}\n</code></pre>"},{"location":"DSA/3%20Sliding%20Window/#minimum-window-substring","title":"Minimum Window Substring","text":"<pre><code>class Solution {\n    public String minWindow(String s, String t) {\n        int[] count = new int[128];\n        for (char i : t.toCharArray()) {\n            count[i]++;\n        }\n        String ws = \"\";\n        int wl = 0, wr = 0, cfw = 0, tc = t.length(), minw = Integer.MAX_VALUE;\n        char[] src = s.toCharArray();\n        while (wr &lt; s.length()) {\n            int cc = src[wr];\n            count[cc]--;\n            if (count[cc] &gt;= 0) {\n                cfw++;\n            }\n            while (cfw == tc) {\n                int cwl = wr - wl + 1;\n                if (minw &gt; cwl) {\n                    minw = cwl;\n                    ws = s.substring(wl, wr + 1);\n                }\n                count[src[wl]]++;\n                if (count[src[wl]] &gt; 0) {\n                    cfw--;\n                }\n                wl++;\n            }\n            wr++;\n        }\n        return ws;\n    }\n}\n</code></pre> <pre><code>class Solution {\n    public String minWindow(String s, String t) {\n        int[] count = new int[128];\n\n        // Count the characters in t\n        for (char ch : t.toCharArray()) count[ch]++;\n\n        char[] sourceStr = s.toCharArray();\n        String windowString = \"\";\n        int windowLeft = 0, windowRight = 0, charsFoundInWindow = 0,\n                totalCharsToFind = t.length(), minWindowLen = Integer.MAX_VALUE;\n        while (windowRight &lt; sourceStr.length) {\n            int currentChar = sourceStr[windowRight];\n            // Reduce the count of current character\n            count[currentChar]--;\n            // If current character's count is greater than or equal to 0 if it was also present in target string t\n            // and we can say that we have found that character in current window so we increment charsFoundInWindow\n            if (count[currentChar] &gt;= 0) {\n                charsFoundInWindow++;\n            }\n\n            // If we found a window containing all characters of t, find if it's smaller than the smallest window\n            // If yes, store the window in windowString to return finally.\n            while (charsFoundInWindow == totalCharsToFind) {\n                int currentWindowLen = windowRight - windowLeft + 1;\n                if(minWindowLen &gt; currentWindowLen) {\n                    minWindowLen = currentWindowLen;\n                    windowString = s.substring(windowLeft, windowRight + 1);\n                }\n                // Now we need to reduce the window size from left to further look for smaller windows.\n                // The current leftmost character was already visited by right pointer windowRight earlier\n                // and we had reduced its count in count[]. So now we increment it because\n                // we need the count of that character in the remaining window.\n                count[sourceStr[windowLeft]]++;\n                // Now if the last character is greater than 0, it means that character was present in t but\n                // is not present in current window so we have to decrement charsFoundInWindow\n                if (count[sourceStr[windowLeft]] &gt; 0) {\n                    charsFoundInWindow--;\n                }\n                windowLeft++;\n            }\n            windowRight++;\n        }\n        return windowString;\n    }\n}\n</code></pre>"},{"location":"DSA/3%20Sliding%20Window/#sliding-window-maximum","title":"Sliding Window Maximum","text":"<p>Approach 1:</p> <pre><code>class Solution {\n\n    public int[] maxSlidingWindow(int[] nums, int k) {\n        int[] ans = new int[nums.length - k + 1];\n        int j = 0;\n        Deque&lt;Integer&gt; q = new LinkedList&lt;&gt;();\n        for (int i = 0; i &lt; nums.length; i++) {\n            if (!q.isEmpty() &amp;&amp; q.peekFirst() &lt; i - k + 1) q.pollFirst();\n            while (!q.isEmpty() &amp;&amp; nums[i] &gt; nums[q.peekLast()]) q.pollLast();\n            q.offer(i);\n            if (i &gt;= k - 1) ans[j++] = nums[q.peekFirst()];\n        }\n        return ans;\n    }\n}\n</code></pre> <p>Approach 2:</p> <p>For Example: A = [2,1,3,4,6,3,8,9,10,12,56], w=4</p> <ol> <li> <p>partition the array in blocks of size w=4. The last block may have less then w.</p> <p>2, 1, 3, 4 | 6, 3, 8, 9 | 10, 12, 56|</p> </li> <li> <p>Traverse the list from start to end and calculate max_so_far. Reset max after each block boundary (of w elements).</p> <p>left_max[] = 2, 2, 3, 4 | 6, 6, 8, 9 | 10, 12, 56</p> </li> <li> <p>Similarly calculate max in future by traversing from end to start.</p> <p>right_max[] = 4, 4, 4, 4 | 9, 9, 9, 9 | 56, 56, 56</p> </li> <li> <p>now, sliding max at each position i in current window, sliding-max(i) = max{right_max(i), left_max(i+w-1)}</p> <p>sliding_max = 4, 6, 6, 8, 9, 10, 12, 56</p> </li> </ol> <p>code:</p> <pre><code> public static int[] slidingWindowMax(final int[] in, final int w) {\n    final int[] max_left = new int[in.length];\n    final int[] max_right = new int[in.length];\n\n    max_left[0] = in[0];\n    max_right[in.length - 1] = in[in.length - 1];\n\n    for (int i = 1; i &lt; in.length; i++) {\n        max_left[i] = (i % w == 0) ? in[i] : Math.max(max_left[i - 1], in[i]);\n\n        final int j = in.length - i - 1;\n        max_right[j] = (j % w == 0) ? in[j] : Math.max(max_right[j + 1], in[j]);\n    }\n\n    final int[] sliding_max = new int[in.length - w + 1];\n    for (int i = 0, j = 0; i + w &lt;= in.length; i++) {\n        sliding_max[j++] = Math.max(max_right[i], max_left[i + w - 1]);\n    }\n\n    return sliding_max;\n</code></pre>"},{"location":"DSA/4%20Stack/","title":"4. Stack","text":""},{"location":"DSA/4%20Stack/#valid-parentheses","title":"Valid Parentheses","text":"<pre><code>class Solution {\n    public boolean isValid(String s) {\n        Stack&lt;Character&gt; st = new Stack&lt;Character&gt;();\n        for (char c : s.toCharArray()) {\n            if (c == '(' || c == '{' || c == '[') {\n                st.push(c);\n\n            } else {\n                if (st.isEmpty()) {\n                    return false;\n                }\n                char t = st.peek();\n                if (t == '(' &amp;&amp; c == ')' || t == '{' &amp;&amp; c == '}' || t == '[' &amp;&amp; c == ']') {\n                    st.pop();\n                } else {\n                    return false;\n                }\n            }\n        }\n        return st.isEmpty();\n    }\n}\n</code></pre>"},{"location":"DSA/4%20Stack/#min-stack","title":"Min Stack","text":"<pre><code>class MinStack {\n    Stack&lt;Node&gt; s;\n    int min;\n    public MinStack() {\n        s=new Stack();\n        min=Integer.MAX_VALUE;\n    }\n\n    public void push(int val) {\n        if(s.isEmpty()){\n            min=val;\n        }\n        else{\n            min=Math.min(val,s.peek().min);\n        }\n        s.push(new Node(val,min));\n    }\n\n    public void pop() {\n        s.pop();\n    }\n\n    public int top() {\n        return s.peek().val;\n    }\n\n    public int getMin() {\n        return s.peek().min;\n    }\n}\nclass Node{\n    int min;\n    int val;\n    Node(int val,int min){\n        this.val=val;\n        this.min=min;\n    }\n}\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * MinStack obj = new MinStack();\n * obj.push(val);\n * obj.pop();\n * int param_3 = obj.top();\n * int param_4 = obj.getMin();\n */\n</code></pre>"},{"location":"DSA/4%20Stack/#evaluate-reverse-polish-notation","title":"Evaluate Reverse Polish Notation","text":"<pre><code>class Solution {\n    public int evalRPN(String[] tokens) {\n        int[] stack = new int[tokens.length];\n        int top = 0;\n        for (String s : tokens) {\n            char c = s.charAt(0);\n            if (c == '+') {\n                int b = stack[--top];\n                int a = stack[--top];\n                stack[top++] = a + b;\n            } else if (c == '-' &amp;&amp; s.length() == 1) {\n                int b = stack[--top];\n                int a = stack[--top];\n                stack[top++] = a - b;\n            } else if (c == '/') {\n                int b = stack[--top];\n                int a = stack[--top];\n                stack[top++] = a / b;\n            } else if (c == '*') {\n                int b = stack[--top];\n                int a = stack[--top];\n                stack[top++] = a * b;\n            } else {\n                stack[top++] = Integer.parseInt(s);\n            }\n        }\n        return stack[0];\n    }\n}\n</code></pre>"},{"location":"DSA/4%20Stack/#generate-parentheses","title":"Generate Parentheses","text":"<pre><code>class Solution {\n    public List&lt;String&gt; generateParenthesis(int n) {\n        List&lt;String&gt; lts = new ArrayList&lt;String&gt;();\n        String c = \"\";\n        int coo = 0;\n        int coc = 0;\n        backtrack(lts, c, coo, coc, n);\n        return lts;\n    }\n\n    public void backtrack(List&lt;String&gt; lts, String c, int coo, int coc, int n) {\n        if (coo == n &amp;&amp; coc == n) {\n            lts.add(c);\n            return;\n        }\n        if (coo &lt; n) {\n            backtrack(lts, c + \"(\", coo + 1, coc, n);\n        }\n        if (coc &lt; coo) {\n            backtrack(lts, c + \")\", coo, coc + 1, n);\n        }\n    }\n}\n</code></pre>"},{"location":"DSA/4%20Stack/#daily-temperatures","title":"Daily Temperatures","text":"<pre><code>class Solution {\n    public int[] dailyTemperatures(int[] temperatures) {\n        int[] ans = new int[temperatures.length];\n        Stack&lt;Integer&gt; stack = new Stack&lt;Integer&gt;();\n        for (int i = temperatures.length - 1; i &gt;= 0; i--) {\n            if (stack.isEmpty()) {\n                stack.push(i);\n                ans[i] = 0;\n            } else {\n                while (!stack.isEmpty() &amp;&amp; temperatures[i] &gt;= temperatures[stack.peek()]) {\n                    stack.pop();\n                }\n                if (stack.isEmpty()) {\n                    ans[i] = 0;\n                } else {\n                    ans[i] = stack.peek() - i;\n                }\n                stack.push(i);\n            }\n        }\n        return ans;\n    }\n}\n</code></pre>"},{"location":"DSA/4%20Stack/#car-fleet","title":"Car Fleet","text":"<pre><code>class Solution {\n    public int carFleet(int target, int[] position, int[] speed) {\n        Map&lt;Integer, Double&gt; map = new TreeMap&lt;&gt;(Collections.reverseOrder());\n        for (int i = 0; i &lt; position.length; i++) {\n            map.put(position[i], (double) (target - position[i]) / speed[i]);\n        }\n        int fleet = 0;\n        double cur = 0;\n        for (double time : map.values()) {\n            if (time &gt; cur) {\n                cur = time;\n                fleet++;\n            }\n        }\n        return fleet;\n    }\n}\n</code></pre>"},{"location":"DSA/4%20Stack/#largest-rectangle-in-histogram","title":"Largest Rectangle In Histogram","text":"<pre><code>class Solution {\n    public int largestRectangleArea(int[] heights) {\n        int len = heights.length;\n        Stack&lt;Integer&gt; s = new Stack&lt;&gt;();\n        int maxArea = 0;\n        for (int i = 0; i &lt;= len; i++) {\n            int h = (i == len ? 0 : heights[i]);\n            if (s.isEmpty() || h &gt;= heights[s.peek()]) {\n                s.push(i);\n            } else {\n                int top = s.pop();\n                maxArea = Math.max(maxArea, heights[top] * (s.isEmpty() ? i : i - 1 - s.peek()));\n                i--;\n            }\n        }\n        return maxArea;\n    }\n}\n</code></pre>"},{"location":"DSA/5%20Binary%20Search/","title":"5. Binary Search","text":""},{"location":"DSA/5%20Binary%20Search/#binary-search","title":"Binary Search","text":"<pre><code>class Solution {\n    public int search(int[] nums, int target) {\n        int left = 0;\n        int right = nums.length - 1;\n        while (left &lt;= right) {\n            int mid = left + (right - left) / 2;\n            if (nums[mid] == target) {\n                return mid;\n            } else if (nums[mid] &lt; target) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return -1;\n    }\n}\n</code></pre>"},{"location":"DSA/5%20Binary%20Search/#search-a-2d-matrix","title":"Search a 2D Matrix","text":"<pre><code>class Solution {\n    public boolean searchMatrix(int[][] m, int target) {\n        if (m == null || m.length == 0) {\n            return false;\n        }\n        int start = 0, rows = m.length, cols = m[0].length;\n        int end = rows * cols - 1;\n        while (start &lt;= end) {\n            int mid = (start + end) / 2;\n            if (m[mid / cols][mid % cols] == target) {\n                return true;\n            } else if (m[mid / cols][mid % cols] &lt; target) {\n                start = mid + 1;\n            } else {\n                end = mid - 1;\n            }\n        }\n        return false;\n    }\n}\n</code></pre>"},{"location":"DSA/5%20Binary%20Search/#koko-eating-bananas","title":"Koko Eating Bananas","text":"<pre><code>class Solution {\n    public int minEatingSpeed(int[] piles, int h) {\n        int left = 1;\n        int right = 1000000000;\n        int mid = 0;\n        while (left &lt; right) {\n            mid = (right + left) / 2;\n            if (canEatAtTime(piles, mid, h)) {\n                right = mid;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return left;\n    }\n\n    public boolean canEatAtTime(int[] piles, int k, int h) {\n        int hours = 0;\n        for (int pile : piles) {\n            int div = (pile + k - 1) / k;\n            hours += div;\n\n        }\n        return hours &lt;= h;\n\n    }\n\n}\n</code></pre>"},{"location":"DSA/5%20Binary%20Search/#find-minimum-in-rotated-sorted-array","title":"Find Minimum In Rotated Sorted Array","text":"<pre><code>class Solution {\n    public int findMin(int[] nums) {\n        int l = 0;\n        int r = nums.length - 1;\n        while (l &lt; r) {\n            int mid = (l + r) / 2;\n            if (nums[mid] &lt; nums[r]) {\n                r = mid;\n            } else {\n                l = mid + 1;\n            }\n        }\n        return nums[l];\n    }\n}\n</code></pre>"},{"location":"DSA/5%20Binary%20Search/#search-in-rotated-sorted-array","title":"Search In Rotated Sorted Array","text":"<pre><code>class Solution {\n    public int search(int[] nums, int target) {\n        int l = 0;\n        int h = nums.length - 1;\n        while (l &lt; h) {\n            int mid = (l + h) / 2;\n            if ((nums[0] &gt; target) ^ (nums[0] &gt; nums[mid]) ^ (target &gt; nums[mid])) {\n                l = mid + 1;\n            } else {\n                h = mid;\n            }\n\n        }\n        return l == h &amp;&amp; nums[l] == target ? l : -1;\n    }\n}\n</code></pre>"},{"location":"DSA/5%20Binary%20Search/#time-based-key-value-store","title":"Time Based Key Value Store","text":"<pre><code>class Pair {\n    String value;\n    int timestamp;\n\n    Pair(String value, int timestamp) {\n        this.value = value;\n        this.timestamp = timestamp;\n    }\n}\n\nclass TimeMap {\n\n    private HashMap&lt;String, ArrayList&lt;Pair&gt;&gt; hm;\n\n    public TimeMap() {\n        hm = new HashMap&lt;String, ArrayList&lt;Pair&gt;&gt;();\n    }\n\n    public void set(String key, String value, int timestamp) {\n        if (hm.containsKey(key)) {\n            hm.get(key).add(new Pair(value, timestamp));\n        } else {\n            ArrayList&lt;Pair&gt; arr = new ArrayList&lt;Pair&gt;();\n            arr.add(new Pair(value, timestamp));\n            hm.put(key, arr);\n        }\n    }\n\n    public String get(String key, int timestamp) {\n        String crr = \"\";\n        if (hm.containsKey(key)) {\n            ArrayList&lt;Pair&gt; arr2 = hm.get(key);\n            int l = 0;\n            int h = arr2.size() - 1;\n            while (l &lt;= h) {\n                int mid = (l + h) / 2;\n                int ts = arr2.get(mid).timestamp;\n                if (ts == timestamp) {\n                    return arr2.get(mid).value;\n                } else if (ts &lt; timestamp) {\n                    crr = arr2.get(l).value;\n                    l = mid + 1;\n\n                } else {\n                    h = mid - 1;\n                }\n            }\n        }\n        return crr;\n\n    }\n}\n\n/**\n * Your TimeMap object will be instantiated and called as such:\n * TimeMap obj = new TimeMap();\n * obj.set(key,value,timestamp);\n * String param_2 = obj.get(key,timestamp);\n */\n</code></pre>"},{"location":"DSA/5%20Binary%20Search/#median-of-two-sorted-arrays","title":"Median of Two Sorted Arrays","text":"<pre><code>/*Brute-force solution (Linear)*/\n/*\n// Runtime: O(m+n)\n// Extra Space: O(m+n)\n// \nclass Solution {\n    public double findMedianSortedArrays(int[] nums1, int[] nums2) {\n        int m = nums1.length;\n        int n = nums2.length;\n        int[] nums = new int[m+n];\n        int i = 0, j = 0;\n        int k = 0;\n        while (i&lt;m &amp;&amp; j&lt;n) {\n            if (nums1[i]&lt;nums2[j]) nums[k++] = nums1[i++];\n            else nums[k++] = nums2[j++];\n        }\n        for (; i&lt;m; i++) nums[k++] = nums1[i];\n        for (; j&lt;n; j++) nums[k++] = nums2[j];\n        if ((m+n)%2 == 0) {\n            return ((float)nums[(m+n-1)/2]+(float)nums[(m+n)/2])/(float)2;\n        } else return (float)nums[(m+n-1)/2];\n    }\n}\n*/\n/* Optimized solution (Logarithmic) */\n\n// Runtime: O(log(min(m,n)))\n// Extra Space: O(1)\n\nclass Solution {\n\n    public double findMedianSortedArrays(int[] nums1, int[] nums2) {\n        int m = nums1.length;\n        int n = nums2.length;\n\n        if (m &gt; n) {\n            return findMedianSortedArrays(nums2, nums1);\n        }\n\n        int total = m + n;\n        int half = (total + 1) / 2;\n\n        int left = 0;\n        int right = m;\n\n        var result = 0.0;\n\n        while (left &lt;= right) {\n            int i = left + (right - left) / 2;\n            int j = half - i;\n\n            // get the four points around possible median\n            int left1 = (i &gt; 0) ? nums1[i - 1] : Integer.MIN_VALUE;\n            int right1 = (i &lt; m) ? nums1[i] : Integer.MAX_VALUE;\n            int left2 = (j &gt; 0) ? nums2[j - 1] : Integer.MIN_VALUE;\n            int right2 = (j &lt; n) ? nums2[j] : Integer.MAX_VALUE;\n\n            // partition is correct\n            if (left1 &lt;= right2 &amp;&amp; left2 &lt;= right1) {\n                // even\n                if (total % 2 == 0) {\n                    result =\n                        (Math.max(left1, left2) + Math.min(right1, right2)) /\n                        2.0;\n                    // odd\n                } else {\n                    result = Math.max(left1, left2);\n                }\n                break;\n            }\n            // partition is wrong (update left/right pointers)\n            else if (left1 &gt; right2) {\n                right = i - 1;\n            } else {\n                left = i + 1;\n            }\n        }\n\n        return result;\n    }\n}\n</code></pre>"},{"location":"DSA/6%20Linked%20List/","title":"6. Linked List","text":""},{"location":"DSA/6%20Linked%20List/#reverse-linked-list","title":"Reverse Linked List","text":"<pre><code>//Use three pointers and so you can change the next of the mid to the first one without losing the track of the original left.\n//Iterative version\nclass Solution {\n\n    public ListNode reverseList(ListNode head) {\n        ListNode current = head;\n        ListNode previous = null;\n        ListNode nextCurrent = null;\n\n        while (current != null) {\n            nextCurrent = current.next;\n            current.next = previous;\n            previous = current;\n            current = nextCurrent;\n        }\n\n        return previous;\n    }\n}\n\n//Recursive version\nclass Solution {\n\n    public ListNode reverseList(ListNode head) {\n        return rev(head, null);\n    }\n\n    public ListNode rev(ListNode node, ListNode pre) {\n        if (node == null) return pre;\n        ListNode temp = node.next;\n        node.next = pre;\n        return rev(temp, node);\n    }\n}\n</code></pre>"},{"location":"DSA/6%20Linked%20List/#merge-two-sorted-lists","title":"Merge Two Sorted Lists","text":"<pre><code>package java;\n\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n        final ListNode root = new ListNode();\n        ListNode prev = root;\n        while (list1 != null &amp;&amp; list2 != null) {\n            if (list1.val &lt; list2.val) {\n                prev.next = list1;\n                list1 = list1.next;\n            } else {\n                prev.next = list2;\n                list2 = list2.next;\n            }\n            prev = prev.next;\n        }\n        prev.next = list1 != null ? list1 : list2;\n        return root.next;\n    }\n}\n\n// Solution using Recursion\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n        if (list1 == null) return list2;\n        if (list2 == null) return list1;\n\n        if (list1.val &lt; list2.val) {\n            list1.next = mergeTwoLists(list1.next, list2);\n            return list1;\n        } else {\n            list2.next = mergeTwoLists(list2.next, list1);\n            return list2;\n        }\n    }\n}\n</code></pre>"},{"location":"DSA/6%20Linked%20List/#reorder-list","title":"Reorder List","text":"<pre><code>/**\n * Definition for singly-linked list.\n * public class ListNode {\n * int val;\n * ListNode next;\n * ListNode() {}\n * ListNode(int val) { this.val = val; }\n * ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public void reorderList(ListNode head) {\n        if (head == null || head.next == null) {\n            return;\n        }\n        ListNode slow = head, fast = head, prev = null, l1 = head;\n        while (fast != null &amp;&amp; fast.next != null) {\n            prev = slow;\n            slow = slow.next;\n            fast = fast.next.next;\n        }\n        prev.next = null;\n        ListNode l2 = reverse(slow);\n        merge(l1, l2);\n\n    }\n\n    ListNode reverse(ListNode head) {\n        ListNode curr = head, next = null, prev = null;\n        while (curr != null) {\n            next = curr.next;\n            curr.next = prev;\n            prev = curr;\n            curr = next;\n        }\n        return prev;\n    }\n\n    void merge(ListNode l1, ListNode l2) {\n        while (l1 != null) {\n            ListNode n1 = l1.next, n2 = l2.next;\n            l1.next = l2;\n            if (n1 == null) {\n                break;\n            }\n            l2.next = n1;\n            l1 = n1;\n            l2 = n2;\n        }\n\n    }\n}\n</code></pre>"},{"location":"DSA/6%20Linked%20List/#remove-nth-node-from-end-of-list","title":"Remove Nth Node From End of List","text":"<pre><code>/**\n * Definition for singly-linked list.\n * public class ListNode {\n * int val;\n * ListNode next;\n * ListNode() {}\n * ListNode(int val) { this.val = val; }\n * ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode removeNthFromEnd(ListNode head, int n) {\n\n        ListNode slow = head, fast = head;\n        for (int count = 0; count &lt; n; count++) {\n            fast = fast.next;\n        }\n        if (fast == null)\n            return head.next;\n        while (fast.next != null) {\n            fast = fast.next;\n            slow = slow.next;\n        }\n\n        slow.next = slow.next.next;\n\n        return head;\n    }\n}\n</code></pre>"},{"location":"DSA/6%20Linked%20List/#copy-list-with-random-pointer","title":"Copy List With Random Pointer","text":"<pre><code>/*\n// Definition for a Node.\nclass Node {\n    int val;\n    Node next;\n    Node random;\n\n    public Node(int val) {\n        this.val = val;\n        this.next = null;\n        this.random = null;\n    }\n}\n*/\n\nclass Solution {\n    public Node copyRandomList(Node head) {\n        if (head == null)\n            return null;\n        Map&lt;Node, Node&gt; map = new HashMap&lt;Node, Node&gt;();\n        Node node = head;\n        while (node != null) {\n            map.put(node, new Node(node.val));\n            node = node.next;\n        }\n        node = head;\n        while (node != null) {\n            map.get(node).next = map.get(node.next);\n            map.get(node).random = map.get(node.random);\n            node = node.next;\n        }\n        return map.get(head);\n    }\n}\n</code></pre>"},{"location":"DSA/6%20Linked%20List/#add-two-numbers","title":"Add Two Numbers","text":"<pre><code>/**\n * Definition for singly-linked list.\n * public class ListNode {\n * int val;\n * ListNode next;\n * ListNode() {}\n * ListNode(int val) { this.val = val; }\n * ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        ListNode dummy = new ListNode(0);\n        ListNode curr = dummy;\n        int carry = 0;\n        while (l1 != null || l2 != null || carry == 1) {\n            int sum = 0;\n            if (l1 != null) {\n                sum += l1.val;\n                l1 = l1.next;\n            }\n            if (l2 != null) {\n                sum += l2.val;\n                l2 = l2.next;\n            }\n            sum += carry;\n            curr.next = new ListNode(sum % 10);\n            curr = curr.next;\n            carry = sum / 10;\n        }\n        return dummy.next;\n    }\n}\n</code></pre>"},{"location":"DSA/6%20Linked%20List/#linked-list-cycle","title":"Linked List Cycle","text":"<pre><code>/**\n * Definition for singly-linked list.\n * class ListNode {\n * int val;\n * ListNode next;\n * ListNode(int x) {\n * val = x;\n * next = null;\n * }\n * }\n */\npublic class Solution {\n    public boolean hasCycle(ListNode head) {\n        ListNode slow = head, fast = head;\n        while (fast != null &amp;&amp; fast.next != null) {\n            slow = slow.next;\n            fast = fast.next.next;\n            if (slow == fast) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n</code></pre>"},{"location":"DSA/6%20Linked%20List/#find-the-duplicate-number","title":"Find The Duplicate Number","text":"<pre><code>class Solution {\n    public int findDuplicate(int[] nums) {\n        int[] arr = new int[nums.length];\n        for (int num : nums) {\n            if (arr[num] == 0) {\n                arr[num]++;\n            } else {\n                return num;\n            }\n        }\n        return -1;\n    }\n}\n</code></pre>"},{"location":"DSA/6%20Linked%20List/#lru-cache","title":"LRU Cache","text":"<pre><code>class LRUCache {\n    LinkedHashMap&lt;Integer, Integer&gt; cache;\n    int capacity;\n\n    public LRUCache(int capacity) {\n        this.capacity = capacity;\n        cache = new LinkedHashMap&lt;Integer, Integer&gt;();\n    }\n\n    public void put(int key, int value) {\n        if (cache.containsKey(key)) {\n            cache.remove(key);\n            cache.put(key, value);\n        } else {\n            cache.put(key, value);\n            int size = cache.size();\n            if (size &gt; capacity) {\n                int oldest = cache.keySet().iterator().next();\n                cache.remove(oldest);\n            }\n        }\n    }\n\n    public int get(int key) {\n        if (cache.containsKey(key)) {\n            int k = (int) cache.get(key);\n            cache.remove(key);\n            cache.put(key, k);\n            return k;\n        }\n        return -1;\n    }\n}\n</code></pre>"},{"location":"DSA/6%20Linked%20List/#merge-k-sorted-lists","title":"Merge K Sorted Lists","text":"<pre><code>/**\n * Definition for singly-linked list.\n * public class ListNode {\n * int val;\n * ListNode next;\n * ListNode() {}\n * ListNode(int val) { this.val = val; }\n * ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode mergeKLists(ListNode[] lists) {\n        PriorityQueue&lt;ListNode&gt; pq = new PriorityQueue&lt;ListNode&gt;((o1, o2) -&gt; o1.val - o2.val);\n        ListNode dummy = new ListNode(-1);\n        ListNode head = dummy;\n        for (ListNode list : lists) {\n            while (list != null) {\n                pq.add(list);\n                list = list.next;\n            }\n        }\n        while (!pq.isEmpty()) {\n            dummy.next = pq.poll();\n            dummy = dummy.next;\n            dummy.next = null;\n        }\n        return head.next;\n    }\n}\n</code></pre>"},{"location":"DSA/6%20Linked%20List/#reverse-nodes-in-k-group","title":"Reverse Nodes In K Group","text":"<pre><code>/**\n * Definition for singly-linked list.\n * public class ListNode {\n * int val;\n * ListNode next;\n * ListNode() {}\n * ListNode(int val) { this.val = val; }\n * ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode reverseKGroup(ListNode head, int k) {\n        ListNode curr = head, prev = null, temp = head;\n        for (int i = 0; i &lt; k; i++, temp = temp.next) {\n            if (temp == null) {\n                return head;\n            }\n        }\n        for (int i = 0; i &lt; k; i++) {\n            temp = curr.next;\n            curr.next = prev;\n            prev = curr;\n            curr = temp;\n        }\n        head.next = reverseKGroup(curr, k);\n        return prev;\n    }\n}\n</code></pre>"},{"location":"DSA/7%20Trees/","title":"7. Trees","text":""},{"location":"DSA/7%20Trees/#invert-binary-tree","title":"Invert Binary Tree","text":"<pre><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n * int val;\n * TreeNode left;\n * TreeNode right;\n * TreeNode() {}\n * TreeNode(int val) { this.val = val; }\n * TreeNode(int val, TreeNode left, TreeNode right) {\n * this.val = val;\n * this.left = left;\n * this.right = right;\n * }\n * }\n */\nclass Solution {\n    public TreeNode invertTree(TreeNode root) {\n        if (root == null) {\n            return root;\n        }\n        invertTree(root.left);\n        invertTree(root.right);\n        TreeNode temp = root.left;\n        root.left = root.right;\n        root.right = temp;\n\n        return root;\n\n    }\n}\n</code></pre>"},{"location":"DSA/7%20Trees/#maximum-depth-of-binary-tree","title":"Maximum Depth of Binary Tree","text":"<pre><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int maxDepth(TreeNode root) {\n        if(root==null) return 0;\n        int left=maxDepth(root.left);\n        int right=maxDepth(root.right);\n        return Math.max(left,right)+1;\n    }\n}\n</code></pre>"},{"location":"DSA/7%20Trees/#diameter-of-binary-tree","title":"Diameter of Binary Tree","text":"<pre><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n * int val;\n * TreeNode left;\n * TreeNode right;\n * TreeNode() {}\n * TreeNode(int val) { this.val = val; }\n * TreeNode(int val, TreeNode left, TreeNode right) {\n * this.val = val;\n * this.left = left;\n * this.right = right;\n * }\n * }\n */\nclass Solution {\n    private int max = 0;\n\n    public int diameterOfBinaryTree(TreeNode root) {\n        maxDepth(root);\n        return max;\n    }\n\n    public int maxDepth(TreeNode root) {\n        if (root == null)\n            return 0;\n        int l = maxDepth(root.left);\n        int r = maxDepth(root.right);\n        max = Math.max(max, l + r);\n        return Math.max(l, r) + 1;\n    }\n}\n</code></pre>"},{"location":"DSA/7%20Trees/#balanced-binary-tree","title":"Balanced Binary Tree","text":"<pre><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n * int val;\n * TreeNode left;\n * TreeNode right;\n * TreeNode() {}\n * TreeNode(int val) { this.val = val; }\n * TreeNode(int val, TreeNode left, TreeNode right) {\n * this.val = val;\n * this.left = left;\n * this.right = right;\n * }\n * }\n */\nclass Solution {\n    private boolean result = true;\n\n    public boolean isBalanced(TreeNode root) {\n        maxDepth(root);\n        return result;\n    }\n\n    public int maxDepth(TreeNode root) {\n        if (root == null)\n            return 0;\n        int l = maxDepth(root.left);\n        int r = maxDepth(root.right);\n        if (Math.abs(l - r) &gt; 1) {\n            result = false;\n        }\n        return Math.max(l, r) + 1;\n\n    }\n}\n</code></pre>"},{"location":"DSA/7%20Trees/#same-tree","title":"Same Tree","text":"<pre><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isSameTree(TreeNode p, TreeNode q) {\n        if(p==null &amp;&amp;q==null) return true;\n        if(p==null ||q==null||p.val!=q.val) return false;\n        return isSameTree(p.left, q.left) &amp;&amp; isSameTree(p.right, q.right) ;\n    }\n}\n</code></pre>"},{"location":"DSA/7%20Trees/#subtree-of-another-tree","title":"Subtree of Another Tree","text":"<pre><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isSubtree(TreeNode s, TreeNode t) {\n        if(s==null) return false;\n        if(isSame(s,t)) return true;\n        return isSubtree( s.left, t) ||isSubtree( s.right, t) ;\n    }\n    public boolean isSame(TreeNode s, TreeNode t){\n        if(s==null &amp;&amp; t==null)return true;\n        if(s==null || t==null || s.val!=t.val)return false;\n        return isSame(s.left,t.left)&amp;&amp;isSame(s.right,t.right) ;\n    }\n}\n</code></pre>"},{"location":"DSA/7%20Trees/#lowest-common-ancestor-of-a-binary-search-tree","title":"Lowest Common Ancestor of a Binary Search Tree","text":"<pre><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n * int val;\n * TreeNode left;\n * TreeNode right;\n * TreeNode(int x) { val = x; }\n * }\n */\n\nclass Solution {\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        if (root == null)\n            return null;\n        if (p.val &lt; root.val &amp;&amp; q.val &lt; root.val)\n            return lowestCommonAncestor(root.left, p, q);\n        else if (p.val &gt; root.val &amp;&amp; q.val &gt; root.val)\n            return lowestCommonAncestor(root.right, p, q);\n        else\n            return root;\n    }\n}\n</code></pre>"},{"location":"DSA/7%20Trees/#binary-tree-level-order-traversal","title":"Binary Tree Level Order Traversal","text":"<pre><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n * int val;\n * TreeNode left;\n * TreeNode right;\n * TreeNode() {}\n * TreeNode(int val) { this.val = val; }\n * TreeNode(int val, TreeNode left, TreeNode right) {\n * this.val = val;\n * this.left = left;\n * this.right = right;\n * }\n * }\n */\nclass Solution {\n    public List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) {\n        List&lt;List&lt;Integer&gt;&gt; al = new ArrayList&lt;&gt;();\n\n        bfs(root, 0, al);\n        return al;\n    }\n\n    public static void bfs(TreeNode root, int l, List&lt;List&lt;Integer&gt;&gt; al) {\n        if (root == null)\n            return;\n        if (al.size() == l) {\n            List&lt;Integer&gt; li = new ArrayList&lt;&gt;();\n            li.add(root.val);\n            al.add(li);\n        } else {\n            al.get(l).add(root.val);\n        }\n        bfs(root.left, l + 1, al);\n        bfs(root.right, l + 1, al);\n    }\n}\n</code></pre>"},{"location":"DSA/7%20Trees/#binary-tree-right-side-view","title":"Binary Tree Right Side View","text":"<pre><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n * int val;\n * TreeNode left;\n * TreeNode right;\n * TreeNode() {}\n * TreeNode(int val) { this.val = val; }\n * TreeNode(int val, TreeNode left, TreeNode right) {\n * this.val = val;\n * this.left = left;\n * this.right = right;\n * }\n * }\n */\nclass Solution {\n\n    public List&lt;Integer&gt; rightSideView(TreeNode root) {\n        List&lt;Integer&gt; ans = new ArrayList&lt;Integer&gt;();\n        dfs(root, 0, ans);\n        return ans;\n    }\n\n    public static void dfs(TreeNode root, int l, List&lt;Integer&gt; ans) {\n        if (root == null)\n            return;\n        if (ans.size() == l)\n            ans.add(root.val);\n        dfs(root.right, l + 1, ans);\n        dfs(root.left, l + 1, ans);\n    }\n}\n</code></pre>"},{"location":"DSA/7%20Trees/#count-good-nodes-in-binary-tree","title":"Count Good Nodes In Binary Tree","text":"<pre><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n * int val;\n * TreeNode left;\n * TreeNode right;\n * TreeNode() {}\n * TreeNode(int val) { this.val = val; }\n * TreeNode(int val, TreeNode left, TreeNode right) {\n * this.val = val;\n * this.left = left;\n * this.right = right;\n * }\n * }\n */\nclass Solution {\n    private static int good;\n\n    public int goodNodes(TreeNode root) {\n        good = 0;\n        dfs(root, Integer.MIN_VALUE);\n        return good;\n    }\n\n    public static void dfs(TreeNode root, int max) {\n        if (root == null)\n            return;\n        if (root.val &gt;= max)\n            good++;\n        max = Math.max(max, root.val);\n        dfs(root.left, max);\n        dfs(root.right, max);\n    }\n}\n</code></pre>"},{"location":"DSA/7%20Trees/#validate-binary-search-tree","title":"Validate Binary Search Tree","text":"<pre><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n * int val;\n * TreeNode left;\n * TreeNode right;\n * TreeNode() {}\n * TreeNode(int val) { this.val = val; }\n * TreeNode(int val, TreeNode left, TreeNode right) {\n * this.val = val;\n * this.left = left;\n * this.right = right;\n * }\n * }\n */\nclass Solution {\n    public boolean isValidBST(TreeNode root) {\n        return isValidBST(root, Long.MIN_VALUE, Long.MAX_VALUE);\n    }\n\n    public boolean isValidBST(TreeNode root, Long min, Long max) {\n        if (root == null)\n            return true;\n        if (root.val &lt;= min || root.val &gt;= max)\n            return false;\n        return isValidBST(root.left, min, (long) root.val) &amp;&amp; isValidBST(root.right, (long) root.val, max);\n    }\n}\n</code></pre>"},{"location":"DSA/7%20Trees/#kth-smallest-element-in-a-bst","title":"Kth Smallest Element In a Bst","text":"<pre><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n * int val;\n * TreeNode left;\n * TreeNode right;\n * TreeNode() {}\n * TreeNode(int val) { this.val = val; }\n * TreeNode(int val, TreeNode left, TreeNode right) {\n * this.val = val;\n * this.left = left;\n * this.right = right;\n * }\n * }\n */\nclass Solution {\n    int count = 0, result = Integer.MIN_VALUE;\n\n    public int kthSmallest(TreeNode root, int k) {\n        traverse(root, k);\n        return result;\n    }\n\n    public void traverse(TreeNode root, int k) {\n        if (root == null)\n            return;\n        traverse(root.left, k);\n        count++;\n        if (count == k) {\n            result = root.val;\n            // return;\n        }\n        traverse(root.right, k);\n    }\n}\n</code></pre>"},{"location":"DSA/7%20Trees/#construct-binary-tree-from-preorder-and-inorder-traversal","title":"Construct Binary Tree From Preorder And Inorder Traversal","text":"<pre><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n * int val;\n * TreeNode left;\n * TreeNode right;\n * TreeNode() {}\n * TreeNode(int val) { this.val = val; }\n * TreeNode(int val, TreeNode left, TreeNode right) {\n * this.val = val;\n * this.left = left;\n * this.right = right;\n * }\n * }\n */\nclass Solution {\n    public TreeNode buildTree(int[] preorder, int[] inorder) {\n        if (preorder == null || preorder.length == 0 || inorder == null || inorder.length == 0) {\n            return null;\n        }\n\n        TreeNode root = new TreeNode(preorder[0]);\n        int breakindex = -1;\n        for (int i = 0; i &lt; inorder.length; i++) {\n            if (inorder[i] == preorder[0]) {\n                breakindex = i;\n                break;\n            }\n        }\n        int[] subleftpre = Arrays.copyOfRange(preorder, 1, breakindex + 1);\n        int[] subleftin = Arrays.copyOfRange(inorder, 0, breakindex);\n        int[] subrightpre = Arrays.copyOfRange(preorder, breakindex + 1, preorder.length);\n        int[] subrightin = Arrays.copyOfRange(inorder, breakindex + 1, inorder.length);\n        root.left = buildTree(subleftpre, subleftin);\n        root.right = buildTree(subrightpre, subrightin);\n        return root;\n    }\n}\n</code></pre>"},{"location":"DSA/7%20Trees/#binary-tree-maximum-path-sum","title":"Binary Tree Maximum Path Sum","text":"<pre><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n * int val;\n * TreeNode left;\n * TreeNode right;\n * TreeNode() {}\n * TreeNode(int val) { this.val = val; }\n * TreeNode(int val, TreeNode left, TreeNode right) {\n * this.val = val;\n * this.left = left;\n * this.right = right;\n * }\n * }\n */\nclass Solution {\n    int maxVal;\n\n    public int maxPathSum(TreeNode root) {\n        maxVal = Integer.MIN_VALUE;\n        maxPathDown(root);\n        return maxVal;\n    }\n\n    public int maxPathDown(TreeNode root) {\n        if (root == null)\n            return 0;\n        int left = Math.max(0, maxPathDown(root.left));\n        int right = Math.max(0, maxPathDown(root.right));\n        maxVal = Math.max(maxVal, left + right + root.val);\n        return Math.max(left, right) + root.val;\n    }\n}\n</code></pre>"},{"location":"DSA/7%20Trees/#serialize-and-deserialize-binary-tree","title":"Serialize And Deserialize Binary Tree","text":"<pre><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\npublic class Codec {\n\n    // Encodes a tree to a single string.\n    public String serialize(TreeNode root) {\n        if(root==null)return \"#\";\n        return root.val+\",\"+serialize(root.left)+\",\"+serialize(root.right);\n    }\n\n    // Decodes your encoded data to tree.\n    public TreeNode deserialize(String data) {\n        Queue&lt;String&gt; queue=new LinkedList&lt;&gt;(Arrays.asList(data.split(\",\")));\n        return helper(queue);\n    }\n    public TreeNode helper(Queue&lt;String&gt; queue){\n        String val=queue.poll();\n        if(val.equals(\"#\")) return null;\n        TreeNode root=new TreeNode(Integer.valueOf(val));\n        root.left=helper(queue);\n        root.right=helper(queue);\n        return root;\n\n\n    } \n}\n\n// Your Codec object will be instantiated and called as such:\n// Codec ser = new Codec();\n// Codec deser = new Codec();\n// TreeNode ans = deser.deserialize(ser.serialize(root));\n</code></pre>"},{"location":"DSA/8%20Tries/","title":"8. Tries","text":""},{"location":"DSA/8%20Tries/#implement-trie-prefix-tree","title":"Implement Trie Prefix Tree","text":"<pre><code>class TrieNode{\n    boolean isWord;\n    TrieNode[] children;\n    public TrieNode(){\n        isWord=false;\n        children=new TrieNode[26];\n    }\n}\nclass Trie {\n    TrieNode root;\n    public Trie() {\n        root=new TrieNode();\n    }\n\n    public void insert(String word) {\n        TrieNode node=root;\n        for(char c:word.toCharArray()){\n            int index=c-'a';\n            if(node.children[index]==null){\n                node.children[index]=new TrieNode();\n            }\n            node=node.children[index];\n        }\n        node.isWord=true;\n    }\n\n    public boolean search(String word) {\n        TrieNode node=root;\n        for(char c:word.toCharArray()){\n            int index=c-'a';\n            if(node.children[index]==null){\n                return false;\n            }\n            node=node.children[index];\n        }\n        return node.isWord;\n    }\n\n    public boolean startsWith(String prefix) {\n        TrieNode node=root;\n        for(char c:prefix.toCharArray()){\n            int index=c-'a';\n            if(node.children[index]==null){\n                return false;\n            }\n            node=node.children[index];\n        }\n        return true;\n    }\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie obj = new Trie();\n * obj.insert(word);\n * boolean param_2 = obj.search(word);\n * boolean param_3 = obj.startsWith(prefix);\n */\n</code></pre>"},{"location":"DSA/8%20Tries/#design-add-and-search-words-data-structure","title":"Design Add And Search Words Data Structure","text":"<pre><code>class WordDictionary {\n    boolean isWord;\n    WordDictionary[] children;\n    public WordDictionary() {\n        isWord=false;\n        children=new WordDictionary[26];\n    }\n\n    public void addWord(String word) {\n        WordDictionary node=this;\n        for(char c:word.toCharArray()){\n            int index=c-'a';\n\n            if(node.children[index]==null){\n                node.children[index]=new WordDictionary();\n            }\n            node=node.children[index];\n        }\n        node.isWord=true;\n    }\n\n    public boolean search(String word) {\n        WordDictionary node=this;\n        for(int i=0;i&lt;word.length();i++){\n            char c=word.charAt(i);\n            if(c=='.'){\n                for(WordDictionary child:node.children){\n                    if(child!=null){\n\n                        if(child.search( word.substring(i+1))){\n                            return true;\n                        }\n                    } \n                }\n                return false;\n            }else{\n               int index=c-'a'; \n               if(node.children[index]==null){\n                    return false;\n                }\n                node=node.children[index];\n            }\n        }\n\n        return node!=null&amp;&amp;node.isWord;\n    }\n}\n\n/**\n * Your WordDictionary object will be instantiated and called as such:\n * WordDictionary obj = new WordDictionary();\n * obj.addWord(word);\n * boolean param_2 = obj.search(word);\n */\n</code></pre>"},{"location":"DSA/8%20Tries/#word-search-ii","title":"Word Search II","text":"<pre><code>class Solution {\n    public List&lt;String&gt; findWords(char[][] board, String[] words) {\n        List&lt;String&gt; res = new ArrayList&lt;String&gt;();\n        Trie root = buildTrie(words);\n        for (int i = 0; i &lt; board.length; i++) {\n            for (int j = 0; j &lt; board[0].length; j++) {\n                dfs(board, i, j, root, res);\n            }\n        }\n        return res;\n\n    }\n\n    private void dfs(char[][] board, int i, int j, Trie root, List&lt;String&gt; res) {\n        if (i &lt; 0 || i &gt;= board.length || j &lt; 0 || j &gt;= board[0].length || board[i][j] == '#'\n                || root.children[board[i][j] - 'a'] == null)\n            return;\n        char c = board[i][j];\n        root = root.children[c - 'a'];\n        if (root.word != null) {\n            res.add(root.word);\n            root.word = null;\n        }\n        board[i][j] = '#';\n        dfs(board, i - 1, j, root, res);\n        dfs(board, i + 1, j, root, res);\n        dfs(board, i, j - 1, root, res);\n        dfs(board, i, j + 1, root, res);\n        board[i][j] = c;\n    }\n\n    private Trie buildTrie(String[] words) {\n        Trie root = new Trie();\n        for (String word : words) {\n            Trie temp = root;\n            for (char c : word.toCharArray()) {\n                int index = c - 'a';\n                if (temp.children[index] == null) {\n                    temp.children[index] = new Trie();\n                }\n                temp = temp.children[index];\n            }\n            temp.word = word;\n        }\n        return root;\n\n    }\n}\n\nclass Trie {\n    Trie[] children = new Trie[26];\n    String word;\n}\n</code></pre>"},{"location":"DSA/9%20Heap%20Priority%20Queue/","title":"9. Heap / Priority Queue","text":""},{"location":"DSA/9%20Heap%20Priority%20Queue/#kth-largest-element-in-a-stream","title":"Kth Largest Element In a Stream","text":"<pre><code>class KthLargest {\n    PriorityQueue&lt;Integer&gt; q;\n    int k;\n\n    public KthLargest(int k, int[] nums) {\n        this.q = new PriorityQueue&lt;&gt;(k);\n        this.k = k;\n        for (int val : nums) {\n            add(val);\n        }\n    }\n\n    public int add(int val) {\n        if (q.size() &lt; k) {\n            q.offer(val);\n        } else if (q.peek() &lt; val) {\n            q.poll();\n            q.offer(val);\n        }\n        return q.peek();\n    }\n}\n\n/**\n * Your KthLargest object will be instantiated and called as such:\n * KthLargest obj = new KthLargest(k, nums);\n * int param_1 = obj.add(val);\n */\n</code></pre>"},{"location":"DSA/9%20Heap%20Priority%20Queue/#last-stone-weight","title":"Last Stone Weight","text":"<pre><code>class Solution {\n    PriorityQueue&lt;Integer&gt; q;\n\n    public int lastStoneWeight(int[] stones) {\n        q = new PriorityQueue&lt;Integer&gt;(Collections.reverseOrder());\n        for (int stone : stones) {\n            q.offer(stone);\n        }\n\n        while (q.size() &gt; 1) {\n            q.offer(q.poll() - q.poll());\n\n        }\n        return q.peek();\n    }\n}\n</code></pre>"},{"location":"DSA/9%20Heap%20Priority%20Queue/#k-closest-points-to-origin","title":"K Closest Points to Origin","text":"<pre><code>class Solution {\n    public int[][] kClosest(int[][] points, int k) {\n        Arrays.sort(points, Comparator.comparing(point -&gt; point[0] * point[0] + point[1] * point[1]));\n\n        return Arrays.copyOfRange(points, 0, k);\n    }\n}\n</code></pre>"},{"location":"DSA/9%20Heap%20Priority%20Queue/#kth-largest-element-in-an-array","title":"Kth Largest Element In An Array","text":"<pre><code>class Solution {\n    public int findKthLargest(int[] nums, int k) {\n        PriorityQueue&lt;Integer&gt; q = new PriorityQueue&lt;Integer&gt;(k);\n        for (int num : nums) {\n            if (q.size() &lt; k) {\n                q.offer(num);\n            } else {\n                if (num &gt; q.peek()) {\n                    q.poll();\n                    q.offer(num);\n                }\n            }\n        }\n        return q.peek();\n\n    }\n}\n</code></pre>"},{"location":"DSA/9%20Heap%20Priority%20Queue/#task-scheduler","title":"Task Scheduler","text":"<pre><code>class Solution {\n    public int leastInterval(char[] tasks, int n) {\n        int[] count = new int[26];\n        int max = 0;\n        int maxcount = 0;\n        for (char c : tasks) {\n            count[c - 'A']++;\n            max = Math.max(max, count[c - 'A']);\n        }\n        for (int i : count) {\n            if (i == max) {\n                maxcount++;\n            }\n        }\n        return Math.max(tasks.length, (max - 1) * (n + 1) + maxcount);\n    }\n}\n</code></pre>"},{"location":"DSA/9%20Heap%20Priority%20Queue/#design-twitter","title":"Design Twitter","text":"<pre><code>class Tweet {\n    int tweetId;\n    int userId;\n\n    public Tweet(int t, int u) {\n        tweetId = t;\n        userId = u;\n    }\n}\n\nclass User {\n    int userId;\n    HashSet&lt;Integer&gt; follows;\n\n    public User(int u) {\n        userId = u;\n        follows = new HashSet&lt;&gt;();\n    }\n}\n\nclass Twitter {\n    ArrayList&lt;Tweet&gt; tweets;\n    HashMap&lt;Integer, User&gt; users;\n\n    public Twitter() {\n        tweets = new ArrayList&lt;Tweet&gt;();\n        users = new HashMap&lt;Integer, User&gt;();\n    }\n\n    public void postTweet(int userId, int tweetId) {\n        if (!users.containsKey(userId)) {\n            users.put(userId, new User(userId));\n        }\n        tweets.add(new Tweet(tweetId, userId));\n    }\n\n    public List&lt;Integer&gt; getNewsFeed(int userId) {\n        if (!users.containsKey(userId)) {\n            users.put(userId, new User(userId));\n        }\n        int i = tweets.size() - 1;\n        List&lt;Integer&gt; ans = new ArrayList&lt;Integer&gt;();\n        while (i &gt;= 0 &amp;&amp; ans.size() &lt; 10) {\n            if (tweets.get(i).userId == userId || users.get(userId).follows.contains(tweets.get(i).userId))\n                ans.add(tweets.get(i).tweetId);\n            i--;\n        }\n        return ans;\n    }\n\n    public void follow(int followerId, int followeeId) {\n        if (!users.containsKey(followerId)) {\n            users.put(followerId, new User(followerId));\n        }\n        if (!users.containsKey(followeeId)) {\n            users.put(followeeId, new User(followeeId));\n        }\n        User user = users.get(followerId);\n        user.follows.add(followeeId);\n    }\n\n    public void unfollow(int followerId, int followeeId) {\n        if (!users.containsKey(followerId)) {\n            users.put(followerId, new User(followerId));\n        }\n        if (!users.containsKey(followeeId)) {\n            users.put(followeeId, new User(followeeId));\n        }\n        User user = users.get(followerId);\n        user.follows.remove(followeeId);\n    }\n}\n\n/**\n * Your Twitter object will be instantiated and called as such:\n * Twitter obj = new Twitter();\n * obj.postTweet(userId,tweetId);\n * List&lt;Integer&gt; param_2 = obj.getNewsFeed(userId);\n * obj.follow(followerId,followeeId);\n * obj.unfollow(followerId,followeeId);\n */\n</code></pre>"},{"location":"DSA/9%20Heap%20Priority%20Queue/#find-median-from-data-stream","title":"Find Median From Data Stream","text":"<pre><code>class MedianFinder {\n    PriorityQueue&lt;Integer&gt; MaxHeap;\n    PriorityQueue&lt;Integer&gt; MinHeap;\n    public MedianFinder() {\n        MaxHeap=new PriorityQueue&lt;&gt;(Collections.reverseOrder());\n        MinHeap=new PriorityQueue&lt;&gt;();\n    }\n\n    public void addNum(int num) {\n        MaxHeap.offer(num);\n        MinHeap.offer(MaxHeap.poll());\n        if(MinHeap.size()&gt;MaxHeap.size()){\n            MaxHeap.offer(MinHeap.poll());\n        }\n    }\n\n    public double findMedian() {\n        if(MaxHeap.size()&gt;MinHeap.size()){\n            return MaxHeap.peek()*1.0;\n        }\n        return (MaxHeap.peek()+MinHeap.peek())/2.0;\n    }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * MedianFinder obj = new MedianFinder();\n * obj.addNum(num);\n * double param_2 = obj.findMedian();\n */\n</code></pre>"},{"location":"Docker/Dockerfiles/","title":"Docker Demo [Communication Between Containers]","text":""},{"location":"Docker/Dockerfiles/#docker-container-with-ubuntu-datasocket","title":"Docker container with ubuntu-DataSocket","text":""},{"location":"Docker/Dockerfiles/#container-1","title":"Container 1","text":"<p><code>Container1App.java</code> Container1App.java<pre><code>import java.net.*;\n\npublic class Container1App {\n    public static void main(String[] args) throws Exception {\n        DatagramSocket socket = new DatagramSocket();\n        byte[] sendData = \"Hello, Rahul here!\".getBytes();\n        InetAddress receiverAddress = InetAddress.getByName(\"container2\");\n\n        DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, receiverAddress, 9876);\n        socket.send(sendPacket);\n        socket.close();\n    }\n}\n</code></pre> <code>Dockerfile</code> Dockerfile1<pre><code># Dockerfile for Container 1\nFROM ubuntu:latest\n\nRUN apt-get update &amp;&amp; \\\n    apt-get install -y openjdk-11-jdk\n\nWORKDIR /usr/src/app\nCOPY Container1App.java .\n\nRUN javac Container1App.java\n\nCMD [\"java\", \"Container1App\"]\n</code></pre></p>"},{"location":"Docker/Dockerfiles/#container-2","title":"Container 2","text":"<p><code>Container2App.java</code> Container2App.java<pre><code>import java.net.*;\n\npublic class Container2App {\n    public static void main(String[] args) throws Exception {\n        DatagramSocket socket = new DatagramSocket(9876);\n        byte[] receiveData = new byte[1024];\n\n        DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);\n        socket.receive(receivePacket);\n        String receivedMessage = new String(receivePacket.getData(), 0, receivePacket.getLength());\n\n        System.out.println(\"Message received from Container 1: \" + receivedMessage);\n        socket.close();\n    }\n}\n</code></pre></p> <p><code>Dockerfile</code> Dockerfile2<pre><code># Dockerfile for Container 2\nFROM ubuntu:latest\n\nRUN apt-get update &amp;&amp; \\\n    apt-get install -y openjdk-11-jdk\n\nWORKDIR /usr/src/app\nCOPY Container2App.java .\n\nRUN javac Container2App.java\n\nCMD [\"java\", \"Container2App\"]\n</code></pre> - Follow this commands in terminal runReceiver.sh<pre><code>docker build -t container1-image -f Dockerfile1 . ;\ndocker build -t container2-image -f Dockerfile2 . ;\n\ndocker network create \"mynetwork\" ;\n\ndocker run --name container2 --network mynetwork -it container2-image ;\n</code></pre></p> runSender.sh<pre><code>docker run --name container1 --network mynetwork -it container1-image ;\n</code></pre>"},{"location":"Docker/docker-assignment/","title":"Docker Training","text":""},{"location":"Docker/docker-assignment/#basic-docker-commands","title":"Basic Docker commands","text":""},{"location":"Docker/docker-assignment/#assignment-1","title":"Assignment 1","text":"<p><code>ubuntu@ubuntu-VM:~$ docker container list</code></p> <pre><code>CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ docker search ubuntu</code></p> <pre><code>NAME                             DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED\nubuntu                           Ubuntu is a Debian-based Linux operating sys\u2026   16508     [OK]\nwebsphere-liberty                WebSphere Liberty multi-architecture images \u2026   297       [OK]\nopen-liberty                     Open Liberty multi-architecture images based\u2026   62        [OK]\nneurodebian                      NeuroDebian provides neuroscience research s\u2026   105       [OK]\nubuntu-debootstrap               DEPRECATED; use \"ubuntu\" instead                52        [OK]\nubuntu-upstart                   DEPRECATED, as is Upstart (find other proces\u2026   115       [OK]\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ docker search ubuntu/nginx</code></p> <pre><code>NAME           DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED\nubuntu/nginx   Nginx, a high-performance reverse proxy &amp; we\u2026   102           \n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ docker search nginx</code></p> <pre><code>NAME                               DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED\nnginx                              Official build of Nginx.                        19145     [OK]\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ docker run --h</code>elp</p> <pre><code>Usage:  docker run [OPTIONS] IMAGE [COMMAND] [ARG...]\n\nCreate and run a new container from an image\n\nAliases:\n  docker container run, docker run\n\nOptions:\n      --add-host list   \n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ docker run -it --name 25octnew pikaso /bin/bash</code></p> <pre><code>Unable to find image 'pikaso:latest' locally\ndocker: Error response from daemon: pull access denied for pikaso, repository does not exist or may require 'docker login': denied: requested access to the resource is denied.\nSee 'docker run --help'.\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ docker build pikaso</code></p> <pre><code>[+] Building 0.0s (0/0)\nERROR: unable to prepare context: path \"pikaso\" not found\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ docker ps -al</code></p> <pre><code>CONTAINER ID   IMAGE     COMMAND       CREATED       STATUS                   PORTS     NAMES\nb406446b3169   ubuntu    \"/bin/bash\"   9 hours ago   Exited (0) 9 hours ago             24octparas\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ docker rmi --force b406446b3169</code></p> <pre><code>Error response from daemon: No such image: b406446b3169:latest\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ docker images</code></p> <pre><code>REPOSITORY                  TAG       IMAGE ID       CREATED        SIZE\nparaspandey04/24octubuntu   latest    c1f1586671ba   9 hours ago    77.8MB\nparaspandey04/23octubuntu   latest    aa26ae99eab8   9 hours ago    77.8MB\nubuntu                      latest    e4c58958181a   2 weeks ago    77.8MB\nkicbase/stable              v0.0.37   01c0ce65fff7   9 months ago   1.15GB\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ docker rmi --force c1f1586671ba</code></p> <pre><code>Untagged: paraspandey04/24octubuntu:latest\nUntagged: paraspandey04/24octubuntu@sha256:806789d07b9750f11b5b1e1138a7f740881054f14e7231b55c759415795704b2\nDeleted: sha256:c1f1586671ba03d47b2a3e774aa5afa8ea2fe1a6748eaf653d31c959fc217792\nDeleted: sha256:ff64dfdf6ce97f06c2006f6f72277f49c6f100794e13f2ecaf6bf486054c4340\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ docker images</code></p> <pre><code>REPOSITORY                  TAG       IMAGE ID       CREATED        SIZE\nparaspandey04/23octubuntu   latest    aa26ae99eab8   9 hours ago    77.8MB\nubuntu                      latest    e4c58958181a   2 weeks ago    77.8MB\nkicbase/stable              v0.0.37   01c0ce65fff7   9 months ago   1.15GB\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ docker push --help</code></p> <pre><code>Usage:  docker push [OPTIONS] NAME[:TAG]\n\nUpload an image to a registry\n\nAliases:\n  docker image push, docker push\n\nOptions:\n  -a, --all-tags                Push all \n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ docker run -it --name 25octparas ubuntu /bin/bash</code></p> <pre><code>root@7a55807663ee:/# ls\n\nbin   dev  home  lib32  libx32  mnt  proc  run   srv  tmp  var\nboot  etc  lib   lib64  media   opt  root  sbin  sys  usr\n\nroot@7a55807663ee:/# apt update\n\nGet:1 http://archive.ubuntu.com/ubuntu jammy InRelease [270 kB]\nGet:2 http://archive.ubuntu.com/ubuntu jammy-updates InRelease [119 kB]\nGet:3 http://archive.ubuntu.com/ubuntu jammy-backports InRelease [109 kB]\nGet:4 http://archive.ubuntu.com/ubuntu jammy/universe amd64 Packages [17.5 MB]\nGet:5 http://security.ubuntu.com/ubuntu jammy-security InRelease [110 kB]\nGet:6 http://security.ubuntu.com/ubuntu jammy-security/restricted amd64 Packages [1305 kB]\nGet:7 http://archive.ubuntu.com/ubuntu jammy/restricted amd64 Packages [164 kB]\n\nroot@7a55807663ee:/# echo \"hi paras\"&gt;&gt;25oct23.txt\nroot@7a55807663ee:/# hostname\n\n7a55807663ee\n\nroot@7a55807663ee:/# exit\nexit\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ docker commit 25octparas paraspandey04/25octubuntu</code></p> <pre><code>sha256:1d9bde2b7a478bf51806db30732b9cbd43532468dc0e0d77b33c49ebfe307cda\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ docker images</code></p> <pre><code>REPOSITORY                  TAG       IMAGE ID       CREATED         SIZE\nparaspandey04/25octubuntu   latest    1d9bde2b7a47   7 seconds ago   123MB\nparaspandey04/23octubuntu   latest    aa26ae99eab8   10 hours ago    77.8MB\nubuntu                      latest    e4c58958181a   2 weeks ago     77.8MB\nkicbase/stable              v0.0.37   01c0ce65fff7   9 months ago    1.15GB\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ docker login</code></p> <pre><code>Authenticating with existing credentials...\nWARNING! Your password will be stored unencrypted in /home/ubuntu/.docker/config.json.\nConfigure a credential helper to remove this warning. See\nhttps://docs.docker.com/engine/reference/commandline/login/#credentials-store\n\nLogin Succeeded\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ docker push paraspandey04/25octunutu</code></p> <pre><code>Using default tag: latest\nThe push refers to repository [docker.io/paraspandey04/25octunutu]\nAn image does not exist locally with the tag: paraspandey04/25octunutu\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ docker push paraspandey04/25octubuntu</code></p> <pre><code>Using default tag: latest\nThe push refers to repository [docker.io/paraspandey04/25octubuntu]\n84b566e7ec57: Pushed\n256d88da4185: Mounted from paraspandey04/24octubuntu\nlatest: digest: sha256:ccb05ca244687455093495d799d4cecff0c29fe9659f887bdeb732dd36379bf0 size: 741\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ docker images</code></p> <pre><code>REPOSITORY                  TAG       IMAGE ID       CREATED        SIZE\nparaspandey04/24octubuntu   latest    c1f1586671ba   9 hours ago    77.8MB\nparaspandey04/23octubuntu   latest    aa26ae99eab8   9 hours ago    77.8MB\nubuntu                      latest    e4c58958181a   2 weeks ago    77.8MB\nkicbase/stable              v0.0.37   01c0ce65fff7   9 months ago   1.15GB\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ docker rmi --force c1f1586671ba</code></p> <pre><code>Untagged: paraspandey04/24octubuntu:latest\nUntagged: paraspandey04/24octubuntu@sha256:806789d07b9750f11b5b1e1138a7f740881054f14e7231b55c759415795704b2\nDeleted: sha256:c1f1586671ba03d47b2a3e774aa5afa8ea2fe1a6748eaf653d31c959fc217792\nDeleted: sha256:ff64dfdf6ce97f06c2006f6f72277f49c6f100794e13f2ecaf6bf486054c4340\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ docker images</code></p> <pre><code>REPOSITORY                  TAG       IMAGE ID       CREATED        SIZE\nparaspandey04/23octubuntu   latest    aa26ae99eab8   9 hours ago    77.8MB\nubuntu                      latest    e4c58958181a   2 weeks ago    77.8MB\nkicbase/stable              v0.0.37   01c0ce65fff7   9 months ago   1.15GB\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ docker push --help</code></p> <pre><code>Usage:  docker push [OPTIONS] NAME[:TAG]\n</code></pre>"},{"location":"Docker/docker-assignment/#assignment-2","title":"Assignment 2","text":"<p><code>ubuntu@ubuntu-VM:~$ docker images</code></p> <pre><code>REPOSITORY                  TAG       IMAGE ID       CREATED          SIZE\nparaspandey04/25oct         latest    13b5f42d2dc3   25 minutes ago   77.8MB\nparaspandey04/newrepo04     latest    13b5f42d2dc3   25 minutes ago   77.8MB\nparaspandey04/25octubuntu   latest    1d9bde2b7a47   2 hours ago      123MB\nparaspandey04/23octubuntu   latest    aa26ae99eab8   11 hours ago     77.8MB\nubuntu                      latest    e4c58958181a   2 weeks ago      77.8MB\nkicbase/stable              v0.0.37   01c0ce65fff7   9 months ago     1.15GB\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ docker history --help</code></p> <pre><code>Usage:  docker history [OPTIONS] IMAGE\n\nShow the history of an image\n\nAliases:\n  docker image history, docker history\n\nOptions:\n      --format string   Format output using a custom template:\n                        'table':            Print output in table\n                        format with column headers (default)\n                        'table TEMPLATE':   Print output in table\n                        format using the given Go template\n                        'json':             Print in JSON format\n                        'TEMPLATE':         Print output using\n                        the given Go template.\n                        Refer to\n                        https://docs.docker.com/go/formatting/\n                        for more information about formatting\n                        output with templates\n  -H, --human           Print sizes and dates in human readable\n                        format (default true)\n      --no-trunc        Don't truncate output\n  -q, --quiet           Only show image IDs\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ docker history paraspandey04/25octubuntu --format 'json'</code> <pre><code>{\"Comment\":\"\",\"CreatedAt\":\"2023-10-25T09:46:05+05:30\",\"CreatedBy\":\"/bin/bash\",\"CreatedSince\":\"2 hours ago\",\"ID\":\"1d9bde2b7a47\",\"Size\":\"45.2MB\"}\n{\"Comment\":\"\",\"CreatedAt\":\"2023-10-05T13:03:32+05:30\",\"CreatedBy\":\"/bin/sh -c #(nop)  CMD [\\\"/bin/bash\\\"]\",\"CreatedSince\":\"2 weeks ago\",\"ID\":\"e4c58958181a\",\"Size\":\"0B\"}\n{\"Comment\":\"\",\"CreatedAt\":\"2023-10-05T13:03:32+05:30\",\"CreatedBy\":\"/bin/sh -c #(nop) ADD file:63d5ab3ef0aab308c\u2026\",\"CreatedSince\":\"2 weeks ago\",\"ID\":\"\\u003cmissing\\u003e\",\"Size\":\"77.8MB\"}\n{\"Comment\":\"\",\"CreatedAt\":\"2023-10-05T13:03:30+05:30\",\"CreatedBy\":\"/bin/sh -c #(nop)  LABEL org.opencontainers.\u2026\",\"CreatedSince\":\"2 weeks ago\",\"ID\":\"\\u003cmissing\\u003e\",\"Size\":\"0B\"}\n{\"Comment\":\"\",\"CreatedAt\":\"2023-10-05T13:03:30+05:30\",\"CreatedBy\":\"/bin/sh -c #(nop)  LABEL org.opencontainers.\u2026\",\"CreatedSince\":\"2 weeks ago\",\"ID\":\"\\u003cmissing\\u003e\",\"Size\":\"0B\"}\n{\"Comment\":\"\",\"CreatedAt\":\"2023-10-05T13:03:30+05:30\",\"CreatedBy\":\"/bin/sh -c #(nop)  ARG LAUNCHPAD_BUILD_ARCH\",\"CreatedSince\":\"2 weeks ago\",\"ID\":\"\\u003cmissing\\u003e\",\"Size\":\"0B\"}\n{\"Comment\":\"\",\"CreatedAt\":\"2023-10-05T13:03:30+05:30\",\"CreatedBy\":\"/bin/sh -c #(nop)  ARG RELEASE\",\"CreatedSince\":\"2 weeks ago\",\"ID\":\"\\u003cmissing\\u003e\",\"Size\":\"0B\"}\n</code></pre></p> <p><code>ubuntu@ubuntu-VM:~$ docker search paraspandey04/25octubuntu</code></p> <pre><code>NAME                        DESCRIPTION   STARS     OFFICIAL   AUTOMATED\nparaspandey04/25octubuntu \n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ docker inspect --help</code></p> <pre><code>Usage:  docker inspect [OPTIONS] NAME|ID [NAME|ID...]\n\nReturn low-level information on Docker objects\n\nOptions:\n  -f, --format string   Format output using a custom template:\n                        'json':             Print in JSON format\n                        'TEMPLATE':         Print output using\n                        the given Go template.\n                        Refer to\n                        https://docs.docker.com/go/formatting/\n                        for more information about formatting\n                        output with templates\n  -s, --size            Display total file sizes if the type is\n                        container\n      --type string     Return JSON for specified type\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ docker image inspect paraspandey04/25octubuntu</code></p> <pre><code>[\n    {\n        \"Id\": \"sha256:1d9bde2b7a478bf51806db30732b9cbd43532468dc0e0d77b33c49ebfe307cda\",\n        \"RepoTags\": [\n            \"paraspandey04/25octubuntu:latest\"\n        ],\n        \"RepoDigests\": [\n            \"paraspandey04/25octubuntu@sha256:ccb05ca244687455093495d799d4cecff0c29fe9659f887bdeb732dd36379bf0\"\n        ],\n        \"Parent\": \"sha256:e4c58958181a5925816faa528ce959e487632f4cfd192f8132f71b32df2744b4\",\n        \"Comment\": \"\",\n        \"Created\": \"2023-10-25T04:16:05.84881267Z\",\n        \"Container\": \"7a55807663eedaab0488847b3adeb128d1b6e091aefbe74e5098c7bc479b9104\",\n        \"ContainerConfig\": {\n            \"Hostname\": \"7a55807663ee\",\n            \"Domainname\": \"\",\n            \"User\": \"\",\n            \"AttachStdin\": true,\n            \"AttachStdout\": true,\n            \"AttachStderr\": true,\n            \"Tty\": true,\n            \"OpenStdin\": true,\n            \"StdinOnce\": true,\n            \"Env\": [\n                \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n            ],\n            \"Cmd\": [\n                \"/bin/bash\"\n            ],\n            \"Image\": \"ubuntu\",\n            \"Volumes\": null,\n            \"WorkingDir\": \"\",\n            \"Entrypoint\": null,\n            \"OnBuild\": null,\n            \"Labels\": {\n                \"org.opencontainers.image.ref.name\": \"ubuntu\",\n                \"org.opencontainers.image.version\": \"22.04\"\n            }\n        },\n        \"DockerVersion\": \"23.0.1\",\n        \"Author\": \"\",\n        \"Config\": {\n            \"Hostname\": \"7a55807663ee\",\n            \"Domainname\": \"\",\n            \"User\": \"\",\n            \"AttachStdin\": true,\n            \"AttachStdout\": true,\n            \"AttachStderr\": true,\n            \"Tty\": true,\n            \"OpenStdin\": true,\n            \"StdinOnce\": true,\n            \"Env\": [\n                \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n            ],\n            \"Cmd\": [\n                \"/bin/bash\"\n            ],\n            \"Image\": \"ubuntu\",\n            \"Volumes\": null,\n            \"WorkingDir\": \"\",\n            \"Entrypoint\": null,\n            \"OnBuild\": null,\n            \"Labels\": {\n                \"org.opencontainers.image.ref.name\": \"ubuntu\",\n                \"org.opencontainers.image.version\": \"22.04\"\n            }\n        },\n        \"Architecture\": \"amd64\",\n        \"Os\": \"linux\",\n        \"Size\": 122991619,\n        \"VirtualSize\": 122991619,\n        \"GraphDriver\": {\n            \"Data\": {\n                \"LowerDir\": \"/var/lib/docker/overlay2/9f79621309a55b03b4bd403c6d483f54975dbd7452027d8cff9485b9169e7d91/diff\",\n                \"MergedDir\": \"/var/lib/docker/overlay2/bc779cae4ab14e7449297690d1704482b01106c7bc63c305f399d6a32a98383c/merged\",\n                \"UpperDir\": \"/var/lib/docker/overlay2/bc779cae4ab14e7449297690d1704482b01106c7bc63c305f399d6a32a98383c/diff\",\n                \"WorkDir\": \"/var/lib/docker/overlay2/bc779cae4ab14e7449297690d1704482b01106c7bc63c305f399d6a32a98383c/work\"\n            },\n            \"Name\": \"overlay2\"\n        },\n        \"RootFS\": {\n            \"Type\": \"layers\",\n            \"Layers\": [\n                \"sha256:256d88da41857db513b95b50ba9a9b28491b58c954e25477d5dad8abb465430b\",\n                \"sha256:84b566e7ec57a167b0fb3fb4efe3ed67fe31c9034776c1a767f5f7959798c649\"\n            ]\n        },\n        \"Metadata\": {\n            \"LastTagTime\": \"2023-10-25T09:46:06.05604374+05:30\"\n        }\n    }\n]\n</code></pre>"},{"location":"Docker/docker-handson/","title":"<code>Docker hands-on demo:</code>","text":"<p>Create a Docker Container: 1. Choose an application (e.g., a simple web server). 2. Write a Dockerfile to define the container. 3. Build the Docker image. 4. Run the container.</p>"},{"location":"Docker/docker-handson/#server","title":"<code>Server</code>","text":""},{"location":"Docker/docker-handson/#dockerfile","title":"<code>Dockerfile</code>","text":"<pre><code>FROM ubuntu\nRUN apt-get update\nRUN apt-get -y install redis\nEXPOSE 6379\nCMD [\"redis-server\", \"--protected-mode\", \"no\"]\n</code></pre>"},{"location":"Docker/docker-handson/#networkdetails","title":"<code>networkdetails</code>","text":"<pre><code>[\n    {\n        \"Name\": \"my-net\",\n        \"Id\": \"8dcbda9dddb0245c0aec1e0427415550ce2794a06eebb29efeae2e6e99e32754\",\n        \"Created\": \"2022-09-16T17:27:41.319816937Z\",\n        \"Scope\": \"local\",\n        \"Driver\": \"bridge\",\n        \"EnableIPv6\": false,\n        \"IPAM\": {\n            \"Driver\": \"default\",\n            \"Options\": {},\n            \"Config\": [\n                {\n                    \"Subnet\": \"172.18.0.0/16\",\n                    \"Gateway\": \"172.18.0.1\"\n                }\n            ]\n        },\n        \"Internal\": false,\n        \"Attachable\": false,\n        \"Ingress\": false,\n        \"ConfigFrom\": {\n            \"Network\": \"\"\n        },\n        \"ConfigOnly\": false,\n        \"Containers\": {},\n        \"Options\": {},\n        \"Labels\": {}\n    }\n]\n</code></pre>"},{"location":"Docker/docker-handson/#run","title":"<code>run</code>","text":"<pre><code>docker network create \"my-net\" ;\ndocker network inspect my-net &gt; networkdetails ;\necho created network ;\ndocker build -t server . ;\ndocker run -d --network my-net --network-alias red-server server ;\n\n#add the optional -p 8080:6379 if you want to expose the redis port to host (in run command)\n</code></pre> <pre><code># Run follwind commands in terminal\ncd Server\n./run\n</code></pre>"},{"location":"Docker/docker-handson/#client","title":"Client","text":""},{"location":"Docker/docker-handson/#dockerfile_1","title":"<code>Dockerfile</code>","text":"<pre><code>FROM alpine:3.10\n\nRUN apk add --update nodejs npm\n\nRUN addgroup -S node &amp;&amp; adduser -S node -G node\n\nUSER node\n\nRUN mkdir /home/node/code\n\nWORKDIR /home/node/code\n\nEXPOSE 8080\n\nCOPY --chown=node:node package-lock.json package.json ./\n\nRUN npm ci\n\nCOPY --chown=node:node . .\n\nCMD [\"node\", \"index.js\"]\n</code></pre>"},{"location":"Docker/docker-handson/#indexjs","title":"<code>index.js</code>","text":"<pre><code>const express = require('express')\nconst app = express();\nconst axios = require('axios');\nconst Redis = require('redis');\nconst { json } = require('express');\n\nconst port = 8080\n\n// const fetchApiData= async()=&gt;{\n//     const data=await axios.get('https://api.covidtracking.com/v1/states/current.json')\n//     console.log(\"api req sned\")\n//     return dat\n// }\nconst redisClinet = Redis.createClient(\n  {\n    host: process.env.REDIS_HOST,\n    port: \"6379\",\n  }\n)\n\n\napp.get('/', async (req, res) =&gt; {\n\n  redisClinet.get('coronadata', async (err, cdata) =&gt; {\n    if (err) console.error();\n    if (cdata != null) {\n      console.log(\"cache-hit\")\n      return res.json(JSON.parse(cdata))\n    }\n    else {\n      console.log('cache-miss')\n      const { data } = await axios.get(\"https://api.covidtracking.com/v1/states/current.json\")\n      redisClinet.setex('coronadata', 3600, JSON.stringify(data))\n      res.json(data)\n    }\n\n  })\n\n})\n\napp.listen(port, () =&gt; {\n  console.log(`App listening on port ${port}`);\n})\n\n\n\n// This function lets u exit the container by exiting node when u press Ctrl+C\nprocess.on('SIGINT', function () {\n  console.log(\"\\nGracefully shutting down from SIGINT (Ctrl-C)\");\n  // some other closing procedures go here\n  process.exit(0);\n});\n</code></pre>"},{"location":"Docker/docker-handson/#packagejson","title":"<code>package.json</code>","text":"<pre><code>{\n  \"name\": \"corona_cache\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"axios\": \"^0.27.2\",\n    \"express\": \"^4.18.1\",\n    \"redis\": \"^3.0.0\"\n  }\n}\n</code></pre>"},{"location":"Docker/docker-handson/#run_1","title":"<code>run</code>","text":"<p><pre><code>docker build -t client . ;\necho Image built. Now Running....\ndocker run -it -p 5000:8080  --network my-net -e REDIS_HOST=red-server client\n</code></pre> <pre><code># Run follwind commands in terminal\ncd Client\n./run\n</code></pre> - Now click on port URL.</p>"},{"location":"Docker/docker/","title":"Docker","text":"<ul> <li>Docker is a platform that enables developers to automate the deployment of applications inside lightweight, portable containers. </li> <li>Containers are a form of virtualization that allows applications and their dependencies to be packaged together, ensuring consistency across different environments. </li> <li>Docker containers encapsulate everything needed to run an application, including the code, runtime, libraries, and system tools.</li> </ul> <p>Key components of Docker include:</p> <ul> <li>Docker Engine: The core of Docker, responsible for creating and managing containers.</li> <li> <p>Docker Images: Containers are created from Docker images, which are lightweight, standalone, and executable packages that include application code, runtime, libraries, and system tools.</p> </li> <li> <p>Dockerfile: A text file that contains instructions for building a Docker image. It specifies the base image, application code, dependencies, and other configuration settings.</p> </li> <li> <p>Docker Hub: A cloud-based registry service that allows you to share and distribute Docker images. Docker Hub is also a repository of pre-built images that developers can use.</p> </li> <li> <p>Docker Compose: A tool for defining and running multi-container Docker applications. It uses a YAML file to configure the application's services, networks, and volumes.</p> </li> </ul>"},{"location":"Docker/docker/#docker-management-commands","title":"Docker Management Commands:","text":"<ol> <li> <p>Display Docker version information: <pre><code>docker version\n</code></pre></p> </li> <li> <p>Display system-wide Docker information: <pre><code>docker info\n</code></pre></p> </li> <li> <p>Show help for a specific command or general Docker help: <pre><code>docker --help\n# or\ndocker &lt;command&gt; --help\n# Example: docker run --help\n</code></pre></p> </li> </ol>"},{"location":"Docker/docker/#image-commands","title":"Image Commands:","text":"<ol> <li> <p>List all images on the local machine: <pre><code>docker images\n</code></pre></p> </li> <li> <p>Search for an image on Docker Hub: <pre><code>docker search &lt;term&gt;\n# Example: docker search ubuntu\n</code></pre></p> </li> <li> <p>Download an image from Docker Hub: <pre><code>docker pull &lt;image&gt;\n# Example: docker pull ubuntu:latest\n</code></pre></p> </li> <li> <p>Build an image from a Dockerfile: <pre><code>docker build -t &lt;tag&gt; &lt;path&gt;\n# Example: docker build -t my_image:latest .\n</code></pre></p> </li> <li> <p>Show the history of an image, including its layers: <pre><code>docker history &lt;image&gt;\n# Example: docker history ubuntu:latest\n</code></pre></p> </li> <li> <p>Display detailed information about an image: <pre><code>docker inspect &lt;image&gt;\n# Example: docker inspect my_image:latest\n</code></pre></p> </li> <li> <p>Tag an image with a new name and optionally a new tag: <pre><code>docker tag &lt;source_image&gt;:&lt;source_tag&gt; &lt;target_image&gt;:&lt;target_tag&gt;\n# Example: docker tag my_image:latest my_repository/my_image:1.0\n</code></pre></p> </li> <li> <p>Remove one or more images: <pre><code>docker rmi &lt;image&gt;\n# Example: docker rmi my_image:latest\n</code></pre></p> </li> <li> <p>Remove all dangling images: <pre><code>docker image prune\n</code></pre></p> </li> <li> <p>Remove all unused images, not just dangling ones: <pre><code>docker image prune -a\n</code></pre></p> </li> </ol> <p>These commands cover a range of image-related tasks, from managing and inspecting images to searching for new ones on Docker Hub.</p>"},{"location":"Docker/docker/#container-lifecycle","title":"Container Lifecycle:","text":"<ol> <li> <p>List running containers: <pre><code>docker ps\n</code></pre></p> </li> <li> <p>List all containers, including stopped ones: <pre><code>docker ps -a\n</code></pre></p> </li> <li> <p>Create and start a container from an image: <pre><code>docker run &lt;options&gt; &lt;image&gt;\n# Example: docker run -it ubuntu:latest /bin/bash\n</code></pre></p> </li> <li> <p>Start a stopped container: <pre><code>docker start &lt;container&gt;\n# Example: docker start my_container\n</code></pre></p> </li> <li> <p>Stop a running container: <pre><code>docker stop &lt;container&gt;\n# Example: docker stop my_container\n</code></pre></p> </li> <li> <p>Restart a container: <pre><code>docker restart &lt;container&gt;\n# Example: docker restart my_container\n</code></pre></p> </li> <li> <p>Pause all processes within a container: <pre><code>docker pause &lt;container&gt;\n# Example: docker pause my_container\n</code></pre></p> </li> <li> <p>Unpause a paused container: <pre><code>docker unpause &lt;container&gt;\n# Example: docker unpause my_container\n</code></pre></p> </li> <li> <p>Run a command in a running container: <pre><code>docker exec -it &lt;container&gt; &lt;command&gt;\n# Example: docker exec -it my_container /bin/bash\n</code></pre></p> </li> <li> <p>Attach to a running container's process: <pre><code>docker attach &lt;container&gt;\n# Example: docker attach my_container\n</code></pre></p> </li> </ol>"},{"location":"Docker/docker/#container-information","title":"Container Information:","text":"<ol> <li> <p>Display detailed information about a container: <pre><code>docker inspect &lt;container&gt;\n# Example: docker inspect my_container\n</code></pre></p> </li> <li> <p>Fetch the logs of a container: <pre><code>docker logs &lt;container&gt;\n# Example: docker logs my_container\n</code></pre></p> </li> <li> <p>Display the running processes of a container: <pre><code>docker top &lt;container&gt;\n# Example: docker top my_container\n</code></pre></p> </li> <li> <p>Display a live stream of container resource usage statistics: <pre><code>docker stats &lt;container&gt;\n# Example: docker stats my_container\n</code></pre></p> </li> </ol>"},{"location":"Docker/docker/#container-removal","title":"Container Removal:","text":"<ol> <li> <p>Remove one or more containers: <pre><code>docker rm &lt;container&gt;\n# Example: docker rm my_container\n</code></pre></p> </li> <li> <p>Forcefully remove a running container: <pre><code>docker rm -f &lt;container&gt;\n# Example: docker rm -f my_container\n</code></pre></p> </li> <li> <p>Remove all stopped containers: <pre><code>docker container prune\n</code></pre></p> </li> <li> <p>Remove all containers forcefully: <pre><code>docker rm $(docker ps -a -q)\n</code></pre></p> </li> </ol>"},{"location":"Docker/docker/#copying-files","title":"Copying Files:","text":"<ol> <li> <p>Copy files or directories between a container and the local filesystem: <pre><code>docker cp &lt;source_path&gt; &lt;container&gt;:&lt;destination_path&gt;\n# Example: docker cp ./local_file.txt my_container:/app/\n</code></pre></p> </li> <li> <p>Copy files or directories from a container to the local filesystem: <pre><code>docker cp &lt;container&gt;:&lt;source_path&gt; &lt;destination_path&gt;\n# Example: docker cp my_container:/app/container_file.txt ./local_destination/\n</code></pre></p> </li> </ol>"},{"location":"Docker/docker/#resource-management","title":"Resource Management:","text":"<ol> <li> <p>Display a live stream of system resource usage statistics for all containers: <pre><code>docker stats\n</code></pre></p> </li> <li> <p>Update container resource limits: <pre><code>docker update &lt;container&gt; --memory &lt;limit&gt;\n# Example: docker update my_container --memory 512m\n</code></pre></p> </li> </ol>"},{"location":"Docker/docker/#network-commands","title":"Network Commands:","text":""},{"location":"Docker/docker/#list-networks","title":"List Networks:","text":"<ol> <li>List all networks.</li> </ol> <pre><code>docker network ls\n</code></pre> <ol> <li>Display detailed information about a network.</li> </ol> <pre><code>docker network inspect bridge\n</code></pre>"},{"location":"Docker/docker/#create-and-remove-networks","title":"Create and Remove Networks:","text":"<ol> <li>Create a network.</li> </ol> <pre><code>docker network create my_network\n</code></pre> <ol> <li>Remove one or more networks.</li> </ol> <pre><code>docker network rm my_network\n</code></pre>"},{"location":"Docker/docker/#connect-containers-to-networks","title":"Connect Containers to Networks:","text":"<ol> <li>Connect a container to a network.</li> </ol> <pre><code>docker network connect my_network my_container\n</code></pre> <ol> <li>Disconnect a container from a network.</li> </ol> <pre><code>docker network disconnect my_network my_container\n</code></pre>"},{"location":"Docker/docker/#bridge-network","title":"Bridge Network:","text":"<ol> <li>Create a user-defined bridge network.</li> </ol> <pre><code>docker network create --driver bridge my_bridge_network\n</code></pre>"},{"location":"Docker/docker/#host-network","title":"Host Network:","text":"<ol> <li>Run a container on the host's network stack.</li> </ol> <pre><code>docker run --network host my_image\n</code></pre>"},{"location":"Docker/docker/#overlay-network-swarm-mode","title":"Overlay Network (Swarm Mode):","text":"<ol> <li>Create an overlay network for Swarm services.</li> </ol> <pre><code>docker network create --driver overlay my_overlay_network\n</code></pre>"},{"location":"Docker/docker/#macvlan-network","title":"Macvlan Network:","text":"<ol> <li> <p>Create a Macvlan network.</p> <pre><code>docker network create --driver macvlan --subnet=192.168.1.0/24 --gateway=192.168.1.1 -o parent=eth0 my_macvlan_network\n</code></pre> </li> </ol>"},{"location":"Docker/docker/#volume-commands","title":"Volume Commands:","text":"<p>Here are some commonly used Docker volume commands:</p> <ol> <li>Create a named volume.</li> </ol> <pre><code>docker volume create my_volume\n</code></pre> <ol> <li>List all volumes.</li> </ol> <pre><code>docker volume ls\n</code></pre> <ol> <li>Display detailed information about a volume.</li> </ol> <pre><code>docker volume inspect my_volume\n</code></pre> <ol> <li>Remove one or more volumes.</li> </ol> <pre><code>docker volume rm my_volume\n</code></pre> <ol> <li>Remove all unused volumes.</li> </ol> <pre><code>docker volume prune\n</code></pre>"},{"location":"Docker/docker/#docker-compose-commands","title":"Docker Compose Commands:","text":"<p>Docker Compose is a tool for defining and running multi-container Docker applications. Here are some common Docker Compose commands along with examples:</p>"},{"location":"Docker/docker/#basic-commands","title":"Basic Commands:","text":"<ol> <li> <p>Start services defined in a <code>docker-compose.yml</code> file.</p> <pre><code>docker-compose up\n</code></pre> </li> <li> <p>Stop and remove containers, networks, and volumes defined in a <code>docker-compose.yml</code> file.</p> <pre><code>docker-compose down\n</code></pre> </li> <li> <p>List containers.</p> <pre><code>docker-compose ps\n</code></pre> </li> </ol>"},{"location":"Docker/docker/#service-management","title":"Service Management:","text":"<ol> <li> <p>Start services.</p> <pre><code>docker-compose start\n</code></pre> </li> <li> <p>Stop services.</p> <pre><code>docker-compose stop\n</code></pre> </li> <li> <p>Restart services.</p> <pre><code>docker-compose restart\n</code></pre> </li> </ol>"},{"location":"Docker/docker/#logs-and-status","title":"Logs and Status:","text":"<ol> <li> <p>View output from services.</p> <pre><code>docker-compose logs\n</code></pre> </li> <li> <p>Display the running processes.</p> <pre><code>docker-compose top\n</code></pre> </li> </ol>"},{"location":"Docker/docker/#scale-services","title":"Scale Services:","text":"<ol> <li> <p>Scale services to a specified number of instances.</p> <pre><code>docker-compose scale web=3\n</code></pre> </li> </ol>"},{"location":"Docker/docker/#executing-commands-in-services","title":"Executing Commands in Services:","text":"<ol> <li> <p>Run a command in a service.</p> <pre><code>docker-compose exec web ls -l\n</code></pre> </li> </ol>"},{"location":"Docker/docker/#building-and-rebuilding","title":"Building and Rebuilding:","text":"<ol> <li> <p>Build or rebuild services.</p> <pre><code>docker-compose build\n</code></pre> </li> <li> <p>Pull service images.</p> <pre><code>docker-compose pull\n</code></pre> </li> </ol>"},{"location":"Docker/docker/#managing-networks-and-volumes","title":"Managing Networks and Volumes:","text":"<ol> <li> <p>List networks.</p> <pre><code>docker-compose network ls\n</code></pre> </li> <li> <p>List volumes.</p> <pre><code>docker-compose volume ls\n</code></pre> </li> </ol>"},{"location":"Docker/docker/#other-commands","title":"Other Commands:","text":"<ol> <li> <p>Validate and view the compose file.</p> <pre><code>docker-compose config\n</code></pre> </li> <li> <p>Receive real-time events from services.</p> <pre><code>docker-compose events\n</code></pre> </li> </ol> <p>These are some common Docker Compose commands, but there are more options and variations available. Always refer to the official Docker Compose documentation for the most up-to-date and detailed information: Docker Compose CLI documentation.</p>"},{"location":"Docker/docker/#system-commands","title":"System Commands:","text":""},{"location":"Docker/docker/#docker-system-information","title":"Docker System Information:","text":"<ol> <li> <p><code>docker version</code></p> </li> <li> <p><code>docker info</code></p> </li> </ol>"},{"location":"Docker/docker/#docker-system-management","title":"Docker System Management:","text":"<ol> <li> <p><code>docker system df</code></p> </li> <li> <p><code>docker system prune</code></p> </li> <li> <p>This command can be used to remove unused data such as stopped containers, networks not used by any container, dangling images, and build cache.</p> </li> <li> <p><code>docker system prune -a</code></p> </li> <li>This variant of the <code>prune</code> command removes all unused containers, networks, and images not just dangling ones.</li> </ol>"},{"location":"Docker/docker/#docker-system-events","title":"Docker System Events:","text":"<ol> <li><code>docker events</code></li> <li>This command displays real-time events from the server.</li> </ol>"},{"location":"Docker/docker/#docker-system-shell-access","title":"Docker System Shell Access:","text":"<ol> <li><code>docker system exec -it &lt;container&gt; &lt;command&gt;</code></li> <li>Example: <code>docker exec -it my_container sh</code></li> <li>This allows you to execute a command inside a running container.</li> </ol>"},{"location":"Docker/docker/#docker-system-diagnostics","title":"Docker System Diagnostics:","text":"<ol> <li><code>docker system diagnose</code></li> <li>This command collects system information for Docker troubleshooting purposes.</li> </ol>"},{"location":"Docker/docker/#docker-system-cleanup","title":"Docker System Cleanup:","text":"<ol> <li><code>docker system prune --volumes</code></li> <li>This variant of the <code>prune</code> command also removes volumes.</li> </ol> <p>These commands provide information about the Docker system, help manage resources, and perform various maintenance tasks. Always refer to the official Docker documentation for the most up-to-date information and additional details on each command: Docker CLI documentation.</p>"},{"location":"Docker/docker/#registrylogin-commands","title":"Registry/Login Commands:","text":"<p>Docker provides commands for working with container registries, especially for logging in and out of container registries. Here are the main Docker registry/login commands along with examples:</p> <ol> <li><code>docker login</code>: Log in to a Docker registry.</li> </ol> <pre><code>docker login [OPTIONS] [SERVER]\n</code></pre> <ul> <li>Example:      <pre><code>docker login myregistry.example.com\n</code></pre></li> </ul> <p>This command prompts you for a username and password to authenticate with the specified Docker registry.</p> <ol> <li><code>docker logout</code>: Log out from a Docker registry.</li> </ol> <pre><code>docker logout [SERVER]\n</code></pre> <ul> <li>Example:      <pre><code>docker logout myregistry.example.com\n</code></pre></li> </ul> <p>This command logs you out from the specified Docker registry.</p> <ol> <li><code>docker logout --all</code>: Log out from all registries.</li> </ol> <pre><code>docker logout --all\n</code></pre> <p>This command logs you out from all Docker registries that you have logged in to previously.</p> <p>These commands are useful when working with private Docker registries that require authentication. The examples assume you are using a registry with the specified server address (replace <code>myregistry.example.com</code> with the actual address of your registry).</p> <p>Remember to handle sensitive information like passwords and authentication tokens securely, especially when dealing with private registries. The <code>docker login</code> command securely stores credentials on your system for subsequent use.</p>"},{"location":"Docker/docker/#dockerfile","title":"Dockerfile","text":""},{"location":"Docker/docker/#basic-commands_1","title":"Basic Commands:","text":"<ol> <li> <p><code>FROM</code>: Specify the base image for the build.    <pre><code>FROM ubuntu:20.04\n</code></pre></p> </li> <li> <p><code>LABEL</code>: Add metadata to an image.    <pre><code>LABEL maintainer=\"your-email@example.com\"\n</code></pre></p> </li> <li> <p><code>RUN</code>: Execute a command in the container during the build.    <pre><code>RUN apt-get update &amp;&amp; apt-get install -y nginx\n</code></pre></p> </li> <li> <p><code>COPY</code>: Copy files or directories from the build context to the image.    <pre><code>COPY ./app /usr/src/app\n</code></pre></p> </li> <li> <p><code>ADD</code>: Similar to <code>COPY</code> but supports additional features like URL handling.    <pre><code>ADD http://example.com/file.tar.gz /tmp/\n</code></pre></p> </li> </ol>"},{"location":"Docker/docker/#working-directory","title":"Working Directory:","text":"<ol> <li><code>WORKDIR</code>: Set the working directory for subsequent instructions.    <pre><code>WORKDIR /usr/src/app\n</code></pre></li> </ol>"},{"location":"Docker/docker/#environment-variables","title":"Environment Variables:","text":"<ol> <li><code>ENV</code>: Set environment variables.    <pre><code>ENV NODE_ENV production\n</code></pre></li> </ol>"},{"location":"Docker/docker/#exposing-ports","title":"Exposing Ports:","text":"<ol> <li><code>EXPOSE</code>: Inform Docker that the container listens on the specified network ports.    <pre><code>EXPOSE 80/tcp\n</code></pre></li> </ol>"},{"location":"Docker/docker/#container-user","title":"Container User:","text":"<ol> <li><code>USER</code>: Set the user or UID to use when running the image.    <pre><code>USER appuser\n</code></pre></li> </ol>"},{"location":"Docker/docker/#volume","title":"Volume:","text":"<ol> <li><code>VOLUME</code>: Create a mount point and/or mark it as holding externally mounted volumes from native host or other containers.    <pre><code>VOLUME /data\n</code></pre></li> </ol>"},{"location":"Docker/docker/#entry-point-and-command","title":"Entry Point and Command:","text":"<ol> <li> <p><code>CMD</code>: Provide default arguments for the executable specified with <code>ENTRYPOINT</code>.    <pre><code>CMD [\"nginx\", \"-g\", \"daemon off;\"]\n</code></pre></p> </li> <li> <p><code>ENTRYPOINT</code>: Configure a container that will run as an executable.    <pre><code>ENTRYPOINT [\"nginx\", \"-g\", \"daemon off;\"]\n</code></pre></p> </li> </ol>"},{"location":"Docker/docker/#health-checks","title":"Health Checks:","text":"<ol> <li><code>HEALTHCHECK</code>: Check the status of the running container.    <pre><code>HEALTHCHECK --interval=5m --timeout=3s CMD curl -f http://localhost/ || exit 1\n</code></pre></li> </ol>"},{"location":"Docker/docker/#multi-stage-builds","title":"Multi-Stage Builds:","text":"<ol> <li>Multi-Stage <code>FROM</code>: Use multiple <code>FROM</code> statements in a single Dockerfile.    <pre><code>FROM builder as intermediate\nRUN build-command\n\nFROM base\nCOPY --from=intermediate /app/output /app/output\n</code></pre></li> </ol>"},{"location":"Docker/docker/#comments","title":"Comments:","text":"<ol> <li><code>#</code>: Add comments in the Dockerfile.    <pre><code># This is a comment\n</code></pre></li> </ol> <p>These are just a few examples, and Dockerfile can be quite flexible. You can refer to the official Docker documentation for a more comprehensive list of commands and their usage: Dockerfile Reference.</p>"},{"location":"Docker/docker/#docker-swarm","title":"Docker Swarm","text":"<p>Docker Swarm is a native clustering and orchestration solution for Docker, allowing you to create and manage a swarm of Docker nodes. It enables you to deploy and scale containers across multiple hosts, providing high availability and fault tolerance for your applications. In Docker Swarm, a group of Docker hosts (nodes) form a cluster and work together to manage containers.</p> <p>Here are the key concepts in Docker Swarm:</p> <ol> <li> <p>Node: A Docker host that participates in the Swarm. Nodes can be either managers or workers.</p> </li> <li> <p>Manager Node: Manages the Swarm and orchestrates the deployment of services. It also maintains the desired state of the swarm.</p> </li> <li> <p>Worker Node: Executes tasks and runs containers.</p> </li> <li> <p>Service: A definition of the tasks to execute on the manager or worker nodes. Services allow you to define the desired state of a containerized application.</p> </li> </ol> <p>Now, let's go through a basic example of setting up a Docker Swarm and deploying a service:</p>"},{"location":"Docker/docker/#step-1-initialize-swarm-on-manager-node","title":"Step 1: Initialize Swarm (On Manager Node)","text":"<p>On the manager node, initialize Docker Swarm:</p> <pre><code>docker swarm init --advertise-addr &lt;MANAGER-IP&gt;\n</code></pre> <p>This command will output a token that you can use to join other nodes to the swarm.</p>"},{"location":"Docker/docker/#step-2-join-worker-nodes-to-the-swarm","title":"Step 2: Join Worker Nodes to the Swarm","text":"<p>On each worker node, run the following command with the token obtained from the manager:</p> <pre><code>docker swarm join --token &lt;TOKEN&gt; &lt;MANAGER-IP&gt;:&lt;MANAGER-PORT&gt;\n</code></pre>"},{"location":"Docker/docker/#step-3-deploy-a-service","title":"Step 3: Deploy a Service","text":"<p>Now, you can deploy a service to the Swarm. For example, let's deploy a simple web service:</p> <pre><code>docker service create --replicas 3 -p 80:80 --name web nginx\n</code></pre> <p>This command creates a service named \"web\" with three replicas of the Nginx image, mapping port 80 on the host to port 80 on the service.</p>"},{"location":"Docker/docker/#step-4-scale-the-service","title":"Step 4: Scale the Service","text":"<p>You can scale the service by adjusting the number of replicas:</p> <pre><code>docker service scale web=5\n</code></pre> <p>This scales the \"web\" service to have five replicas.</p>"},{"location":"Docker/docker/#step-5-check-service-status","title":"Step 5: Check Service Status","text":"<p>Check the status and details of the deployed service:</p> <pre><code>docker service ls\ndocker service ps web\n</code></pre>"},{"location":"Docker/docker/#step-6-update-the-service","title":"Step 6: Update the Service","text":"<p>You can update the service by changing its configuration. For example, update the Nginx version:</p> <pre><code>docker service update --image nginx:latest web\n</code></pre> <p>This updates the \"web\" service to use the latest version of the Nginx image.</p>"},{"location":"Docker/docker/#step-7-remove-the-service-and-leave-swarm","title":"Step 7: Remove the Service and Leave Swarm","text":"<p>Remove the deployed service:</p> <pre><code>docker service rm web\n</code></pre> <p>To leave the Swarm on a node:</p> <pre><code>docker swarm leave\n</code></pre>"},{"location":"Docker/docker/#qa","title":"Q/A","text":"<pre><code>If we want to create a Docker image without using a specific base image but include Node.js and npm, you would need to manually provide the necessary files.\n\nHere's a basic example :\n\n\nDockerfile\n\n# Start from scratch (empty base image)\nFROM scratch\n\n# Add Node.js binary and npm binary\nADD node-v14.17.5-linux-x64.tar.xz /\nADD npm-v6.14.14.tar.xz /\n\n# Add your Node.js application file\nADD app.js /\n\n# Set the default command to run your application\nCMD [\"/node-v14.17.5-linux-x64/bin/node\", \"/app.js\"]\n\nWe need to manually download the Node.js and npm binaries for the desired version from the official Node.js website\n</code></pre>"},{"location":"HTML_CSS/CSS3Basics/","title":"CSS3 Basics","text":""},{"location":"HTML_CSS/CSS3Basics/#idesign","title":"iDesign","text":"<pre><code>CSS styling - color\nSean and Roger have joined the WebMakers company as interns. As they are beginners in the field, they were guided to get hands-on exposure about HTML and CSS concepts. The major client of their company was the Pink frag Event Organizer Company. The Company provides the leading event management services for birthday, wedding, corporate events and business conference.\n\nAfter their internship period, Sean and Reon's first task was to create a sample webpage for Pink frag Organizer Company. They initially used the basic black font-color for the home page which was not much appealing. Sean and Roger wants to find out the suitable font colors for the webpage but they are not so confident of implementing it.\n\nLet us explain them the usage of color attribute by creating a webpage using color attribute in CSS.\nHints : color attribute \nIt is used to change the color of the any element in which the styling is used. \nSyntax :   `&lt;h1 style=\"color:blue;\"&gt;This is a Blue Heading&lt;/h1&gt; `\n\nContent :\nH1 - Pink Frag Event Organizer\nHR\nH2 - Service Description\nP - We are indulged in offering a Promotional Event Management. These services are provided by our team of professionals as per the requirement of the client. These services are highly praised for their features like sophisticated technology, effective results and reliability. We offer these services in a definite time frame and at affordable rates.\nHR\nH2 - Features\nH5 - Customized services\nH5 - On-time completion\nH5 - Execution in tandem with clients demand\nHR\nH2 - About Us\np- Pink Frag Event is a reputed organization, which has come into being in 2009, as a Sole Proprietorship Firm, with a sole aim of achieving the trust and support of large customers. We have indulged our all endeavors towards offering trustworthy Wedding Event Management, Promotional Event Management, Birthday Party Management and many more. All our services are reliable and offered keeping the exact customers\u2019 preferences and choice in mind. To offer these services, we have hired specialized professionals, who are capable of understanding as well as accomplishing the specific customers\u2019 desires. `&lt;br /&gt;` We have adopted modern technology, to cope up with the challenges of industry. We keep all quality parameters in mind, so that we cannot make any compromise in terms of the excellence of products.\nHR\nH2 - Contact Us\nH3 - Address\np - 14/509A,Sterlin Street,Nungambakkam\nChennai - 600034.\nH3 - Mobile\np - Manager-9596645125\nH3 - Landline\np - 0422-2727272\nH3 - EMail\np - pinkfragevent123@gmail.com   pinkfragOfficial@gmail.com\n\nConstraints :\nThere must be one h1 tag with color '#356ecc' .\nThere must be four h2 tags with color '#f9b222'.\nAll tags should have seperate style attribute with color specification.\n\nNote :\nContent of the page should be present as shown in the screenshot.\nKindly refer the content which is given as a part of description.\n\nSample Screenshot 1:\n\n\n\nSample Screenshot 2:\n</code></pre> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;My First Website&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1 style=\"color:#356ecc ;\"&gt;Pink Frag Event Organizer&lt;/h1&gt;\n        &lt;hr&gt;\n        &lt;h2 style=\"color:#f9b222 ;\"&gt;Service Description&lt;/h2&gt;\n        &lt;p&gt;We are indulged in offering a Promotional Event Management. \n            These services are provided by our team of professionals as \n            per the requirement of the client. \n            These services are highly praised for their features like \n            sophisticated technology, effective results and reliability. We offer \n            these services in a definite time frame and at affordable rates.\n        &lt;/p&gt;\n        &lt;hr&gt;\n        &lt;h2 style=\"color:#f9b222 ;\"&gt; Features&lt;/h2&gt;\n        &lt;h5&gt;Customized services&lt;/h5&gt;\n        &lt;h5&gt;On-time completion&lt;/h5&gt;\n        &lt;h5&gt;Execution in tandem with clients demand&lt;/h5&gt;\n        &lt;hr&gt;\n        &lt;h2 style=\"color:#f9b222 ;\"&gt;About Us&lt;/h2&gt;\n        &lt;p&gt; Pink Frag Event is a reputed organization, \n            which has come into being in 2009, as a Sole Proprietorship\n            Firm, with a sole aim of achieving the trust and support of \n            large customers. We have indulged our all endeavors towards \n            offering trustworthy Wedding Event Management, Promotional\n            Event Management, Birthday Party Management and many more. \n            All our services are reliable and offered keeping the exact \n            customers preferences and choice in mind. To offer these \n            services, we have hired specialized professionals, who are \n            capable of understanding as well as accomplishing the specific \n            customers desires.&lt;br /&gt;\n            We have adopted modern technology, \n            to cope up with the challenges of industry. We keep all quality \n            parameters in mind, so that we cannot make any compromise in \n            terms of the excellence of products. &lt;/p&gt;\n        &lt;hr&gt;\n        &lt;h2 style=\"color:#f9b222 ;\"&gt;Contact Us&lt;/h2&gt;\n        &lt;h3&gt;Address&lt;/h3&gt;\n        &lt;p&gt;14/509A,Sterlin Street,Nungambakkam\n        Chennai - 600034.&lt;/p&gt;\n        &lt;h3&gt;Mobile&lt;/h3&gt;\n        &lt;p&gt;Manager-9596645125&lt;/p&gt;\n        &lt;h3&gt;Landline&lt;/h3&gt;\n        &lt;p&gt;0422-2727272&lt;/p&gt;\n        &lt;h3&gt;EMail&lt;/h3&gt;\n        &lt;p&gt;pinkfragevent123@gmail.com   pinkfragOfficial@gmail.com\n        &lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"HTML_CSS/CSS3Basics/#iassess","title":"iAssess","text":"<pre><code>CSS - Internal styling by id\n\n\nDesign a webpage using Internal styling by id as shown in the screenshot.\n\nSample Screenshot :\n\n\n\nConstraints :\n\n\n\nAdditional Constraints :\n\nThe webpage design shall be of internal style.\nThe content is given in the template itself.\nThe colors shall be the same as given in the constraints.\nUse the id attribute for styling the webpage.\n\nh1 titles are in pink color(#F835C0)\nh2 titles are in red color(#ff0000)\nh3 titles are in green color(#15D365)\nh5 titles are in violet color( #9F41F5)\n\nNote :\n\nContent of the page should be present as shown in the screenshot.\nKindly refer to the content which is given as a part of the description.\n\nTemplate Code :\n\nClick here to download the template code.\n</code></pre> <p>index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;My First Website&lt;/title&gt;\n        &lt;meta charset=\"UTF-8\"&gt;\n        &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n        &lt;link rel=\"stylesheet\" href=\"styles.css\" type=\"text/css\"&gt;\n\n    &lt;/head&gt;\n    &lt;body&gt;\n\n        &lt;h1 id=\"h1Tag\"&gt;Pink Frag Event Organizer&lt;/h1&gt;  \n        &lt;hr&gt;\n        &lt;h2 id=\"h2Tag\"&gt;Service Description&lt;/h2&gt;\n        &lt;p&gt;We are indulged in offering a Promotional Event Management. \n            These services are provided by our team of professionals as \n            per the requirement of the client. \n            These services are highly praised for their features like \n            sophisticated technology, effective results and reliability. We offer \n            these services in a definite time frame and at affordable rates.\n        &lt;/p&gt;\n        &lt;hr&gt;\n        &lt;h2 id=\"h2Tag\"&gt; Features&lt;/h2&gt;\n        &lt;h5 id=\"h5Tag\"&gt;Customized services&lt;/h5&gt;\n        &lt;h5 id=\"h5Tag\"&gt;On-time completion&lt;/h5&gt;\n        &lt;h5 id=\"h5Tag\"&gt;Execution in tandem with clients demand&lt;/h5&gt;\n        &lt;hr&gt;\n        &lt;h2 id=\"h2Tag\"&gt;About Us&lt;/h2&gt;\n        &lt;p&gt; Pink Frag Event is a reputed organization, \n            which has come into being in 2009, as a Sole Proprietorship\n            Firm, with a sole aim of achieving the trust and support of \n            large customers. We have indulged our all endeavors towards \n            offering trustworthy Wedding Event Management, Promotional\n            Event Management, Birthday Party Management and many more. \n            All our services are reliable and offered keeping the exact \n            customers\u2019 preferences and choice in mind. To offer these \n            services, we have hired specialized professionals, who are \n            capable of understanding as well as accomplishing the specific \n            customers\u2019 desires. We have adopted modern technology, \n            to cope up with the challenges of industry. We keep all quality \n            parameters in mind, so that we cannot make any compromise in \n            terms of the excellence of products. &lt;/p&gt;\n        &lt;hr&gt;\n        &lt;h2 id=\"h2Tag\"&gt;Contact Us&lt;/h2&gt;\n        &lt;h3 id=\"h3Tag\"&gt;Address&lt;/h3&gt;\n        &lt;p&gt;14/509A,Sterlin Street,Nungambakkam\n        Chennai - 600034.&lt;/p&gt;\n        &lt;h3 id=\"h3Tag\"&gt;Mobile&lt;/h3&gt;\n        &lt;p&gt;Manager-9596645125&lt;/p&gt;\n        &lt;h3 id=\"h3Tag\"&gt;Landline&lt;/h3&gt;\n        &lt;p&gt;0422-2727272&lt;/p&gt;\n        &lt;h3 id=\"h3Tag\"&gt;EMail&lt;/h3&gt;\n        &lt;p&gt;pinkfragevent123@gmail.com   pinkfragOfficial@gmail.com\n        &lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> styles.css<pre><code>#h1Tag{\n    color: #F835C0;\n}\n#h2Tag{\n    color:#ff0000;\n}\n#h3Tag{\n    color: #15D365;\n}\n#h5Tag{\n    color:  #9F41F5;\n}\n</code></pre></p>"},{"location":"HTML_CSS/CSS3VisualFormatting/","title":"CSS3 Visual Formatting","text":""},{"location":"HTML_CSS/CSS3VisualFormatting/#idesign","title":"iDesign","text":"<pre><code>Contact Me - Responsive\n\nJulie is a topper in her college, She is a nerd who just talks about the stuffs in the book, but she does not have a good knowledge on the technical side. She can clear all the interviews as she is brilliant in aptitude and conveying things to people, but she has a concern in getting her resume created. She wants to get through the interview process by creating a resume that stands out among the other candidates who competes with her in the interview. She decides to create a resume, so she comes across our website.\n\nOur resume-writing walks her through the entire process, from header to footer and section by section. We\u2019ll make sure Julie will convince the employer that Julie is the perfect candidate.Lets help her out in creating the webpage with layouts that she is waiting for.\n\nShe has created the contact me page , but the page is not responsive.Help her in designing the responsive Contact me page\n\nConstraints\n\nResponsive style should be present inside the style tag inside the index.html file\nTo make page responsive\n@media should have  max-width-1024px for monitor\nCSS property value  should be  width-100%;\n\n  @media should have  max-width-991px for tablet\nCSS property value  should be  width-85%;\n\n@media should have  max-width-768px for mobile phones\nCSS property value  should be  width-70%;       \nIn the mobile view ,it should display only the icons  in the li tags inside the nav tag id navbar(Refer screenshot 2)\nUse   display- none property\nIn the index.html page \nAdd meta tag  with name -viewport,content-width=device-width,initial-scale=1,shrink-to-fit=no\nNote:\n\nRefer the sample screenshot to create the web page.\n\nAdhere to the specifications given in the screenshot 3 ,4.\n\nSample Screenshot 1:\n\n\nSample Screenshot 2:\n\n\nSample Screenshot 3:\n\n\nSample Screenshot 4:\n</code></pre> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\" /&gt;\n    &lt;!--Fill Code here--&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"&gt;\n    &lt;style&gt;\n        @media (max-width: 1024px) {\n        body .main .detail-holder .form-group {\n        width: 100%;\n      }\n      nav ul li a{\n        width: 100%;\n      }\n    }\n\n    /* Styles for tablet */\n    @media (max-width: 991px) {\n        body .main .detail-holder .form-group {\n        width: 85%;\n      }\n      nav ul li a{\n        width: 85%;\n      }\n    }\n    @media (max-width: 768px) {\n        body .main .detail-holder .form-group{\n        width: 70%;\n      }\n\n      /* Hide text and only show icons */\n      nav ul li a {\n        display: none;\n      }\n\n    }\n      .container li a {\n        background-color: white;\n        display: block;\n        color: #000000;\n        font-size: .75em;\n        text-align: center;\n        padding: 1em;\n        text-decoration: none;\n      }\n      .container li a:hover {\n        background-color: green;\n\n        color: white;\n        font-size: 0.75em;\n        padding: auto;\n        text-align: center;\n        text-decoration: none;\n      }\n      .container{\n        display: flex;\n        list-style-type: none;\n        margin: 0;\n  padding: 0;\n  width: 100%;\n  justify-content: space-between;\n      }\n\n      .container li{\n        width: calc(100%/4);\n      }\n      .icon {\n        font-size: 0.7em;\n      }\n      nav ul li a img {\n        width: 1em;\n        height: 1em;\n        margin-right: 1em;\n      }\n      body {\n        background-color: #ececec;\n      }\n      .main {\n        background-color: white;\n\n        display: flex;\n        width: 50%;\n        margin-left: 20em;\n        margin-right: 20em;\n      }\n      .detail-holder {\n        margin-left: 2em;\n        margin-right: 2em;\n        padding-top: 2em;\n        padding-bottom: 2em;\n      }\n      .form-group {\n        display:inline-block;\n\n        padding: 1em 1em 1em 1em;\n      }\n      .form-group #message{\n        width: 100%;\n        height: auto;\n      }\n      #submit {\n        text-align: center;\n        text-decoration: none;\n      }\n      #navbar{\n        width: 100%;\n        background-color: white;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n    &lt;header&gt;\n      &lt;!--Fill code here--&gt;\n      &lt;nav id=\"navbar\"&gt;\n        &lt;ul class=\"container\"&gt;\n          &lt;li&gt;\n            &lt;a href=\"#\"&gt;&lt;img src=\"usericon.png\" alt=\"\" /&gt;ABOUT ME&lt;/a&gt;\n          &lt;/li&gt;\n          &lt;li&gt;\n            &lt;a href=\"#\"&gt;&lt;img src=\"icon-2.png\" alt=\"\" /&gt;RESUME&lt;/a&gt;\n          &lt;/li&gt;\n          &lt;li&gt;\n            &lt;a href=\"#\"&gt;&lt;img src=\"icon-3.png\" alt=\"\" /&gt;PORTFOLIO&lt;/a&gt;\n          &lt;/li&gt;\n          &lt;li&gt;\n            &lt;a href=\"#\"&gt;&lt;img src=\"icon-4.png\" alt=\"\" /&gt;CONTACT ME&lt;/a&gt;\n          &lt;/li&gt;\n        &lt;/ul&gt;\n      &lt;/nav&gt;\n    &lt;/header&gt;\n    &lt;br /&gt;\n    &lt;br /&gt;\n\n    &lt;div class=\"main\"&gt;\n      &lt;div class=\"detail-holder\"&gt;\n        &lt;h3&gt;CONTACT ME&lt;/h3&gt;\n        &lt;hr /&gt;\n        &lt;div&gt;\n          &lt;div class=\"form-group\"&gt;\n            &lt;label for=\"firstname\"&gt;First Name&lt;/label&gt;&lt;br /&gt;\n            &lt;input type=\"text\" id=\"firstname\" /&gt;\n          &lt;/div&gt;\n          &lt;div class=\"form-group\"&gt;\n            &lt;label for=\"lastname\"&gt;Last Name&lt;/label&gt;&lt;br /&gt;\n            &lt;input type=\"text\" id=\"lastname\" /&gt;\n          &lt;/div&gt;\n          &lt;div class=\"form-group\"&gt;\n            &lt;label for=\"dob\"&gt;Date Of Birth&lt;/label&gt;&lt;br /&gt;\n            &lt;input type=\"date\" name=\"dob\" id=\"dob\" /&gt;\n          &lt;/div&gt;\n          &lt;div class=\"form-group\"&gt;\n            &lt;label for=\"email\"&gt;Email&lt;/label&gt;&lt;br /&gt;\n            &lt;input type=\"email\" name=\"email\" id=\"email\" /&gt;\n          &lt;/div&gt;\n          &lt;div class=\"form-group\"&gt;\n            &lt;label for=\"mobile\"&gt;Mobile&lt;/label&gt;&lt;br /&gt;\n            &lt;input type=\"number\" name=\"mobile\" id=\"mobile\" maxlength=\"10\" /&gt;\n          &lt;/div&gt;\n          &lt;div class=\"form-group\"&gt;\n            &lt;label for=\"reason\"&gt;Reason&lt;/label&gt;&lt;br /&gt;\n            &lt;select name=\"reason\" id=\"reason\"&gt;\n              &lt;option value=\"business\"&gt;Business&lt;/option&gt;\n              &lt;option value=\"home\"&gt;Home&lt;/option&gt;\n            &lt;/select&gt;\n          &lt;/div&gt;\n          &lt;div class=\"form-group\"&gt;\n            &lt;label for=\"gender\"&gt;Gender&lt;/label&gt;&lt;br /&gt;\n            &lt;input type=\"radio\" name=\"gender\" id=\"male\" value=\"male\" /&gt;Male\n            &lt;input\n              type=\"radio\"\n              name=\"gender\"\n              id=\"female\"\n              value=\"female\"\n            /&gt;Female\n          &lt;/div&gt;\n          &lt;div class=\"form-group\"&gt;\n            &lt;label for=\"pmoc\"&gt;Preferred Mode Of Communication&lt;/label&gt;&lt;br /&gt;\n            &lt;input\n              type=\"checkbox\"\n              name=\"pmoc\"\n              id=\"mobile\"\n              value=\"mobile\"\n            /&gt;Mobile\n            &lt;input type=\"checkbox\" name=\"pmoc\" id=\"email\" value=\"email\" /&gt;Email\n          &lt;/div&gt;\n          &lt;div class=\"form-group\"&gt;\n            &lt;label for=\"message\"&gt;Message&lt;/label&gt;&lt;br /&gt;\n            &lt;textarea name=\"message\" id=\"message\" &gt;&lt;/textarea&gt;\n          &lt;/div&gt;\n          &lt;div&gt;\n            &lt;center&gt;\n              &lt;button type=\"submit\" id=\"submit\"&gt;Submit&lt;/button&gt;\n            &lt;/center&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"HTML_CSS/CSS3VisualFormatting/#iassess","title":"iAssess","text":"<pre><code>HTML - Transition Property\n\"Pink Frag Event Organizer\" are conducting an online contest for choosing the Best website of the year. The topic for the contest is to develop an innovative webpage for a Wedding Event. Shiyas has registered for the contest and started developing a web page with the contents related to the Wedding Event. He planned to create something new and started surfing about transition property in CSS, as it is capable of producing a transition effect in the image on hovering.\n\nBeing a beginner in designing the websites, he needs your help to finish the web page for the contest by using the transition property in CSS.\nHints :  overflow property  The CSS overflow property controls what happens to content that is too big to fit into an area. hidden - The overflow is clipped, and the rest of the content will be invisible Syntax :    overflow: visible|hidden|scroll|auto|initial|inherit;   Transition property CSS transitions allows you to change property values smoothly (from one value to another), over a given duration. The transition-timing-function property specifies the speed curve of the transition effect. ease - specifies a transition effect with a slow start, then fast, then end slowly (this is default) Syntax :    transition-property: none|all|property|initial|inherit;  width property The width property sets the width of an element. Syntax :    width: auto|value|initial|inherit;\nRefer the below gif for designing the web page. \nhttp://app.e-box.co.in/uploads/TransitionProperty.gif\n\nContent :\nh2 - Wedding Event\nimg tag with src=\"image.jpg\" class=\"image\"\nA wedding is a ceremony where two people or a couple are united in marriage. Wedding traditions and customs vary greatly between cultures, ethnic groups, religions, countries, and social classes. Most wedding ceremonies involve an exchange of marriage vows by the couple, presentation of a gift (offering, ring(s), symbolic item, flowers, money), and a public proclamation of marriage by an authority figure or celebrant. Special wedding garments are often worn, and the ceremony is sometimes followed by a wedding reception. Music, poetry, prayers or readings from religious texts or literature are also commonly incorporated into the ceremony.\n\nConstraints :\nThe html page must contain the text Wedding Event inside `&lt;h2&gt;` tag.\nDiv element with id \"container\" must be present and must have the below CSS properties\nposition - relative\nImg tag with src \"image.jpg\" attribute must be present.\nDiv element with id \"overlay\" must be present and must have the below CSS properties\noverflow - hidden\ntransition:1s ease\nwidth:0px\nposition - absolute\n\nheight - 100%\nText must be used which is given in the content.\n\nDiv element with id \"text\" must be present and must have the below CSS properties\ntext-align - justify\ntransform - translate(-270px, -100px)\nposition - absolute\nText must be used which is given in the content.\n\nNote :\nThe web page should be displayed as shown in the screenshot.\nKindly refer the content which is given as a part of description\nKindly don't change the template only make the changes in index.html file.\n\nSample Screenshot 1:\n\n\n\nSample Screenshot 2:\n</code></pre> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Wedding Event&lt;/title&gt;\n    &lt;style&gt;\n        h2{\n            text-align: center;\n        }\n      #container {\n        position: relative;\n      }\n\n      .image {\n        width: 50%;\n        height: auto;\n      }\n\n      #overlay {\n        overflow: hidden;\n        width: 0;\n        position: absolute;\n        height: 100%;\n        transition: 1s ease;\n      }\n\n      #overlay:hover {\n        width: 50%;\n\n\n      }\n\n      #text {\n        text-align: justify;\n        transform: translate(-270px, -100px);\n        position: absolute;\n      }\n      #overlay:hover #text {\n        width: 50%;\n\n\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h2&gt;Wedding Event&lt;/h2&gt;\n    &lt;div id=\"container\"&gt;\n      &lt;img src=\"image.jpg\" class=\"image\"&gt;\n      &lt;div id=\"overlay\"&gt;\n        &lt;div id=\"text\"&gt;\n          A wedding is a ceremony where two people or a couple are united in marriage. Wedding traditions and customs vary greatly between cultures, ethnic groups, religions, countries, and social classes. Most wedding ceremonies involve an exchange of marriage vows by the couple, presentation of a gift (offering, ring(s), symbolic item, flowers, money), and a public proclamation of marriage by an authority figure or celebrant. Special wedding garments are often worn, and the ceremony is sometimes followed by a wedding reception. Music, poetry, prayers or readings from religious texts or literature are also commonly incorporated into the ceremony.\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"HTML_CSS/WorkingWithText-Img/","title":"Working with Text Img","text":""},{"location":"HTML_CSS/WorkingWithText-Img/#idesign","title":"iDesign","text":"<pre><code>CSS - background repeat-x\nBeing in the family of Webnotch Technologies, Sandra is very much interested in contributing her efforts for the betterment of the company. She has been waiting for the right time for showcasing her talent in web designing. Sandra has been assigned the task of redoing the web page created for their major client Pink Frag Event Organizer. Her superior gave her a prototype for the blog and the contents to be displayed in it.\n\nThe blog contained the facts about the company and was decorated with a background image relating to the nature of the company's services. She thought of bringing something innovative about the site. She surfed various websites about the alignment of the background image in different ways and found out the usage of background repeat-x property in CSS as it will fill the image only in the horizontal axis.\n\nShe has requested you to help her by finding out the implementations of this property.Hence create a web page using the background repeat-x property in CSS.\n\nHints : background-repeat The background-repeat property sets how a background image will be repeated. By default, a background-image is repeated both vertically and horizontally. repeat-xThe background image is repeated only horizontallySyntax :    \nbackground-repeat: repeat|repeat-x|repeat-y|no-repeat|initial|inherit;\n\nContent :\nh1 - Pink Frag Event Organizer\nhr\nh2 - Service Description\np - We are indulged in offering a Promotional Event Management. These services are provided by our team of professionals as per the requirement of the client. These services are highly praised for their features like sophisticated technology, effective results and reliability. We offer these services in a definite time frame and at affordable rates.\nhr\nh2 - Features\nh5 - Customized services\nh5 - On-time completion\nh5 - Execution in tandem with clients demand\nhr\nh2 - About Us\np - Pink Frag Event is a reputed organization, which has come into being in 2009, as a Sole Proprietorship Firm, with a sole aim of achieving the trust and support of large customers. We have indulged our all endeavors towards offering trustworthy Wedding Event Management, Promotional Event Management, Birthday Party Management and many more. All our services are reliable and offered keeping the exact customers\u2019 preferences and choice in mind. To offer these services, we have hired specialized professionals, who are capable of understanding as well as accomplishing the specific customers\u2019 desires. &lt;br /&gt; We have adopted modern technology, to cope up with the challenges of the industry. We keep all quality parameters in mind, so that we cannot make any compromise in terms of the excellence of products.\nhr\nh2 - Contact Us\nh3 - Address\np - 14/509A,Sterlin Street,Nungambakkam\nChennai - 600034.\nh3 - Mobile\np - Manager-9596645125\nh3 - Landline\np - 0422-2727272\nh3 - EMail\np - pinkfragevent123@gmail.com   pinkfragOfficial@gmail.com\n\nConstraints :\nbody tag with ' Background Repeat - repeat-x '  should be used in the html page .\nbackground image - Event.png\n\n\nNote :\nWeb page should be displayed as shown in the screenshot.\nKindly refer the content which is given as a part of the description.\n\nSample Screenshot 1 :\nWithout applying the Background Repeat - repeat-x property,\n\n\nSample Screenshot 2 :\nAfter applying the Background Repeat - repeat-x property,\n</code></pre> <p>index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;My First Website&lt;/title&gt;\n        &lt;meta charset=\"UTF-8\"&gt;\n        &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n       &lt;link rel=\"stylesheet\" href=\"styles.css\" type=\"text/css\"&gt;\n\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;img src=\"Event.png\" alt=\"\" backgro&gt;\n        &lt;h1 id=\"h1Tag\"&gt;Pink Frag Event Organizer&lt;/h1&gt;  \n        &lt;hr&gt;\n        &lt;h2 id=\"h2Tag\"&gt;Service Description&lt;/h2&gt;\n        &lt;p&gt;We are indulged in offering a Promotional Event Management. \n            These services are provided by our team of professionals as \n            per the requirement of the client. \n            These services are highly praised for their features like \n            sophisticated technology, effective results and reliability. We offer \n            these services in a definite time frame and at affordable rates.\n        &lt;/p&gt;\n        &lt;hr&gt;\n        &lt;h2 id=\"h2Tag\"&gt; Features&lt;/h2&gt;\n        &lt;h5 id=\"h5Tag\"&gt;Customized services&lt;/h5&gt;\n        &lt;h5 id=\"h5Tag\"&gt;On-time completion&lt;/h5&gt;\n        &lt;h5 id=\"h5Tag\"&gt;Execution in tandem with clients demand&lt;/h5&gt;\n        &lt;hr&gt;\n        &lt;h2 id=\"h2Tag\"&gt;About Us&lt;/h2&gt;\n        &lt;p&gt; Pink Frag Event is a reputed organization, \n            which has come into being in 2009, as a Sole Proprietorship\n            Firm, with a sole aim of achieving the trust and support of \n            large customers. We have indulged our all endeavors towards \n            offering trustworthy Wedding Event Management, Promotional\n            Event Management, Birthday Party Management and many more. \n            All our services are reliable and offered keeping the exact \n            customers\u2019 preferences and choice in mind. To offer these \n            services, we have hired specialized professionals, who are \n            capable of understanding as well as accomplishing the specific \n            customers\u2019 desires. We have adopted modern technology, \n            to cope up with the challenges of industry. We keep all quality \n            parameters in mind, so that we cannot make any compromise in \n            terms of the excellence of products. &lt;/p&gt;\n        &lt;hr&gt;\n        &lt;h2 id=\"h2Tag\"&gt;Contact Us&lt;/h2&gt;\n        &lt;h3 id=\"h3Tag\"&gt;Address&lt;/h3&gt;\n        &lt;p&gt;14/509A,Sterlin Street,Nungambakkam\n        Chennai - 600034.&lt;/p&gt;\n        &lt;h3 id=\"h3Tag\"&gt;Mobile&lt;/h3&gt;\n        &lt;p&gt;Manager-9596645125&lt;/p&gt;\n        &lt;h3 id=\"h3Tag\"&gt;Landline&lt;/h3&gt;\n        &lt;p&gt;0422-2727272&lt;/p&gt;\n        &lt;h3 id=\"h3Tag\"&gt;EMail&lt;/h3&gt;\n        &lt;p&gt;pinkfragevent123@gmail.com   pinkfragOfficial@gmail.com\n        &lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> styles.css<pre><code>body{\n    background-image: url(\"Event.png\");\n    background-repeat: repeat-x ;\n}\n</code></pre></p>"},{"location":"HTML_CSS/WorkingWithText-Img/#iassess","title":"iAssess","text":"<pre><code>CSS - Striped Tables without class\n\nNova, a web designer at Fusion Events has created a webpage for the upcoming Events that the company has signed for this year. She tested the webpage after completing it, but she noticed that all the rows in the event schedule were of the same color. To improve the visual appearance of the page, Nova decided to give two different colors for the odd and even rows in the event schedule.\n\nLet us help Nova to create the webpage displaying the events schedule using the nth-child() property.\nHints : table-header-group   The :nth-child(n) selector matches every element that is the nth child, regardless of type,parent type.\nOdd and even are keywords that can be used to match child elements whose index is odd or even (theindex of the first child is 1).Syntax :   tagname:nth-child(odd) {\nCSS declarations\n}\nExample:   \np:nth-child(odd) \n{   \ncolor:pink;\n}\n\nContent :\nName    Venue   Start Time  End Time\nCorporate Events    RVS Hall, 3rd Floor 4.5.2018 9.00AM 4.5.2018 12.00AM\nWedding Planning    Sri Plus Thirumana Mahal    1.1.2019 7.00AM 1.1.2019 9.00AM\nProduct Launches    RVS Hall, 2nd Floor 4.5.2018 2.00PM 4.5.2018 5.00PM\nSeminor on Cloud Computing  Vivekanandha Auditorium 18.12.2018 8.30AM   18.12.2018 1.00PM\nHeavenly Fashion    Bath Record Office  21.3.2018 5.00PM    21.3.2018 8.00PM\nGala Dinners    City Tower, Hall No 2   12.1.2018 7.00 PM   12.1.2018 10.00 PM\nAward Ceremony  Hindustan Auditorium    11.11.2018 9.00 AM  11.11.2018 5.00 PM\n\n\nConstraints :\nThe file name should be index.html.\nApply styling properties without using the class or id attribute.\nThe background color must be given for nth element in the table.\nThe background color for even rows must be '#e0f0e9'.\nThe background color for odd rows must be '#b3edcf'.\n\nNote :\nThe webpage should be displayed as shown in the screenshot.\nKindly refer the content which is given as a part of description.\n\nSample Screenshot 1:\n\n\n\nSample Screenshot 2:\n</code></pre> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;style&gt;\n/*Fill you text here*/\ntr:nth-child(odd){\nbackground-color: #b3edcf;\n}\ntr:nth-child(even){\nbackground-color: #e0f0e9;\n}\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;center&gt;\n  &lt;h1&gt;Event Schedule&lt;/h1&gt;\n  &lt;div&gt;          \n        &lt;table&gt;\n        &lt;tr &gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Venue&lt;/th&gt;&lt;th&gt;Start Time&lt;/th&gt;&lt;th&gt;End Time&lt;/th&gt;&lt;/tr&gt;\n        &lt;tr&gt;&lt;td&gt;Corporate Events&lt;/td&gt;&lt;td&gt;RVS Hall, 3rd Floor&lt;/td&gt;&lt;td&gt;4.5.2018 9.00AM&lt;/td&gt;&lt;td&gt;4.5.2018 12.00AM&lt;/td&gt;&lt;/tr&gt;\n        &lt;tr&gt;&lt;td&gt;Wedding Planning&lt;/td&gt;&lt;td&gt;Sri Plus Thirumana Mahal&lt;/td&gt;&lt;td&gt;1.1.2019 7.00AM&lt;/td&gt;&lt;td&gt;1.1.2019 9.00AM&lt;/td&gt;&lt;/tr&gt;\n        &lt;tr&gt;&lt;td&gt;Product Launches&lt;/td&gt;&lt;td&gt;RVS Hall, 2nd Floor&lt;/td&gt;&lt;td&gt;4.5.2018 2.00PM&lt;/td&gt;&lt;td&gt;4.5.2018 5.00PM&lt;/td&gt;&lt;/tr&gt;\n        &lt;tr&gt;&lt;td&gt;Seminor on Cloud Computing&lt;/td&gt;&lt;td&gt;Vivekanandha Auditorium&lt;/td&gt;&lt;td&gt;18.12.2018 8.30AM&lt;/td&gt;&lt;td&gt;18.12.2018 1.00PM&lt;/td&gt;&lt;/tr&gt;\n        &lt;tr&gt;&lt;td&gt;Heavenly Fashion&lt;/td&gt;&lt;td&gt;Bath Record Office&lt;/td&gt;&lt;td&gt;21.3.2018 5.00PM&lt;/td&gt;&lt;td&gt;21.3.2018 8.00PM&lt;/td&gt;&lt;/tr&gt;\n        &lt;tr&gt;&lt;td&gt;Gala Dinners&lt;/td&gt;&lt;td&gt;City Tower, Hall No 2&lt;/td&gt;&lt;td&gt;12.1.2018 7.00 PM&lt;/td&gt;&lt;td&gt;12.1.2018 10.00 PM&lt;/td&gt;&lt;/tr&gt;\n        &lt;tr&gt;&lt;td&gt;Award Ceremony&lt;/td&gt;&lt;td&gt;Hindustan Auditorium&lt;/td&gt;&lt;td&gt;11.11.2018 9.00 AM&lt;/td&gt;&lt;td&gt;11.11.2018 5.00 PM&lt;/td&gt;&lt;/tr&gt;\n        &lt;/table&gt;\n  &lt;/div&gt;\n&lt;/center&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"HTML_CSS/forms/","title":"Forms","text":""},{"location":"HTML_CSS/forms/#idesign","title":"iDesign","text":"<pre><code>Forms - Registration form\n\n\nDesign an HTML page for the registration form as shown in the screenshot.\n\nHints :Tag `&lt;select&gt;`\nThe `&lt;select&gt; `element is used to create a drop-down list. The `&lt;option&gt;` tags inside the `&lt;select&gt;` element define the available options in the list.\nSyntax :\n`&lt;select&gt; &lt;option value=\"xxx\"&gt; xxx &lt;/option&gt; &lt;option value=\"yyy\"&gt; yyy &lt;/option&gt; &lt;/select&gt;`\n\nSample Screenshot 1:\n\n\n\nSample Screenshot 2 :\n\n\n\nSample Screenshot 3 :\n\n\n\nConstraints :\n\nHave two pages named index.html and display.php.\nRefer screenshot for name and value specification of fields\nDisplay the entered details in display.php page.\n\nNote :\n\nContent of the page should be present as shown in the screenshot.\nKindly refer to the content which is given as a part of the description.\n\nContent :\n\nDesign a simple registration form with values\nh1 - Registration form\nUse \u2018textarea\u2019 element for the address field.\n\nTextField value\n\nname\n\ntype\n\nName\n\nname\n\ntext\n\nUsername\n\nuserName\n\ntext\n\nPassword\n\npassword\n\npassword\n\nRe-enter Password\n\nre-EnterPassword\n\npassword\n\nAddress\n\naddress\n\ntextarea(element)\n\nGender\n\ngender\n\nradio\n\nDistrict Name\n\ndistrictName\n\nselect\n\nEvents\n\nevents[]\n\ncheckbox\n\nRegister\n\nregister\n\nsubmit\n\n\nCreate a form with the above fields.\ndisplay.php is provided in the template code.\nDesign the HTML page using form and form action should be 'display.php' and the method should be 'POST'\n\nTemplate Code :\n\nClick here to download the template code.\n</code></pre> <p>display.php<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;center&gt;\n&lt;h1&gt;User Details&lt;/h1&gt;\n&lt;?php\n$name = $_POST['name'];\n$username = $_POST['userName'];\n$address = $_POST['address'];\n$gender = $_POST['gender'];\n$district = $_POST['districtName'];\n$event[] =  array();\n$event[] = $_POST['events'];\n//print_r($event);\n?&gt;\n&lt;table&gt;\n    &lt;tr&gt;\n        &lt;td&gt;&lt;?php echo \"Name\" ?&gt;&lt;/td&gt;\n        &lt;td&gt;&lt;?php echo \":\" ?&gt;&lt;/td&gt;\n        &lt;td&gt;&lt;?php echo $name ?&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;&lt;?php echo \"User name\" ?&gt;&lt;/td&gt;\n        &lt;td&gt;&lt;?php echo \":\" ?&gt;&lt;/td&gt;\n        &lt;td&gt;&lt;?php echo $username ?&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;&lt;?php echo \"Address\" ?&gt;&lt;/td&gt;\n        &lt;td&gt;&lt;?php echo \":\" ?&gt;&lt;/td&gt;\n        &lt;td&gt;&lt;?php echo $address ?&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;&lt;?php echo \"Gender\" ?&gt;&lt;/td&gt;\n        &lt;td&gt;&lt;?php echo \":\" ?&gt;&lt;/td&gt;\n        &lt;td&gt;&lt;?php echo $gender ?&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;&lt;?php echo \"District\" ?&gt;&lt;/td&gt;\n        &lt;td&gt;&lt;?php echo \":\" ?&gt;&lt;/td&gt;\n        &lt;td&gt;&lt;?php echo $district ?&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;&lt;?php echo \"Events\" ?&gt;&lt;/td&gt;\n        &lt;td&gt;&lt;?php echo \":\" ?&gt;&lt;/td&gt;\n        &lt;td&gt;\n            &lt;?php foreach ($event[1] as $key =&gt;$value): ?&gt;\n                &lt;?php if($key&lt; count($event[1])-1){\n                  echo $value.\", \"; }\n                  else { echo $value; } ?&gt;\n            &lt;?php endforeach ?&gt; \n        &lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;/table&gt;\n\n&lt;/center&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form action=\"display.php\" method=\"post\"&gt;\n\n\n\n\n            &lt;table&gt;\n\n                &lt;thead&gt;&lt;h1&gt;Registration form&lt;/h1&gt;&lt;/thead&gt;\n                &lt;tr&gt;\n                &lt;td&gt;Name&lt;/td&gt;&lt;td&gt;: &lt;input type=\"text\" name=\"name\" id=\"name\"&gt;&lt;br&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Username &lt;/td&gt;&lt;td&gt;: &lt;input type=\"text\" name=\"userName\" id=\"userName\"&gt;&lt;br&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Password  &lt;/td&gt;&lt;td&gt;: &lt;input type=\"password\" name=\"password\" id=\"password\"&gt;&lt;br&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Re-enter Password &lt;/td&gt;&lt;td&gt;: &lt;input type=\"password\" name=\"re-EnterPassword\" id=\"re-EnterPassword\"&gt;&lt;br&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Address &lt;/td&gt;&lt;td&gt;: &lt;textarea name=\"address\" id=\"address\" &gt;&lt;/textarea&gt;&lt;br&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Gender &lt;/td&gt;&lt;td&gt;: &lt;input type=\"radio\" name=\"gender\" id=\"gender\" value=\"male\"&gt;Male&lt;input type=\"radio\" name=\"gender\" id=\"gender\" value=\"female\"&gt;Female &lt;br&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;District Name  &lt;/td&gt;&lt;td&gt;: &lt;select name=\"districtName\" id=\"districtName\"&gt; &lt;option value=\"New York\"&gt;New York&lt;/option&gt;&lt;option value=\"Coimbatore\"&gt;Coimbatore&lt;/option&gt;&lt;/select&gt;&lt;br&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Events &lt;/td&gt;&lt;td&gt;: &lt;input type=\"checkbox\" name=\"events[]\" id=\"events[]\" value=\"wedding\"&gt;Wedding &lt;input type=\"checkbox\" name=\"events[]\" id=\"events[]\"value=\"corporate\"&gt;Corporate &lt;input type=\"checkbox\" name=\"events[]\" id=\"events[]\"value=\"social\"&gt;Social&lt;br&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;&lt;/td&gt;\n                    &lt;td&gt;\n                        &lt;button type=\"submit\" name=\"register\"&gt;Register&lt;/button&gt;&lt;br&gt;\n\n                    &lt;/td&gt;\n\n                &lt;/tr&gt;\n            &lt;/table&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p>"},{"location":"HTML_CSS/forms/#iassess","title":"iAssess","text":"<pre><code>Forms - maxlength\nD5 educational website which provides useful tutorials for all types of learners, has planned to maintain the database of the students and teachers who are benefited by them. The database stores information like user's name, username, password, mobile number and address. On validating the details enrolled by the users, they found many invalid entries like 12-digit mobile number, address with unwanted landmarks, etc.\n\nFor eliminating such entries, the creative team of D5 educational institution has appointed you to create the website which would limit the input from the user as required. Hence, create a website with input fields following certain constraints like the mobile number field must not hold more than 10 digits and the address field should not hold more than 200 characters.\nHints :  maxlength attribute  The maxlength attribute specifies the maximum number of characters allowed in the `&lt;input&gt; element. Syntax :    &lt;input maxlength=\"number\"&gt; `\n\nContent :\nDesign a html page with simple registration form\nh1 - Registration form \nTextField value name    textfield/textarea/button\nName    name    textfield\nUsername    username    textfield\nPassword    password    textfield\nMobileNumber    mobilenumber    textfield\nAddress address textarea\nRegister    register    button\n\nHave the above textfields and a button.\nSet max attribute for the fields mobilenumber(10) and address(200).\ndisplay.php is provided in the template code.\nFill your code in index.html.\n\nConstraints :\nHave two pages called index.html and display.php\nDesign the html page using form with action as 'display.php' and method as 'POST'\nThe max attribute must be given for the mentioned fields.\nUse the names and the values as given in the screenshot.\n\nNote :\nContent of the page should be present as shown in the screenshot.\nKindly refer to the content which is given as a part of the description.\n\nSample Screenshot 1:\n\n\n\nSample Screenshot 2:\n\n\n\nSample Screenshot 3:\n\n\n\nSample Screenshot 4 :\n\ndisplay.php\n</code></pre> <p>display.php<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;center&gt;\n&lt;?php\n$name = $_POST['name'];\n$username = $_POST['userName'];\n$mobileNumber = $_POST['mobilenumber'];\n$address = $_POST['address'];\necho \"&lt;table&gt;&lt;tr&gt;Name : \".$name.\"&lt;/tr&gt;\";\necho \"&lt;tr&gt;User name : \".$username.\"&lt;/tr&gt;\";\necho \"&lt;tr&gt;MobileNumber : \".$mobileNumber.\"&lt;/tr&gt;\";\necho \"&lt;tr&gt;Address : \".$address.\"&lt;/tr&gt;&lt;/table&gt;\";\n?&gt;\n&lt;/center&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form action=\"display.php\" method=\"post\"&gt;\n\n\n\n\n            &lt;table&gt;\n\n                &lt;thead&gt;&lt;h1&gt;Registration form&lt;/h1&gt;&lt;/thead&gt;\n                &lt;tr&gt;\n                &lt;td&gt;Name&lt;/td&gt;&lt;td&gt;: &lt;input type=\"text\" name=\"name\" id=\"name\"&gt;&lt;br&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Username &lt;/td&gt;&lt;td&gt;: &lt;input type=\"text\" name=\"username\" id=\"username\"&gt;&lt;br&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Password  &lt;/td&gt;&lt;td&gt;: &lt;input type=\"password\" name=\"password\" id=\"password\"&gt;&lt;br&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;\n                        Mobile Number\n                    &lt;/td&gt;\n                    &lt;td&gt;\n                        : &lt;input type=\"number\" name=\"mobilenumber\" id=\"mobilenumber\" value=\"MobileNumber\" maxlength=\"10\"&gt;\n                    &lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Address &lt;/td&gt;&lt;td&gt;: &lt;textarea name=\"address\" id=\"address\" maxlength=\"200\"&gt;&lt;/textarea&gt;&lt;br&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n\n                &lt;tr&gt;\n                    &lt;td&gt;&lt;/td&gt;\n                    &lt;td&gt;\n                        &lt;button type=\"submit\" name=\"register\"&gt;Register&lt;/button&gt;&lt;br&gt;\n\n                    &lt;/td&gt;\n\n                &lt;/tr&gt;\n            &lt;/table&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p>"},{"location":"HTML_CSS/layout/","title":"Layout","text":""},{"location":"HTML_CSS/layout/#idesign","title":"iDesign","text":"<pre><code>BestBuy Electronix  has been one of the  premier electronic appliances and good dealership company with branches spread across multiple states. They have most comprehensive ranges of branded products for sale in the market. A lot of their stock has been driven by customer demand. They are experts at sourcing exactly what the client needs and offering at the best affordable price. Customer satisfaction is their primary goal and they are always looking to please their clients. So they decided to design a webpage for the company.\n\nHelp the team to design an attractive webpage for the BestBuy Electronix.\n\nConstraints :\nThe main file name should be \u201cindex.html\u201d.\nWrite css codes in css/app.css file.\nImages should be in images folder.\nIcons will be loaded from css/icon.css folder.\nDesign the page using basics styles mentioned below.\nimg tag should have src attribute as \u2018fastrack.jpg\u2019\n\ndiv with class product-card should have following styles\n\n    width: 35%;\n    position: relative;\n    padding: 20px 20px 40px 20px;\n    background-color: #fff;\n    box-shadow: 0 0px 10px #e4e4e4;\n    border-radius: 5px;\n    overflow: hidden;\nfigure tag with class image should have following styles\n\nwidth: 220px;\nheight: 220px;\noverflow: hidden;\ntext-align: center;\ndisplay: block;\nmargin-left: auto;\nmargin-right: auto;\nmargin-bottom: 20px;\ndiv with class star-group should have following styles\n\nmargin-top:10px;\ndisplay: inline-block;\nbackground-color: #F5821F;\npadding: 2px 10px;\ndisplay: inline-block;\nborder-radius: 5px;\ndiv with class product-name should have following styles\n\nmargin-top:10px;\ndiv with class product-name should have following styles\n\nfont-size : 12px\nHTML Constraints :\nAll the tags marked in the screenshots should be present in the html page.\n\nSample Screenshot 1:\n\n\nSample Screenshot 2:\n</code></pre> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n    &lt;title&gt;Retail Project | Product Details&lt;/title&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\"&gt;\n    &lt;link href=\"css/icon.css\" rel=\"stylesheet\"&gt;\n    &lt;link href=\"css/app.css\" rel=\"stylesheet\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"top-wrapper\"&gt;\n        &lt;div class=\"logo-wrapper\"&gt;\n            &lt;img src=\"images/logo.png\"&gt;\n        &lt;/div&gt;\n        &lt;div class=\"menu-bar\"&gt;\n            &lt;div class=\"search-bar\"&gt;\n                &lt;input type=\"text\" class=\"form-control\" placeholder=\"Search for Products\"&gt;\n                &lt;span class=\"icon icon-search\"&gt;&lt;/span&gt;\n            &lt;/div&gt;\n            &lt;div class=\"action-lists\"&gt;\n                &lt;ul&gt;\n                    &lt;li class=\"alert\"&gt;&lt;a href=\"#\"&gt;&lt;span class=\"icon icon-alert\"&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n                    &lt;li class=\"cart\"&gt;&lt;a href=\"#\"&gt;&lt;span class=\"icon icon-cart\"&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n                    &lt;li class=\"wishlist\"&gt;&lt;a href=\"#\"&gt;&lt;span class=\"icon icon-wishlist\"&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\n                    &lt;li class=\"user\"&gt;\n                        &lt;a href=\"#\"&gt;\n                            &lt;span class=\"user-name\"&gt;Aaron&lt;/span&gt;\n                        &lt;/a&gt;\n                    &lt;/li&gt;\n                &lt;/ul&gt;\n            &lt;/div&gt;           \n        &lt;/div&gt;\n    &lt;/div&gt;   \n\n    &lt;div class=\"main-wrapper\"&gt;\n       &lt;!-- Fill your code  --&gt;\n       &lt;div class=\"product-card\"&gt;\n        &lt;figure class=\"image\"&gt;\n            &lt;img src=\"images/fastrack.jpg\" alt=\"\"&gt;\n        &lt;/figure&gt;\n        &lt;div&gt;\n\n            &lt;div class=\"star-group\"&gt;\n                4 &lt;span class=\"icon icon-star\"&gt;&lt;/span&gt;\n            &lt;/div&gt;\n            &lt;span class=\"price\"&gt;\n                $299\n            &lt;/span&gt; \n\n        &lt;/div&gt;\n\n        &lt;div&gt;\n            &lt;p class=\"product-name\"&gt;Fastrack Reflex Activity Tracker &lt;/p&gt;\n            &lt;p class=\"small-text\"&gt;Redesigned from scratch and completely revised&lt;/p&gt;\n        &lt;/div&gt;\n\n        &lt;center&gt;&lt;div&gt;\n            &lt;a id=\"wishlist\" href=\"#\" &gt;&lt;span class=\"icon icon-wishlist\"&gt;&lt;/span&gt; WISHLIST&lt;/a&gt;\n            &lt;a id=\"add-to-cart\" href=\"#\" &gt;ADD TO CART&lt;/a&gt;\n        &lt;/div&gt;\n        &lt;/center&gt;\n\n\n\n       &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;footer&gt;\n      &lt;p&gt;Posted by: Hege Refsnes&lt;/p&gt;\n      &lt;p&gt;Contact information: &lt;a href=\"mailto:hege@bestbuy.com\"&gt;hege@bestbuy.com&lt;/a&gt;&lt;/p&gt;\n    &lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"HTML_CSS/layout/#iassess","title":"iAssess","text":"<pre><code>Lists - horizontal menu\nBritto, the Chief Executive Officer of the \"Boomerang Solutions\" is an entrepreneur by profession but a web designer by passion. During his leisure time, he used to re-create his favorite site in the Internet using HTML. In the recent times, he got attracted to the official website of the \"Pink Frag Event Organizers\" company and started trying the design using a sample content.\n\nHe understood all the concepts used in the website except the Horizontal menu containing links. Hence, he is in need of your help for creating a webpage using float property.\n\nHints :float propertyThe float property specifies how an element should float. It is used to get block elements to slide next to each other.Syntax :   \nfloat: none|left|right|initial|inherit;\n\nContent :\nh3 - Pink Frag Event Organizer\np tag - We are indulged in offering a Promotional Event Management.These services are provided by our team of professionals as per the requirement of the client. These services are highly praised for their features like sophisticated technology, effective results and reliability. We offer these services in a definite time frame and at affordable rates.\nPink Frag Event is a reputed organization,which has come into being in 2009, as a Sole Proprietorship Firm, with a sole aim of achieving the trust and support of large customers. We have indulged our all endeavors towards offering trustworthy Wedding Event Management, Promotional Event Management, Birthday Party Management and many more.To offer these services, we have hired specialized professionals, who are capable of understanding as well as accomplishing the specific customers' desires.\n\nConstraints :\nDesign the html page as given in the sample screenshot1.\nUse ul tag for designing the menu.\neach 'li' tag style should have float : 'left' property.\nThere must be 4 'a' tags inside the html page.\nRefer the screenshots for html specifications.\nThe href attribute for 'a' tag is \"#\".\n\nThe 'ul' tag should have the following style property,\n    list-style-type - none\n    background-color - #87CEEB\n    padding -10px 0\n    overflow - hidden\n\nInitially, 'a' tag should have the following style property,\n    background-color - #87CEEB\n    color - #000000\n    width - 20px\n    border - 1px solid #808080\n    padding - 15px\n    text-align - center\n    text-decoration - none\n\nWhile hovering the 'a' tags, change the style property as below\n    background-color- #4169E1\n    color - #FFFFFF\n    width - 20px\n    border - 1px solid #808080\n    padding - 15px\n    text-align - center\n    text-decoration - none\n\nThe Content in the tags should be the same as given in the problem content.\n\nNote :\nContent of the page should be present as shown in the screenshot.\nKindly refer the content which is given as a part of description.\n\nSample Screenshot 1 :\n\n\n\nSample Screenshot 2 :\n\n\n\nSample Screenshot 3 :\n\n\n\nSample Screenshot 4 :\n\n\n\nSample Screenshot 5 :\n\n\n\nSample Screenshot 6 :\n</code></pre> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;style&gt;\n      ul {\n        /* Enter your text here! */\n        list-style-type: none;\n        background-color: #87ceeb;\n        padding: 10px 0;\n        overflow: hidden;\n      }\n      li {\n        /* Enter your text here! */\n        float: left;\n      }\n      a {\n        /* Enter your text here! */\n        background-color: #87ceeb;\n        color: #000000;\n        width: 20px;\n        border: 1px solid #808080;\n        padding: 15px;\n        text-align: center;\n        text-decoration: none;\n      }\n      a:hover {\n        /* Enter your text here! */\n        background-color: #4169e1;\n        color: #ffffff;\n        width: 20px;\n        border: 1px solid #808080;\n        padding: 15px;\n        text-align: center;\n        text-decoration: none;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;ul&gt;\n      &lt;li&gt;&lt;a href=\"#\" id=\"home\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n      &lt;li&gt;&lt;a href=\"#\" id=\"news\"&gt;News&lt;/a&gt;&lt;/li&gt;\n      &lt;li&gt;&lt;a href=\"#\" id=\"contact\"&gt;Contact&lt;/a&gt;&lt;/li&gt;\n      &lt;li&gt;&lt;a href=\"#\" id=\"about\"&gt;About&lt;/a&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;h3&gt;Pink Frag Event Organizer&lt;/h3&gt;\n    &lt;p&gt;\n      We are indulged in offering a Promotional Event Management.These services\n      are provided by our team of professionals as per the requirement of the\n      client. These services are highly praised for their features like\n      sophisticated technology, effective results and reliability. We offer\n      these services in a definite time frame and at affordable rates.\n    &lt;/p&gt;\n    &lt;p&gt;\n      Pink Frag Event is a reputed organization,which has come into being in\n      2009, as a Sole Proprietorship Firm, with a sole aim of achieving the\n      trust and support of large customers. We have indulged our all endeavors\n      towards offering trustworthy Wedding Event Management, Promotional Event\n      Management, Birthday Party Management and many more.To offer these\n      services, we have hired specialized professionals, who are capable of\n      understanding as well as accomplishing the specific customers' desires.\n    &lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"Java/ClassPackaging/","title":"Class Packaging","text":""},{"location":"Java/ClassPackaging/#1","title":"1","text":"<p><code>toString() and getClass() - Illustration</code></p> <pre><code>The toString() method returns a textual representation of an object. A basic implementation is already included in java.lang.Object and so because all objects inherit from java.lang.Object it is guaranteed that every object in Java has this method. Overriding the method is always a good idea.\n\ngetClass() method defined in the Object class returns the class Type of an object. getClass() method cannot be overridden.\n\n\n\nCreate a class named Product with the following private member variables.\n\nid of type Long\n\nproductName of type String\n\nsupplierName of type String\n\nInclude appropriate getters and setters.\n\nInclude a 3-argument constructor and a default constructor.\n\n\n\nOverride the toString() method defined in the Object class. Display the details of the product in this method as shown in the sample output.\n\n\n\nCreate another class and write a main method to test the above class. Invoke the getClass() method from main.\n\n\n\nInput and Output Format:\n\n\n\nRefer sample input and output for formatting specifications.\n\nAll text in bold corresponds to input and the rest corresponds to output.\n\n\n\nSample Input and Output :\n\nEnter the product id\n\n1\n\nEnter the product name\n\nPrinter\n\nEnter the supplier name\n\nHP\n\n1 : Printer : HP\n\nInvoking getClass() method : class Product\n</code></pre> <p>Main.java<pre><code>import java.util.*;\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n    System.out.println(\"Enter the product id\");\n    Long id= input.nextLong();\n    System.out.println(\"Enter the product name\"); \n    String product2=input.next();\n    product2+=input.nextLine();\n    System.out.println(\"Enter the supplier name\");  \n    String supplier=input.next();\n    supplier+=input.nextLine();\n    Product product1=new Product(id,product2,supplier);\n    System.out.println(product1.toString()); \n    System.out.print(\"Invoking getClass() method:\"); \n    System.out.println(product1.getClass()); \n    input.close();\n    }\n}\n</code></pre> Product.java<pre><code>public class Product {\n    private Long id ;\n    private String productName ;\n    private String supplierName ;\n    public String toString() {\n                return this.id +\" : \"+ this.productName+\" : \"+this.supplierName;\n    }\n    Product(){\n\n    }\n    Product(Long id, String productName ,String supplierName){\n        this.id =id;\n        this.productName=productName;\n        this.supplierName=supplierName;\n    }\n}\n</code></pre></p>"},{"location":"Java/ClassPackaging/#iassess","title":"iAssess","text":""},{"location":"Java/ClassPackaging/#1_1","title":"1","text":"<p><code>Clone Method</code></p> <pre><code>One method to quickly copy the primitive data members of an object is by invoking the clone method. The clone method allocates new memory for all primitive data types, but maintains the same reference to members representing it as objects of other classes. Lets try a very simple clone invocation for a customer object.\n\nWrite a program to get the Customer name, id , country and complaint from the user. If the name entered is an empty string, it is assumed that the complaint is raised by the previous customer. In such cases omit the customer's id and country, use the \"clone()\" method to create a copy of the previous customer object and get the complaint from the user.\n\nCretate a class called Customer with the following member variables\nData Type   Variable Name\nString  name\nString  id\nString  country\nInclude a default constructor.\nInclude a 3 argument constructor.\n1st argument name\n2nd argument id\n3rd argument country\n\n\nCreate a class called Complaint with the following member variables\nData Type   Variable Name\nString  complaint\nCustomer    customer\n\nMethods in Complaint class\nMethod Name Return Type Function\ndisplay()   void    display the complaint detail\nInclude a default constructor.\nInclude a 2 argument constructor.\n1st argument complaint\n2nd argument customer\n\n\nNote :\nStrictly adhere to the object oriented specifications given as a part of the problem statement.\nUse the same class names and member variable names.\n\nAssume: that the Maximum number of complaints as 100.\n\nSample Input and Output :\n\nEnter the customer name\nHubbib\nEnter the id\n006\nEnter the country\nAF\nEnter the complaint\nLate service\nAdd another complaint ??\nyes\nEnter the customer name\nAbin\nEnter the id\n080\nEnter the country\nKLN\nEnter the complaint\nImproper response\nAdd another complaint ??\nyes\nEnter the customer name\n\nSame customer\nEnter the complaint\nBad Quality\nAdd another complaint ??\nno\n\nComplaint Details\nName : Hubbib ID : 006 Country : AF Complaint : Late service\nName : Abin ID : 080 Country : KLN Complaint : Improper response\nName : Abin ID : 080 Country : KLN Complaint : Bad Quality\n</code></pre> Main.java<pre><code>import java.util.*;\npublic class Main {\n    public static void main(String[] args) throws CloneNotSupportedException {\n      //  try {\n            Scanner input= new Scanner(System.in);\n        String name;\n        String id;\n        String country;\n        String complaint;\n        String choice;\n        //Customer customer;\n        ArrayList&lt;Complaint&gt; complaints=new ArrayList&lt;Complaint&gt;();\n        Stack&lt;Customer&gt; customers=new Stack&lt;Customer&gt;();\n    do{\n        System.out.println(\"Enter the customer name\");\n        name = input.next();\n        name += input.nextLine();\n\n        //if(name==null){\n          // customer=ArrayComplaint.get(ArrayComplaint.size()-1).customer;\n        //}\n        //else{\n        if(!name.isEmpty()){\n            System.out.println(\"Enter the id\");\n            id= input.next();\n            System.out.println(\"Enter the country\");\n            country= input.next();\n            country+= input.nextLine();\n            customers.add(new Customer(name,id,country));\n            System.out.println(\"Enter the complaint\");\n                complaint= input.next();\n                complaint+= input.nextLine();\n                complaints.add(new Complaint(complaint,customers.get(complaints.size()-1)));\n\n        }\n        else{\n            if(!complaints.isEmpty()){\n                System.out.println(\"Enter the complaint\");\n                complaint= input.next();\n                complaint+= input.nextLine();\n                complaints.add((Complaint)complaints.get(complaints.size()-1).clone());\n                complaints.get(complaints.size()-1).complaint=complaint;\n\n            }\n\n        }\n\n        //}\n\n        System.out.println(\"Add another complaint ??\");\n        choice= input.next();\n\n\n\n    }while(choice.equals(\"yes\"));\n    System.out.println(\"Complaint Details\");\n        for(int i=0;i&lt;complaints.size();i++){\n            complaints.get(i).display();\n        }\n        input.close();\n        //} catch (Exception e) {\n            // TODO: handle exception\n        //}\n\n\n    }\n}\n</code></pre> <p>Customer.java<pre><code>/**\n * Customer\n */\npublic class Customer{\n\n    String name;\n    String id;\n    String country;\n    Customer(){\n\n    }\n    Customer(String name,String id,String country){\n        this.name=name;\n        this.id=id;\n        this.country=country;\n    }\n\n}\n</code></pre> Complaint.java<pre><code>public class Complaint  implements Cloneable {\n    String complaint;\n    Customer customer= new Customer();\n    public void display() {\n        System.out.println(\"Name : \"+customer.name+\" ID : \"+customer.id+\" Country : \"+customer.country+\" Complaint : \"+complaint);\n    }\n    Complaint(){\n\n    }\n    Complaint(String complaint,Customer customer){\n        this.complaint=complaint;\n        this.customer=customer;\n    }\n    public Object clone()throws CloneNotSupportedException{  \n        return super.clone();  \n        } \n}\n</code></pre></p>"},{"location":"Java/CollectionAndMaps/","title":"Collections And Maps","text":""},{"location":"Java/CollectionAndMaps/#1","title":"1","text":"<pre><code>**`contains() &amp; indexOf() methods in ArrayList`**\nWrite a program to get the hall details and store in the ArrayList and search the hall and display it's position details.\n\nGet hall names in the Main class and store it an ArrayList.\n\nInput format:\nThe first line of input is an integer which corresponds to the number \u2018n\u2019 of halls.\nThe n lines of input are the string which corresponds to the hall name.\nThe last line of input is the string which corresponds to the hall name to be searched.\n\nOutput format:\nThe output is the hall position.\nIt is the position at which the hall is present in the list starting from 0.\nIf the hall to be searched is not present in the list, then print \"[Hall name] hall is not found\"\nRefer to sample Input and Output for formatting specifications.\n\n[All Texts in bold corresponds to the input and rest are output]\nSample Input and Output 1:\n\nEnter the number of halls:\n3\nEnter the Hall Name 1\nSPK\nEnter the Hall Name 2\nDFG\nEnter the Hall Name 3\nTRE\nEnter the hall name to be searched:\nDFG\nDFG hall is found in the list at position 1\n\nSample Input/Output 2:\n\nEnter the number of halls:\n3\nEnter the Hall Name 1\nSPJ\nEnter the Hall Name 2\nRWE\nEnter the Hall Name 3\nHFG\nEnter the hall name to be searched:\nSPK\nSPK hall is not found\n</code></pre> Main.java<pre><code>import java.util.ArrayList;\nimport java.util.Scanner;\n\n/**\n * Main\n */\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner input= new Scanner(System.in);\n        System.out.println(\"Enter the number of halls:\");\n        int numberOfHalls=input.nextInt();\n        String hallName;\n        ArrayList&lt;String&gt; halls=new ArrayList&lt;String&gt;();\n        for (int i = 0; i &lt; numberOfHalls; i++) {\n            System.out.println(\"Enter the Hall Name \"+(i+1));\n            hallName=input.next();\n           // hallName+=input.nextLine();\n            halls.add(hallName);\n        }\n        System.out.println(\"Enter the hall name to be searched:\");\n        String searchHallName=input.next();\n        //searchHallName+=input.nextLine();\n        try {\n            if(halls.contains(searchHallName)){\n                System.out.println(searchHallName+\" hall is found in the list at position \"+(halls.indexOf(searchHallName)));\n            }\n            else{\n                System.out.println(searchHallName+\" hall is not found\");\n            }\n        } catch (Exception e) {\n            // TODO: handle exception\n\n        }\n\n        input.close();\n    }\n}\n</code></pre>"},{"location":"Java/CollectionAndMaps/#2","title":"2","text":"<p><code>Email Search</code></p> <pre><code>In your application let\u2019s dive deep into Set and explore its inbuilt functions. In this problem experiment with containsAll() method. Write a program to search all the email addresses which are given as CSV format.\n\nCreate a Main class. Obtain email addresses from the user and add them to a Set. At last, get a String that has multiple email addresses in CSV format. Print \"Email addresses are present\" if all email addresses are present in the Set, else print \"Email addresses are not present\".\n\nInput and Output format:\nRefer to sample Input and Output for formatting specifications.\n\nNote: All Texts in bold corresponds to the input and rest are output\n\nSample Input and Output 1:\nEnter Email address\nMerry@gmail.com\nDo you want to Continue?(yes/no)\nyes\nEnter Email address\nPeter@yahoo.com\nDo you want to Continue?(yes/no)\nyes\nEnter Email address\nChristian@hotmail.com\nDo you want to Continue?(yes/no)\nyes\nEnter Email address\nMerry@gmail.com\nDo you want to Continue?(yes/no)\nno\nEnter the email addresses to be searched separated by comma\nMerry@gmail.com,Peter@yahoo.com\nEmail addresses are present\n\n\nSample Input and Output 2:\nEnter Email address\nManikandan@yahoo.com\nDo you want to Continue?(yes/no)\nyes\nEnter Email address\nbala@google.co.in\nDo you want to Continue?(yes/no)\nno\nEnter the email addresses to be searched separated by comma\nbala@google.co.in,jeryy@gmail.com\nEmail addresses are not present\n</code></pre> Main.java<pre><code>import java.util.HashSet;\nimport java.util.Scanner;\nimport java.util.Set;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input= new Scanner(System.in);\n        String choice;\n        Set&lt;String&gt; emails =new HashSet&lt;&gt;();\n        do {\n            System.out.println(\"Enter Email address\");\n            String email=input.next();\n            emails.add(email);\n            System.out.println(\"Do you want to Continue?(yes/no)\");\n            choice=input.next();\n\n        } while (choice.equals(\"yes\"));  \n        System.out.println(\"Enter the email addresses to be searched separated by comma\");\n        String emailString=input.next();\n        String[] emailSeparated=emailString.split(\",\");\n        Set&lt;String&gt; emailSearched=new HashSet&lt;&gt;();\n        for (int i = 0; i &lt; emailSeparated.length; i++) {\n            emailSearched.add(emailSeparated[i]);\n        }\n        if(emails.containsAll(emailSearched)){\n            System.out.println(\"Email addresses are present\");\n        }\n        else{\n            System.out.println(\"Email addresses are not present\");\n        }\n        input.close();\n    }\n}\n</code></pre>"},{"location":"Java/CollectionAndMaps/#3","title":"3","text":"<p><code>City map</code></p> <pre><code>Let's spice up things by creating a Multimap. `Map&lt;City,List&lt;Address&gt;&gt;` with City name as key and List of address that corresponds to the City as value. Given list of Addresses as input create a map with the above specification. Obtain a city name as input from the user and display the addresses with the city name as that of the given city by fetching the list of addresses from the map.\n\nCreate a class called Address with the following private attributes.\n\n\n\nAttributes  Datatype\naddressLine1    String\naddressLine2    String\ncity    String\nstate   String\npincode Integer\n\n\nInclude appropriate getters and setters.\nInclude default and parameterized constructor for the class.\nFormat for the Parameterized Constructor Address(String addressLine1, String addressLine2, String city,String state, Integer pincode)\n\nCreate a driver class called Main. In the Main method, obtain address details from the input and create the map of above specification. Obtain a city as a search term and display the address that has the given city. If no such address is present, Print \"Searched city not found\".\n\nNote: \n[Strictly adhere to the Object-Oriented Specifications given in the problem statement.\nAll class names, attribute names and method names should be the same as specified in the problem statement.]\n\nInput format:\n\nFirst line corresponds to number of address details\nNext n lines consists of n address details in CSV format\nn+1th  line consists of city input\n\nOutput format:\n\nAddress details are displayed in tabular format.(Use \"%-15s %-15s %-15s %-15s %s\\n\" for formatting Address details.)\n\n[All text in bold corresponds to the input and rest corresponds to the output]\nSample Input/Output:\n\nEnter the number of address\n4\nEnter the address 1 detail\n22nd lane,RR nagar,Chennai,Tamil nadu,600028\nEnter the address 2 detail\n3rd street,KRK nagar,Visak,Andhrapradesh,745601\nEnter the address 3 detail\n1/45 8th street,KK nagar,Chennai,Tamil nadu,600021\nEnter the address 4 detail\n5/15 7th lane,RK nagar,Madurai,Tamil nadu,625001\nEnter the city to be searched\nChennai\nLine 1          Line 2          City            State           Pincode\n22nd lane       RRnagar        Chennai         Tamilnadu      600028\n1/45 8th street KKnagar        Chennai         Tamilnadu      600021\n</code></pre> <p>Main.java<pre><code>import java.util.ArrayList;\nimport java.util.Formatter;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input= new Scanner(System.in);\n\n        Map&lt;String,ArrayList&lt;Address&gt;&gt; map=new HashMap&lt;&gt;();\n        System.out.println(\"Enter the number of address\");\n        int numberOfAddresses=input.nextInt();\n        String address;\n        ArrayList&lt;Address&gt; addressList=new ArrayList&lt;Address&gt;();\n        for (int i = 0; i &lt; numberOfAddresses; i++) {\n            System.out.println(\"Enter the address \"+(i+1)+\" detail\");\n            address=input.next();\n            address+=input.nextLine();\n            String[] addressSplit=address.split(\",\");\n\n            if(!map.containsKey(addressSplit[2])){\n                addressList.add(new Address(addressSplit[0],addressSplit[1],addressSplit[2],addressSplit[3],Integer.parseInt(addressSplit[4])));\n                map.put(addressSplit[2], addressList);\n            }\n            else{\n                map.get(addressSplit[2]).add(new Address(addressSplit[0],addressSplit[1],addressSplit[2],addressSplit[3],Integer.parseInt(addressSplit[4])));\n            }\n\n        }\n        System.out.println(\"Enter the city to be searched\");\n        String city=input.next();\n        if(map.containsKey(city)){\n            Formatter formatter= new Formatter();\n            formatter.format(\"%-15s %-15s %-15s %-15s %s\\n\",\"Line 1\",\"Line 2\",\"City\",\"State\",\"Pincode\");\n\n            for (int index = 0; index &lt; map.get(city).size(); index++) {\n                if(city.equals(map.get(city).get(index).getCity())){\n                    formatter.format(\"%-15s %-15s %-15s %-15s %s\\n\",map.get(city).get(index).getAddressLine1(),map.get(city).get(index).getAddressLine2(),map.get(city).get(index).getCity(),map.get(city).get(index).getState(),map.get(city).get(index).getPincode());\n                }\n\n            }\n            System.out.println(formatter);\n            formatter.close();\n        }\n        else{\n            System.out.println(\"Searched city not found\");\n        }\n        input.close();\n    }\n}\n</code></pre> Address.java<pre><code>public class Address {\n    private String addressLine1;\n    public String getAddressLine1() {\n        return addressLine1;\n    }\n    public void setAddressLine1(String addressLine1) {\n        this.addressLine1 = addressLine1;\n    }\n    private String addressLine2;\n    public String getAddressLine2() {\n        return addressLine2;\n    }\n    public void setAddressLine2(String addressLine2) {\n        this.addressLine2 = addressLine2;\n    }\n    private String city;\n    public String getCity() {\n        return city;\n    }\n    public void setCity(String city) {\n        this.city = city;\n    }\n    private String state;\n    public String getState() {\n        return state;\n    }\n    public void setState(String state) {\n        this.state = state;\n    }\n    private Integer pincode;\n    public Integer getPincode() {\n        return pincode;\n    }\n    public void setPincode(Integer pincode) {\n        this.pincode = pincode;\n    }\n    public Address(){\n\n    }\n    public Address(String addressLine1, String addressLine2, String city,String state, Integer pincode){\n        this.addressLine1=addressLine1;\n        this.addressLine2=addressLine2;\n        this.city=city;\n        this.state=state;\n        this.pincode=pincode;\n    }\n}\n</code></pre></p>"},{"location":"Java/CollectionAndMaps/#iassess","title":"iAssess","text":""},{"location":"Java/CollectionAndMaps/#1_1","title":"1","text":"<pre><code>User Search\nIn your application, it is time to experiment with a Set of user-defined Objects. Just like List of objects, Set of objects is also relatively simple.\nConsider a Set of bank users. The set contains users who are inactive as well. The bank wants to retain only the Users who are active given a list of active users.\n\nStrictly adhere to the Object-Oriented specifications given in the problem statement. All class names, attribute names and method names should be the same as specified in the problem statement.\n\nCreate a User class with the following private attributes\n\nAttributes  Datatype\nusername    String\nbankname    String\nInclude appropriate getters and setters.\nCreate default constructor and a parameterized constructor with arguments in order User(String username, String bankname).\n\nNote:\nOverride equals method to compare the username, to improve the comparison of username use hashCode method to check the strings are same.\nOverride the Comparable interface to sort Users in Alphabetical order of Username.\n\nIn the Main class, Create a Set of user objects from the user input. Now obtain input in CSV format, create User objects and add to a List but with null values in bankName. Now Use retainAll() to remove elements in Set that are not in the present in the List.\n\nInput and output format:\nRefer to sample Input and Output for formatting specifications.\n\nSample Input and Output 1:\n[All Texts in bold corresponds to the input and rest are output]\n\nEnter number of users:\n3\nEnter details of user1\nUsername:\nRikhra\nBank name:\nBank of Baroda\nEnter details of user2\nUsername:\nKrish\nBank name:\nLakshmi vilas Bank\nEnter details of user3\nUsername:\nSaroja\nBank name:\nKarur vysya Bank\nEnter username(Expire in one month) seperated by comma\nSaroja,Anil,Krish\nUsers going to expire within a month\nUser 1\nUser Name = Krish\nBank Name = Lakshmi vilas Bank\nUser 2\nUser Name = Saroja\nBank Name = Karur vysya Bank\n</code></pre> <p>Main.java<pre><code>import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        // create set of users\n        Set&lt;User&gt; users = new HashSet&lt;&gt;();\n\n        // take user input for number of users\n        System.out.println(\"Enter number of users:\");\n        int n = sc.nextInt();\n         sc.nextLine(); // consume newline character\n\n        // take user input for each user and add to set\n        for (int i = 1; i &lt;= n; i++) {\n            System.out.println(\"Enter details of user\" + i);\n            System.out.println(\"Username:\");\n            String username = sc.nextLine();\n            System.out.println(\"Bank name:\");\n            String bankname = sc.nextLine();\n            User user = new User(username, bankname);\n            users.add(user);\n        }\n\n        // create list of active users from CSV input\n        System.out.println(\"Enter username(Expire in one month) seperated by comma\");\n        String[] activeUsernames = sc.next().split(\",\");\n        List&lt;User&gt; activeUsers = new ArrayList&lt;&gt;();\n        for (String username : activeUsernames) {\n            User user = new User(username.trim(), null);\n            activeUsers.add(user);\n        }\n\n        // remove inactive users from set using retainAll method\n        users.retainAll(activeUsers);\n\n        // sort users by username\n        List&lt;User&gt; sortedUsers = new ArrayList&lt;&gt;(users);\n        Collections.sort(sortedUsers);\n\n        // print active users\n        System.out.println(\"Users going to expire within a month\");\n        for (int i = 0; i &lt; sortedUsers.size(); i++) {\n            User user = sortedUsers.get(i);\n            System.out.println(\"User \" + (i+1));\n            System.out.println(\"User Name = \" + user.getUsername());\n            System.out.println(\"Bank Name = \" + user.getBankname());\n        }\n\n        sc.close();\n    }\n}\n</code></pre> User.java<pre><code>import java.util.*;\n\npublic class User implements Comparable&lt;User&gt; {\n    private String username;\n    private String bankname;\n\n    public User(){\n    }\n\n    public User(String username, String bankname) {\n        super();\n        this.username = username;\n        this.bankname = bankname;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public String getBankname() {\n        return bankname;\n    }\n\n    public void setBankname(String bankname) {\n        this.bankname = bankname;\n    }\n\n    //fill the code here\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        User user = (User) o;\n        return Objects.equals(username, user.username);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(username);\n    }\n\n    @Override\n    public int compareTo(User o) {\n        return this.username.compareTo(o.getUsername());\n    }\n}\n</code></pre></p>"},{"location":"Java/CollectionAndMaps/#2_1","title":"2","text":"<pre><code>List removeRange() and addAll()\nWe have a lot of ArrayList methods. Let\u2019s see a few of the important ones namely removeRange() and addAll(). You will be provided with a template function that returns ArrayList of User objects.\n\nWrite a program to get the User in the CSV format and display the details as specified in the Sample Input and Output.\n\nStrictly adhere to the object Oriented specifications given in the problem statement. All class names, attribute names and method names should be the same as specified in the problem statement.\n\nCreate a class named User class with the following private attributes.\n\nAttributes  Datatype\nname    String\ncontactNumber   String\nuserName    String\nemail   String\nInclude getters and setters for the above attributes and the default and parameterized constructors.\nFormat for the parameterized constructor is\nUser(String name, String contactNumber, String userName, String email)\n\nInclude the following method in the User class.\n\nMethod  Description\nvoid display()  This method prints the details of the User object.\n\nCreate a class named UserBO which extends ArrayList.\n\nInclude the following methods in the class UserBO.\n\nMethod  Description\nvoid removeUser(int n1,int n2)  This method accepts from and to index to delete the objects from the n1 index and to the n2 index.\nUse removeRange() method.\nstatic UserBO getList() This method returns an UserBO object that contains pre-coded object values in an ArrayList.\n\nCreate a driver class called Main. In the Main method, obtain inputs from the console. Create an object for UserBO and add the User objects to it. For displaying, Iterate through the ArrayList and call the display() method of User class.\n\nInput format:\nThe first line of input is an integer which corresponds to the number 'n' of user details to be added.\nThe next 'n' line input consists of the user details in the CSV format [name, contact number, username, email].\nThen the last line of inputs consists of two integers that correspond to the from and to index.\n\nOutput format:\nUse System.out.printf(\"%-20s%-20s%-20s%-20s\") for displaying the User details.\nRefer to sample Input and Output for formatting specifications.\n\nSample Input and Output:\n[All text in bold corresponds to the input and rest corresponds to output]\n\nEnter the number of User details to be added\n1\nEnter the user 1 detail in csv format\nRam ganesh,9874587457,Ram,ramg@abc.in\nName                Contact Number      Username            Email               \nmohan Raja          9874563210          mohan               mohan@abc.in        \narjun Ravi          4324237             arjun               arjun@abc.in        \nArun kumar          9845671230          arun                arun@abc.in         \nprakash raj         7548921445          prakash             raj@abc.in          \nRam ganesh          9874587457          Ram                 ramg@abc.in         \nEnter the range to be removed from array list\n1\n3\nName                Contact Number      Username            Email               \nmohan Raja          9874563210          mohan               mohan@abc.in        \nprakash raj         7548921445          prakash             raj@abc.in          \nRam ganesh          9874587457          Ram                 ramg@abc.in\n</code></pre> <p>Main.java<pre><code>import java.util.*;\n\npublic class Main{\n    public static void main(String[] args){\n        //Your code here\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"Enter the number of User details to be added\");\n        int n = scanner.nextInt();\n        scanner.nextLine();\n\n        UserBO userList = new  UserBO();\n        UserBO predefinedList =  UserBO.getList();\n\n      userList.addAll(predefinedList);\n\n        for (int i = 1; i &lt;= n; i++) {\n            System.out.printf(\"Enter the user %d detail in csv format\\n\", i);\n            String[] userDetails = scanner.nextLine().split(\",\");\n            userList.add(new User(userDetails[0].trim(), userDetails[1].trim(), userDetails[2].trim(), userDetails[3].trim()));\n        }\n\n        System.out.printf(\"%-20s%-20s%-20s%-20s\\n\", \"Name\", \"Contact Number\", \"Username\", \"Email\");\n         for (User user : userList) {\n            user.display();\n        }\n\n        System.out.println(\"Enter the range to be removed from array list\");\n        int n1 = scanner.nextInt();\n        int n2 = scanner.nextInt();\n        scanner.close();\n\n        userList.removeUser(n1, n2);\n\n        System.out.printf(\"%-20s%-20s%-20s%-20s\\n\", \"Name\", \"Contact Number\", \"Username\", \"Email\");\n        for (User user : userList) {\n            user.display();\n        }\n    }\n}\n</code></pre> User.java<pre><code>import java.util.*;\n\nclass User {\n    private String name;\n    private String contactNumber;\n    private String userName;\n    private String email;\n\n    public User() {}\n\n    public User(String name, String contactNumber, String userName, String email) {\n        this.name = name;\n        this.contactNumber = contactNumber;\n        this.userName = userName;\n        this.email = email;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getContactNumber() {\n        return contactNumber;\n    }\n\n    public void setContactNumber(String contactNumber) {\n        this.contactNumber = contactNumber;\n    }\n\n    public String getUserName() {\n        return userName;\n    }\n\n    public void setUserName(String userName) {\n        this.userName = userName;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public void display() {\n        System.out.printf(\"%-20s%-20s%-20s%-20s\\n\", name, contactNumber, userName, email);\n    }\n}\n</code></pre> UserBO.java<pre><code>import java.util.*;\n\npublic class UserBO extends ArrayList&lt;User&gt;{\n\n    public static UserBO getList(){\n        UserBO u=new UserBO();\n        u.add(new User(\"mohan Raja\",\"9874563210\",\"mohan\",\"mohan@abc.in\"));\n        u.add(new User(\"arjun Ravi\",\"4324237\",\"arjun\",\"arjun@abc.in\"));\n        u.add(new User(\"Arun kumar\",\"9845671230\",\"arun\",\"arun@abc.in\"));\n        u.add(new User(\"prakash raj\",\"7548921445\",\"prakash\",\"raj@abc.in\"));\n        return u;\n    }\n    //Your code here\n\n       public void removeUser(int n1, int n2) {\n        if (n1 &gt; n2 || n1 &lt; 0 || n2 &gt;= this.size()) {\n            return;\n        }\n        this.removeRange(n1, n2);\n    }\n}\n</code></pre></p>"},{"location":"Java/CollectionAndMaps/#3_1","title":"3","text":"<pre><code>Map of Maps\n\n\nIn our application, we gonna implement Map of Map. The value of the map is gonna be another map. This can be helpful in making counts of linked variables. We have the Address class. The address belongs to a city and state. So if we separate addresses based on each state and city maps of maps will be useful. The first map will have the state as key with a map as value. The inner map will have the city as key and count of addresses in that city as value.\n\nMap&lt;String,Map&lt;String,Integer&gt;&gt; is the general format and Map&lt;state,Map&lt;city,count&gt;&gt; is the format for this problem.\n\nCreate a driver class Main and using the main method get the details, create a map, and display the details.\n\nInput Format:\nThe first line has the number of address n.\nThe next n lines have the addresses in CSV format. (area,city,state, pincode)\nRefer to the sample Input and Output for the formatting specifications.\n\nOutput Format:\nOutput has State name in the first line and each city name along with the count of address in the city in the next lines. A new line between 2 different states.\nThe order of output must be in lexicographical order for both state and city.\n\n[All Texts in bold corresponds to the input and rest are output]\nSample Input/Output 1:\n\nEnter the number of address:\n3\nEnter the address:\nAnnanagar,Madurai,Tamil Nadu,666666\nEnter the address:\nGandhipuram,Coimbatore,Tamil Nadu,123456\nEnter the address:\nKKnagar,Madurai,Tamil Nadu,678901\nNumber of entries in city/state wise:\n\nState:Tamil Nadu\nCity:Coimbatore Count:1\nCity:Madurai Count:2\n\nSample Input/Output 2:\n\nEnter the number of address:\n5\nEnter the address:\nAnnanagar,Madurai,Tamil Nadu,666666\nEnter the address:\nGandhipuram,Coimbatore,Tamil Nadu,123456\nEnter the address:\nKKnagar,Madurai,Tamil Nadu,678901\nEnter the address:\nMarathahalli,Banglore,Karnataka,123456\nEnter the address:\nElectronic City,Banglore,Karnataka,123457\nNumber of entries in city/state wise:\n\nState:Karnataka\nCity:Banglore Count:2\n\nState:Tamil Nadu\nCity:Coimbatore Count:1\nCity:Madurai Count:2\n</code></pre> Main.java<pre><code>import java.util.*;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        System.out.println(\"Enter the number of address:\");\n        int n = sc.nextInt();\n        sc.nextLine(); // consume the newline character after reading integer input\n\n        // create the map of maps\n        Map&lt;String, Map&lt;String, Integer&gt;&gt; mapOfMaps = new TreeMap&lt;&gt;();\n\n        for (int i = 0; i &lt; n; i++) {\n            System.out.println(\"Enter the address:\");\n            String[] address = sc.nextLine().split(\",\");\n\n            String area = address[0];\n            String city = address[1];\n            String state = address[2];\n            String pincode = address[3];\n\n            // update the map of maps with the current address\n            if (!mapOfMaps.containsKey(state)) {\n                mapOfMaps.put(state, new TreeMap&lt;&gt;());\n            }\n            Map&lt;String, Integer&gt; cityMap = mapOfMaps.get(state);\n            if (!cityMap.containsKey(city)) {\n                cityMap.put(city, 0);\n            }\n            cityMap.put(city, cityMap.get(city) + 1);\n        }\n\n        // print the output\n        System.out.println(\"Number of entries in city/state wise:\\n\");\n\n        for (String state : mapOfMaps.keySet()) {\n            System.out.println(\"State:\" + state);\n            Map&lt;String, Integer&gt; cityMap = mapOfMaps.get(state);\n            for (String city : cityMap.keySet()) {\n                System.out.println(\"City:\" + city + \" Count:\" + cityMap.get(city));\n            }\n            System.out.println();\n        }\n    }\n}\n</code></pre>"},{"location":"Java/ExceptionHandling/","title":"Exception Handling","text":""},{"location":"Java/ExceptionHandling/#1","title":"1","text":"<pre><code>NumberFormatException\nLet\u2019s learn a common type of exception which you would have come across already. When you use BufferedReader to read input you need to parse String it into various datatype like Integer, Double. For example, If you try to parse a String (\"abc\") into Integer, it throws NumberFormatException. So let's try to handle this NumberFormat exception.\n\nIn our application, while acquiring attributes for classes like ItemType, this exception may occur. So try to handle it in this program.\n\nCreate a class ItemType with the following attribute,\nAttributes  Data type\nname    String\ndeposit Double\ncostPerDay  Double\n\nAdd appropriate getter/setter, default and parameterized constructor. public ItemType(String name, Double deposit, Double costPerDay).\n\nOverride toString() and print the details as in the specified format.\n\nCreate a Main class and test the above class. Display \"The details of the item type are:\" in the main method. Handle the NumberFormatException in the Main Class.\n\nInput and Output format:\nRefer to sample Input and Output for formatting specifications.\n\n[All Texts in bold corresponds to the input and rest are output]\n\nSample Input and Output 1:\n\nEnter the Item type details:\nEnter the name:\nElectronics\nEnter the deposit:\n1000\nEnter the cost per day:\n100\nThe details of the item type are:\nName:Electronics\nDeposit:1000.0\nCost Per Day:100.0\n\nSample Input and Output 2:\n\nEnter the Item type details:\nEnter the name:\nElectronics\nEnter the deposit:\nOne thousand\njava.lang.NumberFormatException: For input string: \"One thousand\"\n</code></pre> <p>Main.java<pre><code>import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input=new Scanner(System.in);\n        String name;\n        Double deposit;\n        Double cost;\n        try{\n        System.out.println(\"Enter the Item type details:\\nEnter the name:\");\n        name=input.next();\n        name+=input.nextLine();\n        System.out.println(\"Enter the deposit:\");\n        deposit=Double.parseDouble(input.nextLine());\n        System.out.println(\"Enter the cost per day:\");\n        cost=Double.parseDouble(input.nextLine());\n        ItemType item=new ItemType(name,deposit,cost);\n        System.out.println(\"The details of the item type are:\");\n        System.out.println(item.toString());\n        input.close();\n        }\n        catch(NumberFormatException e){\n            System.out.println(e);\n        }\n\n\n    }\n}\n</code></pre> ItemType.java<pre><code>/**\n * ItemType\n */\npublic class ItemType {\n\n    String name;\n    Double deposit;\n    Double costPerDay;\n    public String toString(){\n        return \"Name:\"+this.name+\"\\nDeposit:\"+this.deposit+\"\\nCost Per Day:\"+this.costPerDay;\n    }\n    public ItemType(){\n\n    }\n    public ItemType(String name, Double deposit, Double costPerDay){\n        this.name=name;\n        this.deposit=deposit;\n        this.costPerDay=costPerDay;\n    }\n}\n</code></pre></p>"},{"location":"Java/ExceptionHandling/#2","title":"2","text":"<pre><code>ArrayIndexOutOfBoundsException\n\nThe next prominent exception which you will see is ArrayIndexOutOfBoundsException. It occurs when the program tries to access the array beyond its size. As we know arrays have fixed size. So when you try to use array beyond its size it throws this exception. Let's try to handle this exception.\n\nHandling this exception will also prove to be good for our application. For example, if there are only 100 seats in the event and the user tries to book the 105th seat, it will throw this exception. So you must handle it to do a specific job.\n\nCreate an array of size 100 and assume it as seat array. Get the tickets to be booked from the user and handle any exception that occurs in Main Class. At last display all the tickets booked.\n\nInput and Output format:\nThe first line of input consists of an integer which corresponds to the number of seats to be booked.\nThe next n lines of input consist of the integer which corresponds to the seat number.\nRefer to sample Input and Output for formatting specifications.\n\nNote: All Texts in bold corresponds to the input and rest are output.\n\nSample Input and Output 1:\n\nEnter the number of seats to be booked:\n5\nEnter the seat number 1\n23\nEnter the seat number 2\n42\nEnter the seat number 3\n65\nEnter the seat number 4\n81\nEnter the seat number 5\n100\nThe seats booked are:\n23\n42\n65\n81\n100\n\nSample Input and Output 2:\n\nEnter the number of seats to be booked:\n4\nEnter the seat number 1\n12\nEnter the seat number 2\n101\njava.lang.ArrayIndexOutOfBoundsException: 100\n</code></pre> Main.java<pre><code>import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input= new Scanner(System.in);\n        System.out.println(\"Enter the number of seats to be booked:\");\n        int numberOfSeats = input.nextInt();\n        int[] arr= new int[100];\n        try{\n            for (int i = 0; i &lt; numberOfSeats; i++) {\n                System.out.println(\"Enter the seat number \"+(i+1));\n                int seatNumber=input.nextInt();\n                arr[seatNumber-1]=1;\n            }\n            System.out.println(\"The seats booked are:\");\n        for (int i = 0; i &lt; arr.length; i++) {\n            if(arr[i]==1){\n                System.out.println(i+1);\n            }\n        }\n        input.close();\n        }\n        catch(ArrayIndexOutOfBoundsException e){\n            System.out.println(e);\n        }\n\n    }\n}\n</code></pre>"},{"location":"Java/ExceptionHandling/#3","title":"3","text":"<pre><code>Duplicate mobile number exception\n\n\nWrite a java program to find the duplicate mobile number using the exception handling mechanism.\n\nStrictly adhere to the Object-Oriented specifications given in the problem statement. All class names, attribute names and method names should be the same as specified in the problem statement.\n\nCreate a Class called ContactDetail with the following private attributes.\n\nAttributes  Datatype\nmobile  String\nalternateMobile String\nlandLine    String\nemail   String\naddress String\nInclude getters and setters.\nInclude default and parameterized constructors.\nFormat for a parameterized constructor is ContactDetail(String mobile, String alternateMobile,String landLine, String email, String address)\n\nOverride the toString() method to display the Contact details as specified.\n\nCreate a class called ContactDetailBO with following methods\n\nMethod  Description\nstatic void validate(String mobile,String alternateMobile)  This method throws DuplicateMobileNumber exception\nif the mobile and alternateMobile are the same.\n\n\nCreate a driver class called Main. In the Main method, obtain inputs from the user. Validate the mobile and alternateMobile and display the ContactDetail if no exception occurs else handle the exception.\n\nPass the exception message as \"Mobile number and alternate mobile number are same\". If mobile and alternateMobile are the same.\n\nInput and Output format:\nRefer to sample Input and Output for formatting specifications.\n\nNote: All text in bold corresponds to the input and rest corresponds to the output.\n\nSample Input and Output 1:\n\nEnter the contact details\n9874563210,9874563210,0447896541,johndoe@abc.in,22nd street kk nagar chennai\nDuplicateMobileNumberException: Mobile number and alternate mobile number are same\n\nSample Input and Output 2:\n\nEnter the contact details\n9874563210,9876543211,0447896541,johndoe@abc.in,22nd lane RR nagar kovai\nMobile:9874563210\nAlternate mobile:9876543211\nLandLine:0447896541\nEmail:johndoe@abc.in\nAddress:22nd lane RR nagar kovai\n</code></pre> <p>Main.java<pre><code>import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input= new Scanner(System.in).useDelimiter(\"\\\\s*[,\\\\n]\\\\s*\");\n        System.out.println(\"Enter the contact details\");\n        ContactDetail detail=new ContactDetail(input.next(),input.next(),input.next(),input.next(),input.next());\n        try{\n        ContactDetailBO.validate(detail.mobile, detail.alternateMobile);\n        System.out.println(detail.toString()); \n        input.close();\n        }\n        catch(DuplicateMobileNumberException e){\n            System.out.print(\"DuplicateMobileNumberException: \");\n            System.out.print(e.getMessage());\n\n        }\n    }\n}\n</code></pre> ContactDetails.java<pre><code>public class ContactDetail {\n    String mobile;\n    String alternateMobile;\n    String landLine;\n    String email;\n    String address;\n    public String toString(){\n        return \"Mobile:\"+this.mobile+\"\\nAlternate mobile:\"+this.alternateMobile+\"\\nLandLine:\"+this.landLine+\"\\nEmail:\"+this.email+\"\\nAddress:\"+this.address;\n    }\n    public ContactDetail(){\n\n    }\n    public ContactDetail(String mobile, String alternateMobile,String landLine, String email, String address){\n        this.mobile=mobile;\n        this.alternateMobile=alternateMobile;\n        this.landLine=landLine;\n        this.email=email;\n        this.address=address;\n    }\n\n}\n</code></pre> ContactDetailBO.java<pre><code>public class ContactDetailBO {\n    static void validate(String mobile,String alternateMobile) throws DuplicateMobileNumberException{\n\n            if(mobile.equals(alternateMobile)){\n                throw new DuplicateMobileNumberException(\"Mobile number and alternate mobile number are same\");\n            }\n\n\n    }\n}\n</code></pre> DuplicateMobileNumberException.java<pre><code>public class DuplicateMobileNumberException extends Exception {\n    public DuplicateMobileNumberException(String str){\n        super(str);\n    }\n}\n</code></pre></p>"},{"location":"Java/ExceptionHandling/#iassess","title":"iAssess","text":""},{"location":"Java/ExceptionHandling/#1_1","title":"1","text":"<pre><code>Parse Exception\n\nFor our application, we would have obtained date inputs. If the user enters a different format other than specified, an Invalid Date Exception occurs and the program is interrupted. To avoid that, handle the exception and prompt the user to enter the right format as specified.\n\nCreate a driver class called Main. In the main method, Obtain start time and end time for stage event show, if an exception occurs, handle the exception and notify the user about the right format.\n\nInput format:\nThe input consists of the start date and end date. \nThe format for the date is dd-MM-yyyy-HH:mm:ss\n\nOutput format:\nRefer sample Input and Output for formatting specifications\n\n\nNote: All text in bold corresponds to the input and rest corresponds to the output.\n\nSample Input and Output 1:\n\nEnter the stage event start date and end date\n27-01-2017-12\nInput dates should be in the format 'dd-MM-yyyy-HH:mm:ss'\n\nSample Input and Output 2:\n\nEnter the stage event start date and end date\n27-01-2017-12:0:0\n28-01-2017-12:0:0\nStart date:27-01-2017-12:00:00\nEnd date:28-01-2017-12:00:00\n</code></pre> Main.java<pre><code>import java.text.ParseException;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) throws ParseException{\n        try {\n            Scanner input =new Scanner(System.in);\n            LocalDateTime start;\n            LocalDateTime end;\n            DateTimeFormatter formatter=DateTimeFormatter.ofPattern(\"dd-MM-yyyy-HH:m:s\");\n            DateTimeFormatter formatter1=DateTimeFormatter.ofPattern(\"dd-MM-yyyy-HH:mm:ss\");\n            System.out.println(\"Enter the stage event start date and end date\");\n            start=LocalDateTime.parse(input.next(),formatter);\n            end=LocalDateTime.parse(input.next(),formatter);\n            System.out.println(\"Start date:\"+start.format(formatter1));\n            System.out.println(\"End date:\"+end.format(formatter1));\n            input.close();\n        } catch (Exception e) {\n            // TODO: handle exception\n            System.out.println(\"Input dates should be in the format 'dd-MM-yyyy-HH:mm:ss'\");\n        }\n\n\n    }\n}\n</code></pre>"},{"location":"Java/ExceptionHandling/#2_1","title":"2","text":"<pre><code>Weak password Exception\nA typical requirement of a custom exception would be for validation purposes. In this exercise, Let's validate a password input. A password is said to be strong if it satisfies the following criteria\n    i)  It should be a minimum of 10 characters and a maximum of 20 characters.\n    ii) It should contain at least one digit.\n    iii)It should contain at least one special character (non-numeric, non-alphabetic).\n    iv)It should contain at least one letter.\n\nIf the password fails any one of the criteria, it is considered as weak.\n\nStrictly adhere to the Object-Oriented specifications given in the problem statement. All class names, attribute names and method names should be the same as specified in the problem statement.\n\nCreate a class called User with the following private attributes.\n\nAttributes  Datatype\nname    String\nmobile  String\nusername    String\npassword    String\n\n\nInclude getters and setters.\nInclude default and parameterized constructors.\nFormat for the parameterized constructor is User(String name, String mobile, String username, String password)\nOverride the toString() method to display the User detail\n\nCreate a class called UserBO with the following methods.\n\nMethod  Description\nstatic void validate(User u)    This method throws WeakPasswordNumber exception if the Password is weak.\n\n\nCreate a driver class called Main. In the Main method, obtain inputs from the user. Validate the password and if there is an exception, handle the exception.\n\nPass the exception message as \"Your password is weak\".\n\nSample Input and Output:\nRefer to sample Input and Output for formatting specifications.\n\nNote: All text in bold corresponds to the input and rest corresponds to the output.\n\nSample Input and Output 1:\n\nEnter the user details\nJohn Doe,9876543210,john,johndoe\nWeakPasswordException: Your password is weak\n\nSample Input and Output 2:\n\nEnter the user details\nJane doe,9876543210,Jane,Janedoe@123\nName:Jane doe\nMobile:9876543210\nUsername:Jane\nPassword:Janedoe@123\n</code></pre> <p>Main.java<pre><code>import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n        Scanner input=new Scanner(System.in).useDelimiter(\"\\\\s*[,\\\\n]\\\\s*\");\n        System.out.println(\"Enter the user details\");\n        User detail=new User(input.next(),input.next(),input.next(),input.next());\n        UserBO.validate(detail);\n        System.out.println(detail.toString());\n        input.close();\n        } catch (WeakPasswordException e) {\n            // TODO: handle exception\n            System.out.print(\"WeakPasswordException: \");\n           System.out.println(e.getMessage()); \n        }\n\n    }\n}\n</code></pre> User.java<pre><code>public class User {\n    private String name;\n    private String mobile;\n    private String username;\n    private String password;\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n    public String getMobile() {\n        return mobile;\n    }\n    public void setMobile(String mobile) {\n        this.mobile = mobile;\n    }\n    public String getUsername() {\n        return username;\n    }\n    public void setUsername(String username) {\n        this.username = username;\n    }\n    public String getPassword() {\n        return password;\n    }\n    public void setPassword(String password) {\n        this.password = password;\n    }\n    public User(String name, String mobile, String username, String password) {\n        this.name = name;\n        this.mobile = mobile;\n        this.username = username;\n        this.password = password;\n    }\n    public String toString(){\n        return \"Name:\"+this.name+\"\\nMobile:\"+this.mobile+\"\\nUsername:\"+this.username+\"\\nPassword:\"+this.password;\n    }\n}\n</code></pre> UserBO.java<pre><code>public class UserBO {\n    static void validate(User u) throws WeakPasswordException {\n        String password=u.getPassword();\n        int length=password.length();\n        int digit=0;\n        int special=0;\n        int letter=0;\n        for (int i = 0; i &lt; length; i++) {\n            if(Character.isDigit(password.charAt(i))){\n                digit++;\n            }\n            if(Character.isLetter(password.charAt(i))){\n                letter++;\n            }\n            if(!Character.isDigit(password.charAt(i))&amp;&amp;!Character.isLetter(password.charAt(i))&amp;&amp;!Character.isWhitespace(password.charAt(i))){\n                special++;\n            }\n        }\n\n\n        if(length&gt;9&amp;&amp;length&lt;21&amp;&amp;digit&gt;0&amp;&amp;letter&gt;0&amp;&amp;special&gt;0){\n\n\n        }\n        else{\n            throw new WeakPasswordException(\"Your password is weak\");\n        }\n\n    }\n}\n</code></pre> WeakPasswordException.java<pre><code>public class WeakPasswordException extends Exception {\n    public WeakPasswordException(String s){\n        super(s);\n\n    }\n}\n</code></pre></p>"},{"location":"Java/FeaturesOfJava8/","title":"Features of Java 8","text":""},{"location":"Java/FeaturesOfJava8/#1","title":"1","text":"<pre><code>Write a program to get Expenses details and Salary detail from the user, add it to the list, map all expense and calculate sum of all expenses using reduce from Java Streams and check for the following conditions.\n\nIf the total expenses go above salary amount, then display the message \"Expenses exceeds Salary\"\nIf the total expenses are less than or equal to the salary amount, then display the remaining amount as \"Savings amount will be Rs&lt;..&gt;\".\nStrictly adhere to the Object-Oriented specifications given in the problem statement. All class names, attribute names, and method names should be the same as specified in the problem statement.\n\n\n\nCreate a class named Expenses with the following private attributes/variables.\n\nData type   Variable\nString  expenseType\nDouble  cost\nInclude appropriate getters and setters.\nInclude default and parameterized constructors\n\nexpenseType include food, rent, shopping, groceries, ebBill(electricity bill)\n\nCreate a class Main with the main method. In the method, get Expenses details from the user and also salary from the user, add it to the list, map the expense cost, and get sum using reduce method.\n\n\n\nSample Input and Output 1:\n\nEnter expense for food\n800\nEnter expense for rent\n1800\nEnter expense for shopping\n2000\nEnter expense for groceries\n1500\nEnter expense for electricity\n1500\nEnter salary\n10000\nSavings amount will be Rs.2400.0\n\nSample Input and Output 2:\n\nEnter expense for food\n4000\nEnter expense for rent\n7500\nEnter expense for shopping\n6000\nEnter expense for groceries\n5800\nEnter expense for electricity\n3000\nEnter salary\n25000\nExpenses exceeds Salary\n</code></pre> <p>Main.java<pre><code>import java.util.ArrayList;\nimport java.util.Scanner;\nimport java.text.DecimalFormat;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input=new Scanner(System.in);\n        ArrayList&lt;Expenses&gt; expense=new ArrayList&lt;&gt;();\n        System.out.println(\"Enter expense for food\");\n        expense.add(new Expenses(\"Food\",input.nextDouble()));\n        System.out.println(\"Enter expense for rent\");\n        expense.add(new Expenses(\"Rent\",input.nextDouble()));\n        System.out.println(\"Enter expense for shopping\");\n        expense.add(new Expenses(\"Shopping\",input.nextDouble()));\n        System.out.println(\"Enter expense for groceries\");\n        expense.add(new Expenses(\"Groceries\",input.nextDouble()));\n        System.out.println(\"Enter expense for electricity\");\n        expense.add(new Expenses(\"Electricity\",input.nextDouble()));\n        System.out.println(\"Enter salary\");\n        Double salary=input.nextDouble();\n        Double cost=0.0;\n        DecimalFormat decimal=new DecimalFormat(\"0.0\");\n        for (int i = 0; i &lt; expense.size(); i++) {\n            cost+=expense.get(i).getCost();\n        }\n        if(cost&lt;=salary){\n            System.out.println(\"Savings amount will be Rs.\" +decimal.format(salary-cost));\n        }\n        else{\n            System.out.println(\"Expenses exceeds Salary\");\n        }\n        input.close();\n\n    }\n}\n</code></pre> Expenses.java<pre><code>/**\n * Expenses\n */\npublic class Expenses {\n\n    private String expenseType;\n    public String getExpenseType() {\n        return expenseType;\n    }\n    public void setExpenseType(String expenseType) {\n        this.expenseType = expenseType;\n    }\n    private Double cost;\n    public Double getCost() {\n        return cost;\n    }\n    public void setCost(Double cost) {\n        this.cost = cost;\n    }\n    public Expenses(){\n\n    }\n    public Expenses(String expenseType,Double cost){\n        this.expenseType=expenseType;\n        this.cost=cost;\n    }\n\n}\n</code></pre></p>"},{"location":"Java/FeaturesOfJava8/#2","title":"2","text":"<pre><code>Event List\nThe event details we have got are in a comma-separated format. But suddenly there is a need for the details in a different format. So get details in csv format and change comma into '|'. Write a program to get event details separated by a comma and change it into a format in which the details are separated by Pipe.\n\nCreate a class Event with the following private attributes\n\nAttributes  Datatype\neventName   String\norganiserName   String\neventCost   Double\nInclude appropriate getters and setters.\nCreate default constructor and a parameterized constructor with arguments in order Event(String eventName, String organiserName, Double eventCost).\n\n\nInclude the following public methods in the Event class\n\nMethod  Description\nvoid display(List&lt;Event&gt; eventList) This method takes event list as parameter and iterates\nover the list using Lambda Expression\nand displays the event details.\n\nCreate a driver class Main to access the above class.\n\nInput Format:\nThe first line of input corresponds to the number of events 'n'.\nThe next 'n' line of inputs corresponds to the event details in the CSV format of (Event Name,Organiser Name,Event Cost).\nRefer to sample input for formatting specifications.\n\nOutput Format:\nThe output consists of event details separated by \"|\".\nRefer to sample output for formatting specifications.\n\n\n[All text in bold corresponds to input and rest corresponds to output]\nSample Input and Output-1:\n\nEnter the number of events\n2\nEnter event details in CSV(Event Name,Organiser Name,Event Cost)\nJaqulos,Einstein,1230000\nHip Hop,Wright Brothers,300000\nJaqulos|Einstein|1230000.0\nHip Hop|Wright Brothers|300000.0\n</code></pre> <p>Main.java<pre><code>import java.util.ArrayList;\nimport java.util.Scanner;\n\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input= new Scanner(System.in);//.useDelimiter(\"\\\\s*[,\\\\n]\\\\s*\");\n        System.out.println(\"Enter the number of events\");\n        int numberOfEvents= input.nextInt();\n        System.out.println(\"Enter event details in CSV(Event Name,Organiser Name,Event Cost)\");\n        ArrayList&lt;Event&gt; events=new ArrayList&lt;Event&gt;();\n        for (int i = 0; i &lt; numberOfEvents; i++) {\n            String eventDetail=input.next();\n            eventDetail+=input.nextLine();\n            String[] details= eventDetail.split(\",\");\n            events.add(new Event(details[0],details[1],Double.parseDouble(details[2])));\n        }\n\n       Event.display(events);\n\n        input.close();\n    }\n}\n</code></pre> Event.java<pre><code>import java.util.ArrayList;\n\npublic class Event {\n    private String eventName;\n    public String getEventName() {\n        return eventName;\n    }\n    public void setEventName(String eventName) {\n        this.eventName = eventName;\n    }\n    private String organiserName;\n    public String getOrganiserName() {\n        return organiserName;\n    }\n    public void setOrganiserName(String organiserName) {\n        this.organiserName = organiserName;\n    }\n    private Double eventCost;\n    public Double getEventCost() {\n        return eventCost;\n    }\n    public void setEventCost(Double eventCost) {\n        this.eventCost = eventCost;\n    }\n    static void display(ArrayList&lt;Event&gt; eventList){\n        eventList.forEach(t -&gt;{\n            System.out.println(t.getEventName()+\"|\"+t.getOrganiserName()+\"|\"+t.getEventCost());\n        } );\n    }\n    public Event(){\n\n    }\n    public Event(String eventName,String organiserName,Double eventCost){\n        this.eventName=eventName;\n        this.organiserName=organiserName;\n        this.eventCost=eventCost;\n\n    }\n}\n</code></pre></p>"},{"location":"Java/FeaturesOfJava8/#iassess","title":"iAssess","text":"<pre><code>Write a program to get Ticket Booking details from the user, add it to the list, sort the list by price, and display it using sorted and forEach from Java Streams.\n\nStrictly adhere to the Object-Oriented specifications given in the problem statement. All class names, attribute names, and method names should be the same as specified in the problem statement.\n\n\n\nCreate a class named TicketBooking with the following private attributes/variables.\n\nData type   Variable\nString  customerName \nInteger noOfTickets\nDouble  price\nInclude appropriate getters and setters.\nInclude default and parameterized constructors\nInclude toString function\n\n\n\nCreate a class Main with the main method. In the method, get TicketBooking details from the user, add it to the list, sort the list by price, and display it.\n\nUse the below format to print the details in table :\n\nSystem.out.format(\"%-10s %-15s %-15s\\n\", \"Customer\", \"No Of Tickets\", \"Price\");\n\n\n\nSample Input and Output:\n\nEnter number of bookings\n3\nEnter customer name\nRavi\nEnter number of tickets\n4\nEnter the price\n320\nEnter customer name\nCollin\nEnter number of tickets\n2\nEnter the price\n210\nEnter customer name\nMohan\nEnter number of tickets\n1\nEnter the price\n160\nCustomer   No Of Tickets   Price          \nMohan      1               160.0          \nCollin     2               210.0          \nRavi       4               320.0\n</code></pre> <p>Main.java<pre><code>import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input=new Scanner(System.in);\n        System.out.println(\"Enter number of bookings\");\n        Integer numberOfBookings=input.nextInt();\n        ArrayList&lt;TicketBooking&gt; ticket=new ArrayList&lt;&gt;();\n        for (int i = 0; i &lt; numberOfBookings; i++) {\n        System.out.println(\"Enter customer name\");\n        String customerName=input.next();\n        System.out.println(\"Enter number of tickets\");\n        Integer numberOfTickets=input.nextInt();\n        System.out.println(\"Enter the price\");\n        Double price=input.nextDouble();\n        ticket.add(new TicketBooking(customerName, numberOfTickets, price));\n        }\n        //Collections.sort(ticket);\n        Collections.sort(ticket, Comparator.comparing(TicketBooking::getPrice));\n        System.out.format(\"%-10s %-15s %-15s\\n\", \"Customer\", \"No Of Tickets\", \"Price\");\n        for (int i = 0; i &lt; numberOfBookings; i++) {\n            System.out.format(\"%-10s %-15s %-15s\\n\", ticket.get(i).getCustomerName(), ticket.get(i).getNoOfTickets(), ticket.get(i).getPrice());\n        }\n\n    }\n}\n</code></pre> TicketBooking.java<pre><code>import java.util.Comparator;\n\npublic class TicketBooking {\n    private String customerName ;\n    private Integer noOfTickets ;\n    private Double price ;\n    public String getCustomerName() {\n        return customerName;\n    }\n    public void setCustomerName(String customerName) {\n        this.customerName = customerName;\n    }\n    public Integer getNoOfTickets() {\n        return noOfTickets;\n    }\n    public void setNoOfTickets(Integer noOfTickets) {\n        this.noOfTickets = noOfTickets;\n    }\n    public Double getPrice() {\n        return price;\n    }\n    public void setPrice(Double price) {\n        this.price = price;\n    }\n    public TicketBooking(String customerName, Integer noOfTickets, Double price) {\n        this.customerName = customerName;\n        this.noOfTickets = noOfTickets;\n        this.price = price;\n    }\n    public String toString(){\n        return \"\";\n    }\n}\n</code></pre></p>"},{"location":"Java/FundamentalClasses/","title":"Fundamental Classes","text":""},{"location":"Java/FundamentalClasses/#1","title":"1","text":"<pre><code>Using contains() and trim() method\n\nSunil has finished most of his application for the fair, it's time to focus on minor details that went wrong during a test run of his application in this module. Accidentally some gibberish text with leading and trailing got copied to the clipboard and got pasted in some of the text documents. But, still. He has the gibberish text with him, he can manually load each document, and find the text and delete it. Think it will take ages, no he can think of a time saver. He can use his programming skills, he can load each document in a program and find in which files the text got copied. Even though, he feels difficult to identify it. So let him.\n\nwrite a program to find whether the gibberish text is present in the string. Assume text of the document is given as the input to the program.\n\nCreate a driver class called Main. In the Main method, obtain the inputs from the console and prompt whether the gibberish text is present in the main text.\n\nProblem Constraints:\n\nUse contains() and trim()\n\nInput and Output format:\nThe first line of the input consists of the text of the document.\nThe second line of the input consists of a string that has to be found in the given text.\n\nNote: All text in bold corresponds to the input and rest corresponds to the output.\n\nSample Input and output 1:\n\nEnter the text from the document\nOne fine morning, a minister from Emperor Akbar's court had gathered in the assembly hall. He informed the Emperor that all his valuables had been stolen by a thief the previous night.\nEnter the string to be found in the data\n    stolen   \nString is found in the document\n\nSample Input and output 2:\n\nEnter the text from the document\nOne fine morning, a minister from Emperor Akbar's court had gathered in the assembly hall. He informed the Emperor that all his valuables had been stolen by a thief the previous night.\nEnter the string to be found in the data\n    Birbal\nString is not found in the document\n</code></pre> Main.java<pre><code>import java.util.Scanner;\n\n/**\n * Main\n */\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        System.out.println(\"Enter the text from the document\");\n        String text= input.next();\n        text+= input.nextLine();\n        System.out.println(\"Enter the string to be found in the data\");\n        String string= input.next();\n        string.trim();\n        if(text.contains(string)){\n            System.out.println(\"String is found in the document\");\n        }\n        else{\n            System.out.println(\"String is not found in the document\");\n        }\n        input.close();\n    }\n}\n</code></pre>"},{"location":"Java/FundamentalClasses/#2","title":"2","text":"<pre><code>String Builder\nStringBuilder class is used to create mutable (modifiable) string. StringBuilders are used when the String has to be modified constantly. We recently observed that the availability of items for the stall is hard to know. So we are gonna program that requirement here. Get the availability of the items from the vendors. They are providing the list separated by \"$\". So use string builder and display the details of the items along with their availability. The list provided by vendors only have the available numbers of the item. We don't want that, so just display whether the item is available or not.\n\nCreate a class Item with following private attributes\n\nAttributes  Datatype\nname    String\ntype    String\ncost    Integer\navailableQuantity   Integer\nInclude appropriate getters and setters\nCreate default constructor and a parameterized constructor with arguments in order Item(String name, String type, Integer cost, Integer availableQuantity).\n\nCreate a driver class named Main to test the above class.\n\nNote:\nStrictly adhere to the Object-Oriented Specifications given in the problem statement.All class names, attribute names and method names should be the same as specified in the problem statement.\n\nInput Format:\nThe first line input corresponds to the number of items 'n'.\nThe next 'n' line of inputs corresponds to the item details in the format of `(Item Name$Item Type$Item Cost$Item Availability)`.\nRefer sample input for formatting specifications.\n\nOutput Format:\nThe output consists Item details in the CSV format.If the available quantity of the item is 0 then make it as \"Not Available\" else \"Available\".\nRefer sample output for formatting specifications.\n\nSample Input/Output-1:\nEnter the number of items:\n3\nEnter the item details in the format`(Item Name$Item Type$Item Cost$Item Availability)`\n`Wallets$Leather$1200$10\nNotebooks$Papers$200$0\nHeadphones$Electronics$800$3`\nItems:\nWallets,Leather,1200,Available\nNotebooks,Papers,200,Not Available\nHeadphones,Electronics,800,Available\n</code></pre> <p>Main.java<pre><code>import java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input =new Scanner(System.in).useDelimiter(\"\\\\s*[$\\\\n]\\\\s*\");\n        System.out.println(\"Enter the number of items:\");\n        int numberOfItems=input.nextInt();\n        ArrayList&lt;Item&gt; item= new ArrayList&lt;Item&gt;();\n        System.out.println(\"Enter the item details in the format(Item Name$Item Type$Item Cost$Item Availability)\");\n        for (int i = 0; i &lt; numberOfItems; i++) {\n            item.add(new Item(input.next(),input.next(),input.nextInt(),input.nextInt()));\n        }\n        System.out.println(\"Items:\");\n\n\n        for (int index = 0; index &lt; numberOfItems; index++) {\n            StringBuilder sb=new StringBuilder();\n            sb.append(item.get(index).getName());\n            sb.append(\",\");\n            sb.append(item.get(index).getType());\n            sb.append(\",\");\n            sb.append(item.get(index).getCost());\n            sb.append(\",\");\n            sb.append(item.get(index).checkAvailable());\n\n            System.out.println(sb);\n        }\n        input.close();\n    }\n}\n</code></pre> Item.java<pre><code>public class Item {\n    private String name;\n    private String type;\n    private Integer cost;\n    private Integer availableQuantity;\n    public String checkAvailable(){\n        if(this.availableQuantity==0){\n            return \"Not Available\";\n        }\n        else{\n            return \"Available\";\n        }\n    }\n    public Item(){\n\n    }\n    public Item(String name, String type, Integer cost, Integer availableQuantity){\n        this.name=name;\n        this.type=type;\n        this.cost=cost;\n        this.availableQuantity=availableQuantity;\n    }\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n    public String getType() {\n        return type;\n    }\n    public void setType(String type) {\n        this.type = type;\n    }\n    public Integer getCost() {\n        return cost;\n    }\n    public void setCost(Integer cost) {\n        this.cost = cost;\n    }\n    public Integer getAvailableQuantity() {\n        return availableQuantity;\n    }\n    public void setAvailableQuantity(Integer availableQuantity) {\n        this.availableQuantity = availableQuantity;\n    }\n}\n</code></pre></p>"},{"location":"Java/FundamentalClasses/#3","title":"3","text":"<pre><code>Date Formats\n\nSo far, we have got the dates from the user in MM-dd-yyyy format. but in some reports, we want them in some other formats. So write a program to convert the dates gotten from the user into different formats.\n\nCreate a driver class named Main and do all manipulation in the main method.\n\nInput Format:\nThe first line input corresponds to the date that is to be processed in various date formats.\nRefer sample input for formatting specifications.\n\nOutput Format:\nThe output consists of date in the format of (\"EEE, MMM d, yy\" , \"dd.MM.yyyy\" , \"dd/MM/yyyy\").\nRefer sample output for formatting specifications.\n\nSample Input/Output-1:\nEnter the date to be formatted:(MM-dd-yyyy)\n10-20-1996\nDate Format with EEE, MMM d, yy : Sun, Oct 20, 96\nDate Format with dd.MM.yyyy : 20.10.1996\nDate Format with dd dd/MM/yyyy : 20/10/1996\n</code></pre> Main.java<pre><code>import java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Scanner;\n\npublic class Main {\n   public static void main(String[] args) {\n    Scanner input= new Scanner(System.in);\n    System.out.println(\"Enter the date to be formatted:(MM-dd-yyyy)\");\n    DateTimeFormatter dateFormat0 = DateTimeFormatter.ofPattern(\"MM-dd-yyyy\");\n    LocalDate date=LocalDate.parse(input.next(),dateFormat0);\n    DateTimeFormatter dateFormat1 = DateTimeFormatter.ofPattern(\"EEE, MMM d, yy\");\n    System.out.println(\"Date Format with EEE, MMM d, yy : \"+dateFormat1.format(date));\n    DateTimeFormatter dateFormat2 = DateTimeFormatter.ofPattern(\"dd.MM.yyyy\");\n    System.out.println(\"Date Format with dd.MM.yyyy : \"+dateFormat2.format(date));\n    DateTimeFormatter dateFormat3 = DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");\n    System.out.println(\"Date Format with dd dd/MM/yyyy : \"+dateFormat3.format(date));\n    input.close();\n   } \n}\n</code></pre>"},{"location":"Java/FundamentalClasses/#iassess","title":"iAssess","text":""},{"location":"Java/FundamentalClasses/#1_1","title":"1","text":"<pre><code>StringBuilder\n\nFor more practice in StringBuilder let's try the exercise below. Given a code, try to change the code to expected format. The first 2 letters correspond to the city code, DH - Delhi MB - Mumbai KL - Kolkata. The digits following the city code correspond to the reference number. In the output code, the city code changes as given below.\nDH - DEL\nMB - MUM\nKL - KOL\n\nAlso, need to maintain uniformity in the number of digits in the reference number be 5 digits.\nCreate a driver class called Main. In the Main method, obtain the input from the console and print the formatted code.\nNote: Use StringBuilder\n\n[All text in bold corresponds to the input and rest corresponds to the output]\nSample Input/Output 1:\n\nEnter the code\nDH1\nFormatted code\nDEL00001\n\nSample Input/Output 2:\n\nEnter the code\nMB12345\nFormatted code\nMUB12345\n</code></pre> Main.java<pre><code>import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.println(\"Enter the code\");\n        String code = scanner.nextLine();\n\n        StringBuilder formattedCode = new StringBuilder(code);\n\n        if (code.substring(0, 2).equals(\"DH\")) {\n            formattedCode.replace(0, 2,\"DEL\");\n        } else if (code.substring(0, 2).equals(\"MB\")) {\n            formattedCode.replace(0, 2,\"MUB\");\n        } else if (code.substring(0, 2).equals(\"KL\")) {\n            formattedCode.replace(0, 2,\"KOL\");\n        }\n\n        int referenceNumber = Integer.parseInt(code.substring(2));\n\n        formattedCode.replace(3, formattedCode.length()+1, String.format(\"%05d\", referenceNumber));\n\n        System.out.println(\"Formatted code\");\n        System.out.println(formattedCode.toString());\n    }\n}\n</code></pre>"},{"location":"Java/FundamentalClasses/#2_1","title":"2","text":"<pre><code>Date Processing --- Compare dates\nWe realized that there are many events held on different dates and lasts for the different duration. And we want the count of events that are held only for one day so the arrangements of the hall can be made. Now we have a list of events with the name along with starting and ending date in CSV format. So write a program to split them and display the number of 1-day events.\n\nCreate class Event with following private attributes\n\nAttributes  Datatype\neventName   String\nstartDate   Date\nendDate Date\nInclude appropriate getters and setters.\nCreate default constructor and a parameterized constructor with arguments in order Event(String eventName, Date startDate, Date endDate).\n\nNote:\nStrictly adhere to the Object-Oriented Specifications given in the problem statement.All class names, attribute names and method names should be the same as specified in the problem statement.\n\nCreate a driver class named Main to test the above class.\n\nInput Format:\nThe first line input corresponds to the number of events 'n'.\nThe next 'n' lines of input corresponding to the event details in CSV format(Event Name,Start Date,End Date).\nRefer sample input for formatting specifications.\n\nOutput Format:\nThe output consists of 1-day event names. If no 1-day event present, then display \"No Events\".\nRefer sample output for formatting specifications.\n\n[All text in bold corresponds to input and rest corresponds to output]\nSample Input/Output-1:\n\nEnter the number of Events\n3\nEnter event details in CSV(Event Name,Start Date,End Date) Date:dd/MM/yyyy\nReunion,28/02/2017,28/02/2017\nParty,30/06/2017,05/07/2017\nWedding,23/10/2017,24/10/2017\n1-day Events:\nReunion\n\nSample Input/Output-2:\nEnter the number of Events\n2\nEnter event details in CSV(Event Name,Start Date,End Date) Date:dd/MM/yyyy\nCelebration,30/06/1998,31/06/1998\nChristmas Party,22/01/2000,25/02/2000\n1-day Events:\nNo Events\n</code></pre> <p>Main.java<pre><code>import java.util.*;\nimport java.text.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        DateFormat dateFormat = new SimpleDateFormat(\"dd/MM/yyyy\");\n\n        // Read the number of events\n        System.out.println(\"Enter the number of Events\");\n        int n = scanner.nextInt();\n        scanner.nextLine();\n\n        List&lt;Event&gt; events = new ArrayList&lt;&gt;();\n\n        // Read the details of each event and create objects of the Event class\n        System.out.println(\"Enter event details in CSV(Event Name,Start Date,End Date) Date:dd/MM/yyyy\");\n        for (int i = 0; i &lt; n; i++) {\n            String input = scanner.nextLine();\n            String[] tokens = input.split(\",\");\n            String eventName = tokens[0];\n            Date startDate = null;\n            Date endDate = null;\n\n            try {\n                startDate = dateFormat.parse(tokens[1]);\n                endDate = dateFormat.parse(tokens[2]);\n            } catch (ParseException e) {\n                e.printStackTrace();\n            }\n\n            events.add(new Event(eventName, startDate, endDate));\n        }\n\n        // Check for 1-day events and display their names\n        List&lt;String&gt; oneDayEvents = new ArrayList&lt;&gt;();\n        for (Event event : events) {\n            if (event.isOneDayEvent()) {\n                oneDayEvents.add(event.getEventName());\n            }\n        }\n\n        // Display the names of all 1-day events\n        System.out.println(\"1-day Events:\");\n        if (oneDayEvents.size() == 0) {\n            System.out.println(\"No Events\");\n        } else {\n            for (String eventName : oneDayEvents) {\n                System.out.println(eventName);\n            }\n        }\n\n        scanner.close();\n    }\n}\n</code></pre> Event.java<pre><code>import java.util.*;\nimport java.text.*;\n\nclass Event {\n    private String eventName;\n    private Date startDate;\n    private Date endDate;\n\n    // Default constructor\n    public Event() {}\n\n    // Parameterized constructor\n    public Event(String eventName, Date startDate, Date endDate) {\n        this.eventName = eventName;\n        this.startDate = startDate;\n        this.endDate = endDate;\n    }\n\n    // Getters and setters\n    public String getEventName() {\n        return eventName;\n    }\n\n    public void setEventName(String eventName) {\n        this.eventName = eventName;\n    }\n\n    public Date getStartDate() {\n        return startDate;\n    }\n\n    public void setStartDate(Date startDate) {\n        this.startDate = startDate;\n    }\n\n    public Date getEndDate() {\n        return endDate;\n    }\n\n    public void setEndDate(Date endDate) {\n        this.endDate = endDate;\n    }\n\n    // Method to check if the event is for only one day\n    public boolean isOneDayEvent() {\n        return startDate.compareTo(endDate) == 0;\n    }\n}\n</code></pre></p>"},{"location":"Java/JDBC/","title":"JDBC","text":"<p>oracle.properties<pre><code>db.url = jdbc:oracle:thin:@localhost:1521:xe\ndb.username = root\ndb.password = student\n</code></pre> DBConnection.java<pre><code>import java.sql.*;\nimport java.util.ResourceBundle;\npublic class DBConnection {\n    public static Connection getConnection() throws ClassNotFoundException, SQLException {        \n        ResourceBundle rb = ResourceBundle.getBundle(\"oracle\");\n        String url = rb.getString(\"db.url\");\n        String username = rb.getString(\"db.username\");\n        String password = rb.getString(\"db.password\");\n        //fill your code here\n\n        Connection con = null;\n\n        try {\n            Class.forName(\"oracle.jdbc.driver.OracleDriver\");\n            con = DriverManager.getConnection(url, username, password);\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n        return con;\n    }\n}\n</code></pre></p>"},{"location":"Java/JDBC/#1","title":"1","text":"<p><code>Select Statement</code></p> <pre><code>Write a program to retrieve all the records present in the Book table and display those records in the specified format using the SELECT select.\n\nStrictly adhere to the Object-Oriented specifications given in the problem statement. All class names, attribute names and method names should be the same as specified in the problem statement.\n\n\n\nCreate a class named Book with the following private attributes/variables.\n\nData type   Variable\nInteger id\nString  title\nString  category\nString  author\nDouble  price\nInclude appropriate getters and setters.\nInclude default and parameterized constructors in the order public Book(Integer id, String title, String category, String author, Double price)\n\n\n\nCreate a class BookdDAO with the following method.\n\nMethod Name Description\nArrayList&lt;Book&gt; listBooks() This method is used to list the all the books in the database.\n\n\nCreate a class DBConnection with following method.\n\nMethod  Description\npublic static Connection getConnection()    This method is used to connect the java application with oracle database. Here register the JDBC driver for the application, configure the database properties(fetch from oracle.properties) and return the connection object.\n\n\nCreate a class Main with main method. In the method, create instances of the above classes and test the above classes.\n\nUse the below format to print the details in table :\nSystem.out.format(\"%-5s %-20s %-20s %-10s %s\\n\",\"Id\",\"Title\",\"Category\",\"Author\",\"Price\");\n\n\n\noracle.properties :\n\ndb.url = jdbc:oracle:thin:@localhost:1521:xe\ndb.username = root\ndb.password = student\n\nUse the below code to retrieve the connection details from oracle.properties to establish connection\n\nResourceBundle rb = ResourceBundle.getBundle(\"oracle\");\nString url = rb.getString(\"db.url\");\nString user = rb.getString(\"db.username\");\nString pass = rb.getString(\"db.password\");\n\nTable Properties:\n\ncreate table book(\nid number(10) not null,\ntitle VARCHAR2(45) not null,\ncategory VARCHAR2(45) not null,\nauthor VARCHAR2(45) not null,\nprice binary_double not null,\nprimary key(id));\n\nDownload the oracle jar file in the below link.\nOracle jar\n\nSample Input and Output:\n\nList of Books\nId       Title          Category       Author      Price\n1        Vampire Dairy  Fiction       Chetan      150.0\n2        Harry potter   Witchcraft    Rowling     450.0\n</code></pre> <p>oraclescript.sql<pre><code>begin\n   execute immediate 'drop table travel_class';\nexception\n   when others then null;\nend;\n/\n\ncreate table travel_class(\nid number(10) not null,\nname VARCHAR2(45) not null,\ndescription CLOB not null,\nprimary key(id)\n);\n\ninsert into travel_class(id,name,description) values (1,'First Class','Limited Seats and Luxurious.');\ninsert into travel_class(id,name,description) values (2,'Business Class','Intermediate level of service between economy class and first class.');\ninsert into travel_class(id,name,description) values (3,'Premium Economy Class','Positioning in price, comfort, and amenities, this travel class is leveled between economy class and business class.');\ninsert into travel_class(id,name,description) values (4,'Economy Class','Lowest travel class of seating in air travel.');\n</code></pre> Main.java<pre><code>import java.util.ArrayList;\nimport java.sql.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            ArrayList&lt;Book&gt; books = new BookDAO().listBooks();\n\n            System.out.println(\"List of Books\");\n            System.out.format(\"%-5s %-20s %-20s %-10s %s\\n\",\"Id\",\"Title\",\"Category\",\"Author\",\"Price\");\n\n            for (Book book : books) {\n                System.out.format(\"%-5s %-20s %-20s %-10s %s\\n\",\n                        book.getId(), book.getTitle(), book.getCategory(), book.getAuthor(), book.getPrice());\n            }\n        } \n        catch (SQLException e) {\n            System.out.println(\"Error: \" + e.getMessage());\n        }\n        catch (ClassNotFoundException e) {\n            System.out.println(\"Error: \" + e.getMessage());\n        }\n\n    }\n}\n</code></pre> Book.java<pre><code>public class Book {\n    Integer id;\n    String title;\n    String category;\n    String author;\n    Double price;\n    public Book() {\n        super();\n        // TODO Auto-generated constructor stub\n    }\n    public Book(Integer id, String title, String category, String author, Double price) {\n        super();\n        this.id = id;\n        this.title = title;\n        this.category = category;\n        this.author = author;\n        this.price = price;\n    }\n    public Integer getId() {\n        return id;\n    }\n    public void setId(Integer id) {\n        this.id = id;\n    }\n    public String getTitle() {\n        return title;\n    }\n    public void setTitle(String title) {\n        this.title = title;\n    }\n    public String getCategory() {\n        return category;\n    }\n    public void setCategory(String category) {\n        this.category = category;\n    }\n    public String getAuthor() {\n        return author;\n    }\n    public void setAuthor(String author) {\n        this.author = author;\n    }\n    public Double getPrice() {\n        return price;\n    }\n    public void setPrice(Double price) {\n        this.price = price;\n    }\n\n}\n</code></pre> BookDAO.java<pre><code>import java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\n\npublic class BookDAO {\n    public ArrayList&lt;Book&gt; listBooks() throws ClassNotFoundException, SQLException{\n        ArrayList&lt;Book&gt; bookList = new ArrayList&lt;Book&gt;();\n        //fill your code here\n\n         try {\n            Connection conn = DBConnection.getConnection();\n            Statement stmt = conn.createStatement();\n            ResultSet rs = stmt.executeQuery(\"SELECT * FROM book\");\n\n            while (rs.next()) {\n                Book book = new Book(rs.getInt(\"id\"), rs.getString(\"title\"),\n                        rs.getString(\"category\"), rs.getString(\"author\"), rs.getDouble(\"price\"));\n                bookList.add(book);\n            }\n\n            rs.close();\n            stmt.close();\n            conn.close();\n        } catch (ClassNotFoundException e) {\n            System.out.println(\"Error: \" + e.getMessage());\n        } catch (SQLException e) {\n            System.out.println(\"Error: \" + e.getMessage());\n        }\n\n        return bookList;\n    }\n}\n</code></pre></p>"},{"location":"Java/JDBC/#2","title":"2","text":"<pre><code>Update details of Travel Classes\n\nWrite a java program to update the details of Travel class available in the database and display the list of travel class details in the descending order of names using JDBC drivers.\n\n[Note:  Strictly adhere to the object-oriented specifications given as a part of the problem statement. Follow the naming conventions as mentioned. Create separate classes in separate files.]\n\nCreate a class TravelClass with the following attributes.\n\nData Type   Variable Name\nString  name\nString  description\nInclude appropirate getters, setters, default and parameterized constructors for the above class\n\nCreate a class TravelClassDAO with a following method\n\nMethod name Description\nArrayList&lt;TravelClass&gt; listAllTravelClassess()  This method retrieves the list of travel classes available in the database in the descending order of the travel class name and returns the same.\nvoid updateDetail(String name, String description)  This method update the given description into the database for the given travel class name.\n\nCreate a class DBConnection with following method.\n\nMethod  Description\npublic static Connection getConnection()    This method is used to connect the java application with oracle database. Here register the JDBC driver for the application, configure the database properties(fetch from oracle.properties) and return the connection object.\n\nCreate a class Main with main method and call the methods of TravelClassDAO and display the list as shown in the main method.\n\nUse the below format to print the details in table :\nSystem.out.format(\"%-25s %s\\n\",\"Name\",\"Description\");\n\noracle.properties :\n\ndb.url = jdbc:oracle:thin:@localhost:1521:xe\ndb.username = root\ndb.password = student\n\nUse the below code to retrieve the connection details from oracle.properties to establish connection\n\nResourceBundle rb = ResourceBundle.getBundle(\"oracle\");\nString url = rb.getString(\"db.url\");\nString user = rb.getString(\"db.username\");\nString pass = rb.getString(\"db.password\");\n\nTable Properties:\n\ncreate table travel_class(\nid number(10) not null,\nname VARCHAR2(45) not null,\ndescription CLOB not null,\nprimary key(id)\n);\n\n\nDownload the oracle jar file in the below link.\nOracle jar\n\nSample Input and Output:\nEnter the name of TravelClass :\nEconomy Class\nEnter the description to update :\nLowest travel class of seating in flight travel.\nUpdated List of Travel Classes\nName                      Description                   \nPremium Economy Class     Positioning in price, comfort, and amenities, this travel class is leveled between economy class and business class.\nEconomy Class             Lowest travel class of seating in flight travel.\nBusiness Class            Intermediate level of service between economy class and first class.\n</code></pre> Main.java<pre><code>import java.io.*;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\n\n\npublic class Main {\n    public static void main(String args[]) throws Exception{\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        System.out.println(\"Enter the name of TravelClass :\");\n        String name = br.readLine();\n        System.out.println(\"Enter the description to update :\");\n        String description = br.readLine();\n        //fill your code here\n\n        // create a new instance of TravelClassDAO\n        TravelClassDAO travelClassDAO = new TravelClassDAO();\n\n        // call the updateDetail method to update the description of a travel class\n        travelClassDAO.updateDetail(name, description);\n\n        // call the listAllTravelClassess method to retrieve the list of travel classes\n        ArrayList&lt;TravelClass&gt; travelClasses = travelClassDAO.listAllTravelClassess();\n\n        // display the list of travel classes in descending order of names\n        System.out.println(\"Updated List of Travel Classes\");\n        System.out.format(\"%-25s %s\\n\", \"Name\", \"Description\");\n        for (TravelClass travelClass : travelClasses) {\n            System.out.format(\"%-25s %s\\n\", travelClass.getName(), travelClass.getDescription());\n        }\n    }\n}\n</code></pre> <p>oraclescript.sql<pre><code>begin\n   execute immediate 'drop table travel_class';\nexception\n   when others then null;\nend;\n/\n\ncreate table travel_class(\nid number(10) not null,\nname VARCHAR2(45) not null,\ndescription CLOB not null,\nprimary key(id)\n);\n\ninsert into travel_class(id,name,description) values (1,'First Class','Limited Seats and Luxurious.');\ninsert into travel_class(id,name,description) values (2,'Business Class','Intermediate level of service between economy class and first class.');\ninsert into travel_class(id,name,description) values (3,'Premium Economy Class','Positioning in price, comfort, and amenities, this travel class is leveled between economy class and business class.');\ninsert into travel_class(id,name,description) values (4,'Economy Class','Lowest travel class of seating in air travel.');\n</code></pre> <pre><code>public class TravelClass {\n    String name,description;\n\n    public TravelClass() {\n    }\n\n    public TravelClass(String name, String description) {\n        this.name = name;\n        this.description = description;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getDescription() {\n        return description;\n    }\n\n    public void setDescription(String description) {\n        this.description = description;\n    }\n\n}\n</code></pre> TravelClassDAO<pre><code>import java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class TravelClassDAO {\n    ArrayList&lt;TravelClass&gt; listAllTravelClassess() throws ClassNotFoundException, SQLException {\n\n        ArrayList&lt;TravelClass&gt; travelClassList= new ArrayList&lt;TravelClass&gt;();\n\n        //fill your code here\n\n          Connection con = null;\n        PreparedStatement ps = null;\n        ResultSet rs = null;\n        try {\n            con = DBConnection.getConnection();\n            String query = \"SELECT * FROM travel_class ORDER BY name DESC\";\n            ps = con.prepareStatement(query);\n            rs = ps.executeQuery();\n            while (rs.next()) {\n                TravelClass travelClass = new TravelClass();\n                travelClass.setName(rs.getString(\"name\"));\n                travelClass.setDescription(rs.getString(\"description\"));\n                travelClassList.add(travelClass);\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (rs != null)\n                    rs.close();\n                if (ps != null)\n                    ps.close();\n                if (con != null)\n                    con.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n\n        return travelClassList;\n    }\n    public void updateDetail(String name, String description) throws ClassNotFoundException, SQLException {\n        //fill your code here\n          Connection con = null;\n        PreparedStatement ps = null;\n        try {\n            con = DBConnection.getConnection();\n            String query = \"UPDATE travel_class SET description = ? WHERE name = ?\";\n            ps = con.prepareStatement(query);\n            ps.setString(1, description);\n            ps.setString(2, name);\n            ps.executeUpdate();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (ps != null)\n                    ps.close();\n                if (con != null)\n                    con.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n</code></pre></p>"},{"location":"Java/JDBC/#3","title":"3","text":"<pre><code>Insert new Airport\nWrite a program to insert the airport data and display the list of airport details by retrieving data from the database.\n\n[Note:  Strictly adhere to the object-oriented specifications given as a part of the problem statement. Follow the naming conventions as mentioned. Create separate classes in separate files.]\n\nThe class Airport has been created with the following attributes.\n\nData type   Variable name\nString  iataAirportCode\nString  name\nString  city\nString  country\nThe appropriate getters, setters, default and parameterized constructors for the above class have been already included for you.\n\nThe class AirportDAO has been created with the following methods.\n\nMethod name Description\nArrayList&lt;Airport&gt; listAirport()    This method will return the list of airports sorted in ascending order based on iataAirportCode in the database\nvoid insertAirport(Airport airportIns)  This method will insert the new airport into the database\n\n\nThe class DBConnection has been created with the following method.\n\nMethod  Description\npublic static Connection getConnection()    This method is used to connect the java application with oracle database. Here register the JDBC driver for the application, configure the database properties(fetch from oracle.properties) and return the connection object.\n\nCreate a class Main with main method. In the method, create instances of the above classes and test the above classes.\n\nUse the below format to print the details in table :\nSystem.out.format(\"%-10s %-40s %-10s %s\\n\",\"IATA Code\",\"Name\",\"City\",\"Country\");\n\n\n\noracle.properties :\n\ndb.url = jdbc:oracle:thin:@localhost:1521:xe\ndb.username = root\ndb.password = student\n\nThe below code has already been implemented to retrieve the connection details from oracle.properties to establish connection.\n\nResourceBundle rb = ResourceBundle.getBundle(\"oracle\");\nString url = rb.getString(\"db.url\");\nString user = rb.getString(\"db.username\");\nString pass = rb.getString(\"db.password\");\n\nTable Properties:\n\ncreate table airport(\nid number(10) GENERATED ALWAYS AS IDENTITY not null,\niata_airport_code VARCHAR2(45) not null,\nname VARCHAR2(45) not null,\ncity VARCHAR2(45) not null,\ncountry_name VARCHAR2(45) not null,\nprimary key(id));\n\n\nDownload the oracle jar file in the below link.\nOracle jar\n\nSample Input and Output:\nEnter the Airport Code :\nMDZ\nEnter the Airport name :\nFrancisco Gabriell International Airport\nEnter the City :\nMendoza\nEnter the Country name :\nArizona\nIATA Code  Name                                     City       Country\nBNE        Brisbane Airport                         Brisbane   Australia\nCOK        Cochin International Airport             Cochin     India\nMDZ        Francisco Gabriell International Airport Mendoza    Arizona\nSXR        Srinagar International Airport           Srinagar   India\n</code></pre> <p>Main.java<pre><code>import java.io.*;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String args[]) throws Exception{\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String countryName,airportCode,airportName,city;\n        System.out.println(\"Enter the Airport Code :\");\n        airportCode = br.readLine();\n        System.out.println(\"Enter the Airport name :\");\n        airportName = br.readLine();\n        System.out.println(\"Enter the City :\");\n        city = br.readLine();\n    System.out.println(\"Enter the Country name :\");\n        countryName = br.readLine();\n\n        //fill your code\n    AirportDAO dao = new AirportDAO();\n        Airport airport = new Airport();\n\n        // Insert a new airport\n        airport.setIataAirportCode(airportCode);\n        airport.setName(airportName);\n        airport.setCity(city);\n        airport.setCountry(countryName);\n        dao.insertAirport(airport);\n\n        // Retrieve the list of airports and display them in a table format\n        ArrayList&lt;Airport&gt; airportList = dao.listAirport();\n        System.out.format(\"%-10s %-40s %-10s %s\\n\", \"IATA Code\", \"Name\", \"City\", \"Country\");\n        for (Airport a : airportList) {\n            System.out.format(\"%-10s %-40s %-10s %s\\n\", a.getIataAirportCode(), a.getName(), a.getCity(), a.getCountry());\n        }\n\n    }\n}\n</code></pre> Airport.java<pre><code>public class Airport {\n    String iataAirportCode,name,city,country;\n\n    public Airport() {\n        super();\n        // TODO Auto-generated constructor stub\n    }\n\n    public Airport(String iataAirportCode, String name, String city, String country) {\n        super();\n        this.iataAirportCode = iataAirportCode;\n        this.name = name;\n        this.city = city;\n        this.country = country;\n    }\n\n    public String getIataAirportCode() {\n        return iataAirportCode;\n    }\n\n    public void setIataAirportCode(String iataAirportCode) {\n        this.iataAirportCode = iataAirportCode;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getCity() {\n        return city;\n    }\n\n    public void setCity(String city) {\n        this.city = city;\n    }\n\n    public String getCountry() {\n        return country;\n    }\n\n    public void setCountry(String country) {\n        this.country = country;\n    }\n\n\n\n}\n</code></pre> AirportDAO.java<pre><code>import java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\n\npublic class AirportDAO {\n    public void insertAirport(Airport airportIns) throws ClassNotFoundException, SQLException{\n\n        //fill your code\n         Connection con = null;\n        PreparedStatement ps = null;\n        try {\n            con = DBConnection.getConnection();\n            ps = con.prepareStatement(\"INSERT INTO airport (iata_airport_code, name, city, country_name) VALUES (?, ?, ?, ?)\");\n            ps.setString(1, airportIns.getIataAirportCode());\n            ps.setString(2, airportIns.getName());\n            ps.setString(3, airportIns.getCity());\n            ps.setString(4, airportIns.getCountry());\n            ps.executeUpdate();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n        catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (ps != null)\n                    ps.close();\n                if (con != null)\n                    con.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    public ArrayList&lt;Airport&gt; listAirport() throws ClassNotFoundException, SQLException{\n\n        //fill your code\n\n        ArrayList&lt;Airport&gt; airportList = new ArrayList&lt;&gt;();\n        Connection con = null;\n        PreparedStatement ps = null;\n        ResultSet rs = null;\n        try {\n            con = DBConnection.getConnection();\n            ps = con.prepareStatement(\"SELECT * FROM airport ORDER BY iata_airport_code\");\n            rs = ps.executeQuery();\n            while (rs.next()) {\n                String iataAirportCode = rs.getString(\"iata_airport_code\");\n                String name = rs.getString(\"name\");\n                String city = rs.getString(\"city\");\n                String country = rs.getString(\"country_name\");\n                Airport airport = new Airport(iataAirportCode, name, city, country);\n                airportList.add(airport);\n            }\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n        catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (rs != null)\n                    rs.close();\n                if (ps != null)\n                    ps.close();\n                if (con != null)\n                    con.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n        return airportList;\n    }\n}\n</code></pre></p>"},{"location":"Java/JDBC/#iassess","title":"iAssess","text":"<pre><code>User-Delete\n\nThe users who enter into 20 Ideas for Vision 2020 must be active and must keep posting their ideas.If the administrator finds out that the user is not active the admin can delete the user record from the table. Help the admin to delete the user record from the table.\n\n[Note:  Strictly adhere to the object-oriented specifications given as a part of the problem statement. Follow the naming conventions as mentioned. Create separate classes in separate files.]\n\nCreate a User with following private attributes.\nData Type   Variable\nInteger id\nString  name\nString  email\nString  password\nInteger age\nString  role\nDate    createdDate\nString  status\nInclude appropriate getters, setters, default and parameterized constructors for the above class.\n\n\nCreate a class UserDAO with following methods\n\nMethod Name Method Description\nArrayList&lt;User&gt; listUsers() This method returns the list of users available in the database\nvoid deleteUser(Integer id) This method will delete the user from the database using the given id\n\nCreate a class DBConnection with following method\nMethod  Description\npublic static Connection getConnection()    This method is used to connect the java application with oracle database. Here register the JDBC driver for the application,configure the database properties(fetch from oracle.properties) and return the connection object.\n\nCreate a class Main with main method and call the methods of UserDAO and display the list as shown.\n\n\nOutput Format:\nUse Java Format Specifier to display the user details\nSystem.out.format(\"%-15s %-15s %-15s %-15s %-15s %-15s %-15s %s\\n\",\"Id\",\"Name\",\"Email\",\"Password\",\"Age\",\"Role\",\"CreatedDate\",\"Status\");\n\n\nTable Properties:\n\ncreate table \"user\"(\nid number(10) GENERATED ALWAYS AS IDENTITY not null,\nname varchar2(50) not null,\nemail varchar2(50) not null,\npassword varchar2(50) not null,\nage number(10) not null,\nrole varchar2(50) not null,\ncreated_date date not null,\nstatus varchar2(50) not null,\nprimary key(id));\n\n\n\noracle.properties :\n\ndb.url = jdbc:oracle:thin:@localhost:1521:xe\ndb.username = root\ndb.password = student\n\nUse the below code to retrieve the connection details from oracle.properties to establish connection\n\nResourceBundle rb = ResourceBundle.getBundle(\"oracle\");\nString url = rb.getString(\"db.url\");\nString user = rb.getString(\"db.username\");\nString pass = rb.getString(\"db.password\");\n\n\nDownload the oracle jar file in the below link.\nOracle jar\n\nSample Input and Output\n[All text in bold are input and the remaining are output]\n\nBefore the Delete\nId              Name            Email           Password        Age             Role            CreatedDate     Status         \n1               Asha            ash@a.com       as123           18              user            2015-10-13      Approved       \n2               Rahul           rh@a.com        rh@123          15              user            2015-10-14      Approved       \n3               Ravi            rv@a.com        rv@98           20              user            2015-10-14      pending        \nEnter the Id :\n1\nAfter the Delete\nId              Name            Email           Password        Age             Role            CreatedDate     Status         \n2               Rahul           rh@a.com        rh@123          15              user            2015-10-14      Approved       \n3               Ravi            rv@a.com        rv@98           20              user            2015-10-14      pending\n</code></pre> <p>Main.java<pre><code>import java.util.*;\nimport java.io.*;\nimport java.sql.SQLException;\nimport java.text.SimpleDateFormat;\n\npublic class Main{\n\n    public static void main(String [] args) throws Exception{\n        //fill your code here\n        try {\n            Scanner input= new Scanner(System.in);\n            ArrayList&lt;User&gt; users = new UserDAO().listUsers();\n\n            System.out.println(\"Before the Delete\");\n            System.out.format(\"%-15s %-15s %-15s %-15s %-15s %-15s %-15s %s\\n\",\"Id\",\"Name\",\"Email\",\"Password\",\"Age\",\"Role\",\"CreatedDate\",\"Status\");\n\n            for (User user : users) {\n                System.out.format(\"%-15s %-15s %-15s %-15s %-15s %-15s %-15s %s\\n\",user.getId(),user.getName(),user.getEmail(),user.getPassword(),user.getAge(),user.getRole(),user.getCreatedDate(),user.getStatus());\n            }\n            /* */\n            System.out.println(\"Enter the Id :\");\n            Integer id=input.nextInt();\n            UserDAO user1=new UserDAO();\n            user1.deleteUser(id);\n            System.out.println(\"After the Delete\");\n            System.out.format(\"%-15s %-15s %-15s %-15s %-15s %-15s %-15s %s\\n\",\"Id\",\"Name\",\"Email\",\"Password\",\"Age\",\"Role\",\"CreatedDate\",\"Status\");\n            ArrayList&lt;User&gt; usersAfterDelete = new UserDAO().listUsers();\n            for (User user : usersAfterDelete) {\n                System.out.format(\"%-15s %-15s %-15s %-15s %-15s %-15s %-15s %s\\n\",user.getId(),user.getName(),user.getEmail(),user.getPassword(),user.getAge(),user.getRole(),user.getCreatedDate(),user.getStatus());\n            }\n\n\n        } \n        catch (SQLException e) {\n            System.out.println(\"Error: \" + e.getMessage());\n        }\n        catch (ClassNotFoundException e) {\n            System.out.println(\"Error: \" + e.getMessage());\n        }\n\n    }\n\n}\n</code></pre> User.java<pre><code>import java.util.Date;\n\npublic class User {\n    Integer id;\n    String name;\n    String email;\n    String password;\n    Integer age;\n    String role;\n    Date createdDate;\n    String status;\n\n    public User() {\n        super();\n        // TODO Auto-generated constructor stub\n    }\n\n    public User(Integer id, String name, String email, String password, Integer age, String role, Date createdDate,\n            String status) {\n        super();\n        this.id = id;\n        this.name = name;\n        this.email = email;\n        this.password = password;\n        this.age = age;\n        this.role = role;\n        this.createdDate = createdDate;\n        this.status = status;\n    }\n\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    public Integer getAge() {\n        return age;\n    }\n\n    public void setAge(Integer age) {\n        this.age = age;\n    }\n\n    public String getRole() {\n        return role;\n    }\n\n    public void setRole(String role) {\n        this.role = role;\n    }\n\n    public Date getCreatedDate() {\n        return createdDate;\n    }\n\n    public void setCreatedDate(Date createdDate) {\n        this.createdDate = createdDate;\n    }\n\n    public String getStatus() {\n        return status;\n    }\n\n    public void setStatus(String status) {\n        this.status = status;\n    }\n\n}\n</code></pre> UserDAO.java<pre><code>import java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\nimport java.sql.*;\npublic class UserDAO{\n\n    public ArrayList&lt;User&gt; listUsers() throws Exception{\n        ArrayList&lt;User&gt; userList = new ArrayList&lt;User&gt;();\n        //fill your code here\n\n\n        Connection con = null;\n        PreparedStatement ps = null;\n        ResultSet rs = null;\n        try {\n            con = DBConnection.getConnection();\n            String query =\"SELECT * FROM \\\"user\\\"\" ;\n            ps = con.prepareStatement(query);\n            rs = ps.executeQuery();\n            while (rs.next()) {\n                User user = new User(rs.getInt(\"id\"),rs.getString(\"name\"),rs.getString(\"email\"),rs.getString(\"password\"),rs.getInt(\"age\"),rs.getString(\"role\"),rs.getDate(\"created_date\"),rs.getString(\"status\"));\n                userList.add(user);\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (rs != null)\n                    rs.close();\n                if (ps != null)\n                    ps.close();\n                if (con != null)\n                    con.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n\n\n\n        return userList;\n    }\n    public void deleteUser(Integer id) throws Exception{\n        //fill your code here\n        Connection con = null;\n        PreparedStatement ps = null;\n        try {\n            con = DBConnection.getConnection();\n            String query = \"DELETE from \\\"user\\\" WHERE id = ?  \";\n            ps = con.prepareStatement(query);\n            ps.setInt(1, id);\n            ps.executeUpdate();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (ps != null)\n                    ps.close();\n                if (con != null)\n                    con.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n}\n</code></pre> user_delete.sql<pre><code>begin\n   execute immediate 'drop table \"user\"';\nexception\n   when others then null;\nend;\n/\n\ncreate table \"user\"(\nid number(10) not null,\nname varchar2(50) not null,\nemail varchar2(50) not null,\npassword varchar2(50) not null,\nage number(10) not null,\nrole varchar2(50) not null,\ncreated_date date not null,\nstatus varchar2(50) not null,\nprimary key(id));\n\ninsert into \"user\"(id, name,email,password,age,role,created_date,status) values(1,'Asha','ash@a.com','as123',18,'user',TO_DATE('2015-10-13','YYYY-MM-DD'),'Approved');\ninsert into \"user\"(id, name,email,password,age,role,created_date,status) values(2,'Rahul','rh@a.com','rh@123',15,'user',TO_DATE('2015-10-14','YYYY-MM-DD'),'Approved');\ninsert into \"user\"(id, name,email,password,age,role,created_date,status) values(3,'Ravi','rv@a.com','rv@98',20,'user',TO_DATE('2015-10-14','YYYY-MM-DD'),'pending');\ninsert into \"user\"(id, name,email,password,age,role,created_date,status) values(4,'Pavi','pv@a.com','pv@98',20,'user',TO_DATE('2015-11-14','YYYY-MM-DD'),'pending');\ninsert into \"user\"(id, name,email,password,age,role,created_date,status) values(5,'Devi','dv@a.com','dv@98',20,'user',TO_DATE('2015-09-07','YYYY-MM-DD'),'pending');\n</code></pre></p>"},{"location":"Java/JavaBasicConcepts/","title":"Java Basic Concepts","text":""},{"location":"Java/JavaBasicConcepts/#class-packaging","title":"Class Packaging","text":"<pre><code>ArrayList&lt;Complaint&gt; complaints=new ArrayList&lt;Complaint&gt;();\nStack&lt;Customer&gt; customers=new Stack&lt;Customer&gt;();\n</code></pre> <pre><code>name = input.next();\nname += input.nextLine();\n</code></pre> <pre><code>complaints.add((Complaint)complaints.get(complaints.size()-1).clone());\ncomplaints.get(complaints.size()-1).complaint=complaint;\ncomplaints.get(i).display();\n</code></pre>"},{"location":"Java/JavaBasicConcepts/#collection-and-maps","title":"Collection and Maps","text":"<pre><code>        String hallName;\n        ArrayList&lt;String&gt; halls=new ArrayList&lt;String&gt;();\n        String searchHallName=input.next();\n        System.out.println(searchHallName+\" hall is found in the list at position \"+(halls.indexOf(searchHallName)));\n</code></pre> <pre><code>String choice;\nSet&lt;String&gt; emails =new HashSet&lt;&gt;();\nString email=input.next();\nemails.add(email);\nchoice.equals(\"yes\")\nString emailString=input.next();\nString[] emailSeparated=emailString.split(\",\");\n</code></pre> <pre><code>Map&lt;String,ArrayList&lt;Address&gt;&gt; map=new HashMap&lt;&gt;();\nArrayList&lt;Address&gt; addressList=new ArrayList&lt;Address&gt;();\naddress=input.next();\naddress+=input.nextLine();\nString[] addressSplit=address.split(\",\");\naddressList.add(new Address(addressSplit[0],addressSplit[1],addressSplit[2],addressSplit[3],Integer.parseInt(addressSplit[4])));\nmap.put(addressSplit[2], addressList);\nmap.get(addressSplit[2]).add(new Address(addressSplit[0],addressSplit[1],addressSplit[2],addressSplit[3],Integer.parseInt(addressSplit[4])));\n\nFormatter formatter= new Formatter();\nformatter.format(\"%-15s %-15s %-15s %-15s %s\\n\",\"Line 1\",\"Line 2\",\"City\",\"State\",\"Pincode\");\nformatter.format(\"%-15s %-15s %-15s %-15s %s\\n\",map.get(city).get(index).getAddressLine1(),map.get(city).get(index).getAddressLine2(),map.get(city).get(index).getCity(),map.get(city).get(index).getState(),map.get(city).get(index).getPincode());\nSystem.out.println(formatter);\nformatter.close();\n</code></pre> <pre><code>List&lt;User&gt; sortedUsers = new ArrayList&lt;&gt;(users);\nCollections.sort(sortedUsers);\n</code></pre> <pre><code>System.out.printf(\"%-20s%-20s%-20s%-20s\\n\", \"Name\", \"Contact Number\", \"Username\", \"Email\");\n</code></pre> <pre><code>Map&lt;String, Map&lt;String, Integer&gt;&gt; mapOfMaps = new TreeMap&lt;&gt;();\nString[] address = sc.nextLine().split(\",\");\nif (!mapOfMaps.containsKey(state)) {\n    mapOfMaps.put(state, new TreeMap&lt;&gt;());\n}\ncityMap.put(city, cityMap.get(city) + 1);\nfor (String state : mapOfMaps.keySet()) {\n    System.out.println(\"State:\" + state);\n    Map&lt;String, Integer&gt; cityMap = mapOfMaps.get(state);\n    for (String city : cityMap.keySet()) {\n        System.out.println(\"City:\" + city + \" Count:\" + cityMap.get(city));\n    }\n    System.out.println();\n}\n</code></pre>"},{"location":"Java/JavaBasicConcepts/#exception-handling","title":"Exception Handling","text":"<pre><code>try{\n\n}\ncatch(NumberFormatException e){\n            System.out.println(e);\n        }\n</code></pre> <pre><code>try{\n}\ncatch(ArrayIndexOutOfBoundsException e){\n            System.out.println(e);\n        }\n</code></pre> <pre><code>try{\n        ContactDetailBO.validate(detail.mobile, detail.alternateMobile);\n        System.out.println(detail.toString()); \n        input.close();\n}\ncatch(DuplicateMobileNumberException e){\n    System.out.print(\"DuplicateMobileNumberException: \");\n    System.out.print(e.getMessage());\n\n}\npublic class DuplicateMobileNumberException extends Exception {\n    public DuplicateMobileNumberException(String str){\n        super(str);\n    }\n}\npublic class ContactDetailBO {\n    static void validate(String mobile,String alternateMobile) throws DuplicateMobileNumberException{\n\n            if(mobile.equals(alternateMobile)){\n                throw new DuplicateMobileNumberException(\"Mobile number and alternate mobile number are same\");\n            }\n\n\n    }\n}\n</code></pre> <pre><code>try{\n} catch (Exception e) {\n            // TODO: handle exception\n            System.out.println(\"Input dates should be in the format 'dd-MM-yyyy-HH:mm:ss'\");\n        }\n</code></pre>"},{"location":"Java/JavaBasicConcepts/#features-of-java-8","title":"Features of Java 8","text":"<pre><code>DecimalFormat decimal=new DecimalFormat(\"0.0\");\n</code></pre> <pre><code>Collections.sort(ticket, Comparator.comparing(TicketBooking::getPrice));\nSystem.out.format(\"%-10s %-15s %-15s\\n\",\"Customer\", \"No Of Tickets\", \"Price\");\nfor (int i = 0; i &lt; numberOfBookings; i++) {\n    System.out.format(\"%-10s %-15s %-15s\\n\", ticket.get(i).getCustomerName(), ticket.get(i).getNoOfTickets(), ticket.get(i).getPrice());\n}\n</code></pre>"},{"location":"Java/JavaBasicConcepts/#fundamental-classes","title":"Fundamental Classes","text":"<pre><code>String string= input.next();\nstring.trim();\nif(text.contains(string)){\n    System.out.println(\"String is found in the document\");\n}\n</code></pre> <pre><code>Scanner input =new Scanner(System.in).useDelimiter(\"\\\\s*[$\\\\n]\\\\s*\");\n\nfor (int index = 0; index &lt; numberOfItems; index++) {\n            StringBuilder sb=new StringBuilder();\n            sb.append(item.get(index).getName());\n            sb.append(\",\");\n            sb.append(item.get(index).getType());\n            sb.append(\",\");\n            sb.append(item.get(index).getCost());\n            sb.append(\",\");\n            sb.append(item.get(index).checkAvailable());\n\n            System.out.println(sb);\n}\n</code></pre> <pre><code>public static void main(String[] args) {\n    Scanner input= new Scanner(System.in);\n    System.out.println(\"Enter the date to be formatted:(MM-dd-yyyy)\");\n    DateTimeFormatter dateFormat0 = DateTimeFormatter.ofPattern(\"MM-dd-yyyy\");\n    LocalDate date=LocalDate.parse(input.next(),dateFormat0);\n    DateTimeFormatter dateFormat1 = DateTimeFormatter.ofPattern(\"EEE, MMM d, yy\");\n    System.out.println(\"Date Format with EEE, MMM d, yy : \"+dateFormat1.format(date));\n    DateTimeFormatter dateFormat2 = DateTimeFormatter.ofPattern(\"dd.MM.yyyy\");\n    System.out.println(\"Date Format with dd.MM.yyyy : \"+dateFormat2.format(date));\n    DateTimeFormatter dateFormat3 = DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");\n    System.out.println(\"Date Format with dd dd/MM/yyyy : \"+dateFormat3.format(date));\n    input.close();\n   } \n</code></pre> <pre><code>public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.println(\"Enter the code\");\n        String code = scanner.nextLine();\n\n        StringBuilder formattedCode = new StringBuilder(code);\n\n        if (code.substring(0, 2).equals(\"DH\")) {\n            formattedCode.replace(0, 2,\"DEL\");\n        } else if (code.substring(0, 2).equals(\"MB\")) {\n            formattedCode.replace(0, 2,\"MUB\");\n        } else if (code.substring(0, 2).equals(\"KL\")) {\n            formattedCode.replace(0, 2,\"KOL\");\n        }\n\n        int referenceNumber = Integer.parseInt(code.substring(2));\n\n        formattedCode.replace(3, formattedCode.length()+1, String.format(\"%05d\", referenceNumber));\n\n        System.out.println(\"Formatted code\");\n        System.out.println(formattedCode.toString());\n    }\n</code></pre>"},{"location":"Java/JavaBasicConcepts/#jdbc","title":"JDBC","text":"<pre><code>import java.sql.*;\nimport java.util.ResourceBundle;\npublic class DBConnection {\n    public static Connection getConnection() throws ClassNotFoundException, SQLException {        \n        ResourceBundle rb = ResourceBundle.getBundle(\"oracle\");\n        String url = rb.getString(\"db.url\");\n        String username = rb.getString(\"db.username\");\n        String password = rb.getString(\"db.password\");\n        //fill your code here\n\n        DriverManager.registerDriver(new oracle.jdbc.driver.OracleDriver());\n\n        return DriverManager.getConnection(url, username, password);\n    }\n}\n</code></pre> <pre><code>import java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class TravelClassDAO {\n    ArrayList&lt;TravelClass&gt; listAllTravelClassess() throws ClassNotFoundException, SQLException {\n\n        ArrayList&lt;TravelClass&gt; travelClassList= new ArrayList&lt;TravelClass&gt;();\n\n        //fill your code here\n\n          Connection con = null;\n        PreparedStatement ps = null;\n        ResultSet rs = null;\n        try {\n            con = DBConnection.getConnection();\n            String query = \"SELECT * FROM travel_class ORDER BY name DESC\";\n            ps = con.prepareStatement(query);\n            rs = ps.executeQuery();\n            while (rs.next()) {\n                TravelClass travelClass = new TravelClass();\n                travelClass.setName(rs.getString(\"name\"));\n                travelClass.setDescription(rs.getString(\"description\"));\n                travelClassList.add(travelClass);\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (rs != null)\n                    rs.close();\n                if (ps != null)\n                    ps.close();\n                if (con != null)\n                    con.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n\n        return travelClassList;\n    }\n    public void updateDetail(String name, String description) throws ClassNotFoundException, SQLException {\n        //fill your code here\n          Connection con = null;\n        PreparedStatement ps = null;\n        try {\n            con = DBConnection.getConnection();\n            String query = \"UPDATE travel_class SET description = ? WHERE name = ?\";\n            ps = con.prepareStatement(query);\n            ps.setString(1, description);\n            ps.setString(2, name);\n            ps.executeUpdate();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (ps != null)\n                    ps.close();\n                if (con != null)\n                    con.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"Java/JavaBasicConcepts/#language-fundamentals","title":"Language Fundamentals","text":""},{"location":"Java/JavaBasicConcepts/#multithreading","title":"Multithreading","text":"<pre><code>import java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input=new Scanner(System.in);\n        System.out.println(\"Enter Number of Counters :\");\n        int numberOfCounters=input.nextInt();\n        String textForCounter;\n        ArrayList&lt;Counter&gt; threads=new ArrayList&lt;&gt;();\n        for (int i = 0; i &lt; numberOfCounters; i++) {\n            System.out.println(\"Enter text for counter \"+(i+1)+\" :\");\n            textForCounter=input.next();\n            textForCounter+=input.nextLine();\n            threads.add(new Counter(textForCounter));\n            threads.get(i).run();\n        }\n        int[]frequency=new int[256];\n        for (int i = 0; i &lt; numberOfCounters; i++) {\n\n            frequency=threads.get(i).getFrequency();\n            System.out.println(\"Counter \"+(i+1)+\" Result :\");\n            for (int j = 0; j &lt; frequency.length; j++) {\n                if(frequency[j]!=0){\n\n                    System.out.print((char)j+\":\"+frequency[j]+\" \");\n                }\n\n            }\n            System.out.println(\"\");\n        }\n\n\n    }\n}\n\n\n\n\npublic class Counter extends Thread{\n    int[] frequency=new int[256];\n    String counter;\n    public void run(){\n            for (int i = 0; i &lt; counter.length(); i++) {\n                frequency[(int)counter.charAt(i)]++;\n            }\n    }\n    public int[] getFrequency(){\n        return this.frequency;\n    }\n    public Counter (String counter){\n        this.counter=counter;\n    }\n\n}\n</code></pre>"},{"location":"Java/JavaBasicConcepts/#object-oriented-programming","title":"Object Oriented Programming","text":""},{"location":"Java/JavaBasicConcepts/#streams-and-files","title":"Streams and Files","text":"<pre><code>BufferedReader br=new BufferedReader(new FileReader(\"input.csv\"));\n</code></pre> <pre><code>public class Main {\n    public static void main(String[] args) {\n        try{\n            BufferedReader br=new BufferedReader(new FileReader(\"input.txt\"));\n            EventBO event=new EventBO();\n            ArrayList&lt;Event&gt; eventData=event.readFromFile(br);\n            if(eventData.isEmpty()){\n                System.out.println(\"The list is empty\");\n            }\n\n\n            FileWriter writer = new FileWriter(\"output.txt\");\n            event.writeFile(eventData,writer);\n        }\n        catch(Exception e){\n            System.out.println(\"File Not Found\");\n        }\n    }\n\n\n\n}\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class EventBO {\n    public ArrayList&lt;Event&gt; readFromFile(BufferedReader br) {\n        ArrayList&lt;Event&gt; event = new ArrayList&lt;Event&gt;();\n        try {\n\n            String row;\n            while ((row = br.readLine()) != null) {\n                String[] userData = row.split(\",\");\n                event.add(new Event(userData[0], Integer.parseInt(userData[1]), userData[2]));\n            }\n\n        } catch (Exception e) {\n            System.out.println(\"Exception\");\n        }\n        return event;\n\n    }\n\n    public void writeFile(ArrayList&lt;Event&gt; eventList, FileWriter writer) {\n        try {\n            BufferedWriter bw = new BufferedWriter(writer);\n            Set&lt;String&gt; set = new HashSet&lt;&gt;();\n            for (int i = 0; i &lt; eventList.size(); i++) {\n                if (set.contains(eventList.get(i).getOwnerName())) {\n                    continue;\n                } else{\n                    set.add(eventList.get(i).getOwnerName());\n                    bw.write(eventList.get(i).getEventName());\n                    bw.write(\",\");\n                    bw.write(String.valueOf(eventList.get(i).getAttendeesCount()));\n                    bw.write(\",\");\n                    bw.write(eventList.get(i).getOwnerName());\n                    bw.write(\"\\n\");\n                }\n\n            }\n            /*for (int i = 0; i &lt; eventList.size(); i++) {\n\n                 * String\n                 * data=userList.get(i).getName()+\",\"+userList.get(i).getEmail()+\",\"+userList.\n                 * get(i).getUsername()+\",\"+userList.get(i).getPassword()+\"\\n\";\n\n                if (eventList.lastIndexOf(eventList.get(i).getOwnerName()) == i) {\n\n                }\n\n                // System.out.println(eventList.get(i).getAttendeesCount());\n                /* bw.write(data); \n            }*/\n\n            bw.close();\n        } catch (IOException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre>"},{"location":"Java/LanguageFundamentals/","title":"Language Fundamentals","text":""},{"location":"Java/LanguageFundamentals/#1","title":"1","text":"<pre><code>ROBOT\n\n\n\nThink that you are a scientist and you have invented a Humanoid Robo.\n\n\n\nYou want to introduce your Robo in a public meeting.\n\n\n\n\nYou need to feed the information that the Robo has to speak in the public meeting.So feed the basic information into the Robo using a program.\n\nNOTE: The basic information includes the name of the Robo, creator, purpose of creation, Memory space of the Robo and its speed.\n\nInput and Output Format:\n\nInput consists of name (char array), creator (char array), purpose (char array), memory space (int), speed (float) and the output format is to display all the details in correct order. Refer sample input and output for further details.\n\n[All text in bold corresponds to input and the rest corresponds to output]\n\nSample Input and output:\n\nEnter the Name :\n\nChitti\n\nEnter the Creator Name :\n\nDr.Vasegran\n\nEnter the Purpose :\n\nmilitaryservice\n\nMemory Space :\n\n22\n\nSpeed :\n\n1.1\n\nMy Details :\n\nI am the Robot named Chitti.\n\nI was created by Dr.Vasegran.\n\nI am created for the purpose of militaryservice.\n\nMy memory space is around 22Gb and my speed is 1.1Tb\n</code></pre> Main.java<pre><code>import java.util.Scanner;\npublic class Main{\n    public static void main(String[] args) {\n        //fill your code here\n        Scanner s = new  Scanner(System.in);\n        String  name;\n        String creator;\n        String purpose;\n        int ms;\n        float speed;\n        System.out.println(\"Enter the Name :\"); \n        name = s.nextLine();\n        System.out.println(\"Enter the Creator Name :\"); \n        creator = s.nextLine();\n        System.out.println(\"Enter the Purpose :\"); \n        purpose = s.nextLine();\n        System.out.println(\"Memory Space :\"); \n        ms = s.nextInt();\n        System.out.println(\"Speed :\"); \n        speed = s.nextFloat();\n        System.out.println(\"My Details : \" ); \n        System.out.println(\"I am the Robot named \" + name+\".\" ); \n        System.out.println(\"I was created by \" + creator+\".\"); \n        System.out.println(\"I am created for the purpose of  \"+ purpose+\".\"); \n        System.out.println(\"My memory space is around \"+ ms+\"GB and my speed is \" + speed +\"Tb.\"); \n    }\n\n}\n</code></pre>"},{"location":"Java/LanguageFundamentals/#2","title":"2","text":"<pre><code>CALCULATE GRADE\n\nWrite a program that accepts the marks in 3 subjects of a student , calculates the average mark of the student and prints the student's grade. If the average mark is greater than or equal to 90, then the grade is 'A'. If the average mark is 80 and between 80 and 90, then the grade is 'B'. If the average mark is  70 and between 70 and 80, then the grade is 'C'. If the average mark is  60 and between 60 and 70, then the grade is 'D'. If the average mark is 50 and between 50 and 60, then the grade is 'E'. If the average mark is less than 50, then the grade is 'F'.\n\nInput Format:\n\nInput consists of 3 lines. Each line consists of an integer.\n\nOutput Format:\n\nOutput consists of a single line. Refer sample output for the format.\n\nSample Input 1 :\n\n45\n\n45\n\n45\n\nSample Output 1 :\n\nThe grade is F\n\nSample Input 2:\n\n91\n\n95\n\n100\n\nSample Output 2:\n\nThe grade is A\n</code></pre> Main.java<pre><code>import java.util.*;\npublic class Main {\n\n    public static void main(String[] args) {\n        //fill your code here\n        Scanner s =new Scanner(System.in);\n        int x[]= new int[3];\n        int sum=0;\n        for(int i=0;i&lt;3;i++){\n        x[i]=s.nextInt();\n        sum=sum + x[i]; \n        }\n    int avg=sum/3;\n    if(avg&gt;=90){\n        System.out.println(\"The grade is A\");\n    }\n    else if(avg&gt;=80 &amp;&amp; avg&lt;90 ){\n        System.out.println(\"The grade is B\");\n    }\n    else if(avg&gt;=70 &amp;&amp; avg&lt;80 ){\n        System.out.println(\"The grade is C\");\n    }\n    else if(avg&gt;=60 &amp;&amp; avg&lt;700 ){\n        System.out.println(\"The grade is D\");\n    }\n    else if(avg&gt;=50 &amp;&amp; avg&lt;60 ){\n        System.out.println(\"The grade is E\");\n    }\n    else if( avg&lt;50 ){\n        System.out.println(\"The grade is F\");\n    }\n    }\n\n}\n</code></pre>"},{"location":"Java/LanguageFundamentals/#3","title":"3","text":"<pre><code>EarthQuake11\n\nMr. Ram is a very rich businessman and he  lost his family in the Gujarat Earthquake. He lost interest in his business after the tragic incident and he decided to serve the society. He started an NGO named after his only son Santosh to help the earth-quake victims. Santosh Helpline will provide a compensation to all earth quake survivors.\n\nThe compensation amount given to the survivors is not fixed and it depends on the intensity of the earthquake.\n\nThe expression Richter magnitude scale refers to a number of ways to assign a single number to quantify the energy contained in an earthquake.\n\n\n\nEarthquake Magnitude Scale\n\nMagnitude\n\nType\n\n2.4 or less\n\nMicro\n\n2.5 to 5.4\n\nLight\n\n5.5 to 6.0\n\nModerate\n\n6.1 to 6.9\n\nStrong\n\n7.0 to 7.9\n\nMajor\n\n8.0 or greater\n\nGreat\n\nPlease help Ram to decide the intensity of the earthquake.\n\n\n\nInput Format:\n\nInput consists of a single floating point number which corresponds to the earthquake's ritcher magnitude scale.\n\n\n\nOuput Format:\n\nOutput consists of the string \u201cMicro\u201d or \u201cLight\u201d or \u201cModerate\u201d or \u201cStrong\u201d or \u201cMajor\u201d or Great\u201d\n\nRefer sample input and output for further formatting specifications.\n\n[All text in bold corresponds to input and the rest corresponds to output]\n\nSample Input and Output 1:\n\nRichter Magnitude:\n\n5.7\n\nModerate\n\n\n\nSample Input and Output 2:\n\nRichter Magnitude:\n\n5\n\nLight\n</code></pre> Main.java<pre><code>import java.util.*;\nimport java.text.*;\npublic class Main{\n    public static void main(String args[]){\n        // fill the code\n     Scanner s =new Scanner(System.in);\n     System.out.println(\"Richter Magnitude:\");\n    float avg= s.nextFloat();\n\n    if(avg&lt;=2.4){\n        System.out.println(\"Micro\");\n    }\n    else if(avg&gt;=2.5 &amp;&amp; avg&lt;=5.4 ){\n        System.out.println(\"Light\");\n    }\n    else if(avg&gt;=5.5 &amp;&amp; avg&lt;=6.0 ){\n        System.out.println(\"Moderate\");\n    }\n    else if(avg&gt;=6.1 &amp;&amp; avg&lt;=6.9 ){\n        System.out.println(\"Strong\");\n    }\n    else if(avg&gt;=7.0 &amp;&amp; avg&lt;=7.9 ){\n        System.out.println(\"Major\");\n    }\n    else if( avg&gt;=8.0 ){\n        System.out.println(\"Great\");\n    }\n    }\n}\n</code></pre>"},{"location":"Java/LanguageFundamentals/#4","title":"4","text":"<pre><code>LIST OF PRIME NUMBERS\n\n\n\nTo speed up his composition of generating unpredictable rhythms, A.R.Rahman wants the list of prime numbers available in a range of numbers.\n\nCan you help him out?\n\nWrite a program to print all prime numbers in the interval [a,b] (a and b, both inclusive).\n\nUse a minimum of one for loop and one while loop\n\n\nInput Format:\n\nInput consists of 2 integers which correspond to a and b. Assume that a is always less than or equal to b.\n\n\n\nOutput Format:\n\nRefer sample output for details.\n\n\n\nSample Input 1:\n2\n15\n\nSample Output 1:\n2 3 5 7 11 13\n</code></pre> Main.java<pre><code>import java.util.*;\nimport java.lang.Math;\npublic class Main {\n\n    public static void main(String[] args) {\n        //fill your code here\n        Scanner s = new Scanner(System.in);\n        int a=s.nextInt();\n        int b=s.nextInt();\n\n        boolean flag=false;\n        int i=a;\n        while(i&lt;=b){\n\n            if(i&gt;=2){\n                flag=true;\n            }\n\n                for(int j=2;j&lt;i;j++){\n                if(i % j == 0 ){\n                    flag=false;\n                    break;\n                }\n            }\n\n            if(flag==true){\n                System.out.print(i+\" \");\n            }\n            i++;\n        }\n    }\n\n}\n</code></pre>"},{"location":"Java/LanguageFundamentals/#iassess","title":"iAssess","text":""},{"location":"Java/LanguageFundamentals/#1_1","title":"1","text":"<pre><code>Largest of three numbers using Ternary Operator\n\nWrite a program to find greatest of three numbers , using Ternary Operator.\n\nInput Format:\nThe input consists of 3 integers.\nOutput Format:\nOutput should display the greatest of the 3 numbers.\n\nRefer sample input and output for formatting specifications.\n[All text in bold corresponds to input and the rest corresponds to output]\n\n\nSample Input and Output 1:\nEnter the numbers :\n5\n8\n2\n8 is the greatest number\n\nSample Input and Output 2:\nEnter the numbers :\n44\n16\n23\n44 is the greatest number\n</code></pre> Main.java<pre><code>public class Main {\n\n}\n</code></pre>"},{"location":"Java/LanguageFundamentals/#2_1","title":"2","text":"<pre><code>Reverse of a number\n\n\n\nWrite a program to reverse the digits of a number.\n\n\n\nInput format :\n\nInput consists of an integer value.\n\nOutput format :\n\nOutput consists of the reverse of the given number.\n\n[ Refer Sample Input and Output for further details ]\n[ All text of bold corresponds to Input and the rest output]\n\nSample Input and Output 1 :\nEnter the number :\n5642\nReverse of the number is 2465\n\nSample Input and Output 2 :\n\nEnter the number :\n144\nReverse of the number is 441\n</code></pre> Main.java<pre><code>public class Main {\n\n}\n</code></pre>"},{"location":"Java/Multithreading/","title":"Multi-threading","text":""},{"location":"Java/Multithreading/#1","title":"1","text":"<pre><code>Article count\n\nMultithreading is a Java feature that allows concurrent execution of two or more parts of a program for maximum utilization of CPU. Each part of such a program is called a thread. The threads are light-weight processes within a process.\n\nLet's have a quick look at the way threads work in Java. For multi-threading to work, the class that will be invoked as a thread should extend the Thread class. You may wonder, what is the use of multi-threading. Let's understand it by the following exercise. Given 'n' number of lines of text, you have to find the total number of articles present in the given lines. while obtaining inputs from the user, the Main method has the full control of the execution.\n\nThe time is wasted in input gathering, which can be invaluable for large computing applications, has to be utilized properly. Hence a thread is invoked when a line is obtained and the articles are counted while the input for the subsequent lines is obtained from the user. Thus threading can increase efficiency and time constraints.\n\nStrictly adhere to the Object-Oriented specifications given in the problem statement. All class names, attribute names and method names should be the same as specified in the problem statement.\n\nCreate a class called Article which extends the Thread class with the following private attributes.\n\nAttributes  Datatype\nline    String\ncount   Integer\n\nInclude appropriate getters and setters.\nGenerate default and parameterized constructors. The format for the parameterized constructor is Article(String line)\n\nThe Article class includes the following methods\n\nMethod  Description\nvoid run()  This method counts the number of articles in a given line and stores the value in the count variable.\n\nCreate a driver class called Main. In the Main method, invoke 'n' threads for 'n' lines of input and compute the total count of the articles in the given lines.\n\nInput and Output format:\nRefer to sample Input and Output for formatting specifications.\n\n[All text in bold corresponds to the input and rest corresponds to the output]\nSample Input and Output:\n\nEnter the number of lines\n3\nEnter line 1\nAn article is a word used to modify a noun, which is a person, place, object, or idea.\nEnter line 2\nTechnically, an article is an adjective, which is any word that modifies a noun.\nEnter line 3\nThere are two different types of articles.\nThere are 7 articles in the given input\n</code></pre> <p>Main.java<pre><code>import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input= new Scanner(System.in);\n        String line;\n        Integer count=0;\n        System.out.println(\"Enter the number of lines\");\n        int numberOfLines=input.nextInt();\n        Article[] thread= new Article[numberOfLines];\n        for (int i = 0; i &lt; numberOfLines; i++) {\n            System.out.println(\"Enter line \"+(i+1));\n            line=\"\";\n            line=input.next();\n            line+=input.nextLine();\n            thread[i]=new Article(line);\n            thread[i].run();\n            count+=thread[i].getCount();\n\n        }\n\n\n        System.out.println(\"There are \"+count+\" articles in the given input\");\n        input.close();\n    }\n}\n</code></pre> Article.java<pre><code>//import java.util.StringTokenizer;\n\n/**\n * Article\n */\npublic class Article extends Thread  {\n\n    private String line;\n    private Integer count=0;\n    public void run(){\n        try{//StringTokenizer token =new StringTokenizer(line);\n           /*  while(token.hasMoreTokens()){\n                if(token.nextToken().equals(\"The\")||token.nextToken().equals(\"the\")||token.nextToken().equals(\"A\")||token.nextToken().equals(\"a\")||token.nextToken().equals(\"An\")||token.nextToken().equals(\"an\")){\n                    count++;\n                }\n            }*/\n            String[] token=line.split(\"\\\\s\");\n            for (int i = 0; i &lt; token.length; i++) {\n                if(token[i].equals(\"The\")||token[i].equals(\"the\")||token[i].equals(\"A\")||token[i].equals(\"a\")||token[i].equals(\"An\")||token[i].equals(\"an\")){\n                    count++;\n                    //System.out.println(Thread.currentThread().getName());\n                }\n            }\n        }\n        catch(Exception e){\n            System.out.println(\"Exception is caught\");\n        }   \n        //Thread.yield();   \n    }\n    public Article(){\n\n    }\n    public Article(String line){\n        this.line=line;\n    }\n    public Integer getCount(){\n        return count;\n    }\n}\n</code></pre></p>"},{"location":"Java/Multithreading/#2","title":"2","text":"<pre><code>City Count\n\nNow we are gonna use threading in a small part of our application. The users can be from any city. So get the user details in the console and count the number of users from each city.\n\nStrictly adhere to the Object-Oriented specifications given in the problem statement. All class names, attribute names and method names should be the same as specified in the problem statement.\n\nCreate a class User with the following private attributes\nAttributes  Datatype\nname    String\nmobileNumber    String\ncity    String\nstate   String\n\nInclude appropriate getters and setters\nCreate Default and Parameterized Constructor as User(String name, String mobileNumber, String city, String state) for the class.\n\nCreate a class CityCount extends Thread with the following private attribute,\n\nAttributes  Datatype\ncity    String\ncount   Integer\nuserList    List&lt;User&gt;\nCall a thread class for each city and count the number of users in that city.\n\nCreate constructor as public CityCount(String city, ArrayList&lt;User&gt; userList) and create appropriate getters and setters.\n\nWhen creating CityCount object initialize count as zero.\nCreate a driver class Main and use the main method.\n\nInput and Output format:\nRefer to Sample Input and Output for other further details and format of the output.\n\n[All Texts in bold corresponds to the input and rest are output]\nSample Input and Output 1:\n\nEnter the number of users:\n5\nEnter the details of user 1\nJohn,123456,Banglore,Karnataka\nEnter the details of user 2\nJane,23456,Hyderabad,Telungana\nEnter the details of user 3\nJim,56789,Chennai,Tamil Nadu\nEnter the details of user 4\nJune,45678,Chennai,Tamil Nadu\nEnter the details of user 5\nJames,13579,Banglore,Karnataka\nEnter the number of cities:\n3\nEnter the name of city 1\nChennai\nEnter the name of city 2\nBanglore\nEnter the name of city 3\nHyderabad\nChennai--2\nBanglore--2\nHyderabad--1\n</code></pre> <p>Main.java<pre><code>import java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        Scanner input= new Scanner(System.in).useDelimiter(\"\\\\s*[,\\\\n]\\\\s*\");\n        System.out.println(\"Enter the number of users:\");\n        ArrayList&lt;User&gt; user=new ArrayList&lt;User&gt;();\n        int numberOfUsers=input.nextInt();\n\n        for (int i = 0; i &lt; numberOfUsers; i++) {\n            System.out.println(\"Enter the details of user \"+(i+1));\n            user.add(new User(input.next(),input.next(),input.next(),input.next()));\n        }\n        try{\n        System.out.println(\"Enter the number of cities:\");\n        ArrayList&lt;CityCount&gt; cityCount=new ArrayList&lt;CityCount&gt;();\n        int numberOfcities=input.nextInt();\n        for (int i = 0; i &lt; numberOfcities; i++) {\n            System.out.println(\"Enter the name of city \"+(i+1));\n            String city=input.next();\n            //city+=input.nextLine();\n            cityCount.add(new CityCount(city,user));\n            cityCount.get(i).run();\n        }\n\n        for (int i = 0; i &lt; cityCount.size(); i++) {\n            System.out.println(cityCount.get(i).getCity()+\"--\"+cityCount.get(i).getCount());\n\n        }\n        input.close();\n    }\n    catch(Exception e){\n        System.out.println(\"Exception is caught\");\n    }\n    }\n}\n</code></pre> User.java<pre><code>public class User {\n    private String name;\n    private String mobileNumber;\n    private String city;\n    private String state;\n    public User(){\n\n    }\n    public User(String name, String mobileNumber, String city, String state){\n        this.name=name;\n        this.mobileNumber=mobileNumber;\n        this.city=city;\n        this.state=state;\n    }\n    public String getCity(){\n        return this.city;\n    }\n}\n</code></pre> CityCount.java<pre><code>import java.util.ArrayList;\n\npublic class CityCount extends Thread{\n    private String city;\n    private Integer count=0;\n    private ArrayList&lt;User&gt; userList=new ArrayList&lt;User&gt;();\n    public void run(){\n\n            for (int index = 0; index &lt; userList.size(); index++) {\n                if(this.city.equals(userList.get(index).getCity())){\n                    count++;\n                }\n            }\n\n\n    }\n    public CityCount(){\n\n    }\n    public CityCount(String city, ArrayList&lt;User&gt; userList){\n        this.city=city;\n        this.userList=userList;\n    }\n    public Integer getCount(){\n        return this.count;\n    }\n    public String getCity(){\n        return this.city;\n    }\n}\n</code></pre></p>"},{"location":"Java/Multithreading/#iassess","title":"iAssess","text":"<pre><code>Character Frequency - Multiple Threads\n\nYour English literature friend is very happy with the code you gave him. Now for his research, he used your application to find character frequency in many novels. For larger novels, the application takes a lot of time for computation. So he called you on a fine Sunday to discuss this with you. He wanted to know whether you can improve the speed of the application.\n\nYou decided to modify the application by using multiple threads to reduce the computation time. For this, accept the number of counters or threads at the beginning of the problem and get the string for each counter or thread. Create a thread by extending the Thread class and take the user entered string as input. Each thread calculates the character frequency for the word assigned to that thread. All the counts are stored locally in the thread and once all the threads are completed print the character frequency for each of the threads.\n\nCreate a class Main.\n\nInput and Output format:\nRefer to sample Input and Output for formatting specifications.\n\nSample input and output:\n[All Texts in bold corresponds to the input and rest are output]\n\nEnter Number of Counters :\n2\nEnter text for counter 1 :\nFrequencyCounter\nEnter text for counter 2 :\nJavaTheCompleteReference\nCounter 1 Result :\nC:1 F:1 c:1 e:3 n:2 o:1 q:1 r:2 t:1 u:2 y:1\nCounter 2 Result :\nC:1 J:1 R:1 T:1 a:2 c:1 e:7 f:1 h:1 l:1 m:1 n:1 o:1 p:1 r:1 t:1 v:1\n</code></pre> <p>Main.java<pre><code>import java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input=new Scanner(System.in);\n        System.out.println(\"Enter Number of Counters :\");\n        int numberOfCounters=input.nextInt();\n        String textForCounter;\n        ArrayList&lt;Counter&gt; threads=new ArrayList&lt;&gt;();\n        for (int i = 0; i &lt; numberOfCounters; i++) {\n            System.out.println(\"Enter text for counter \"+(i+1)+\" :\");\n            textForCounter=input.next();\n            textForCounter+=input.nextLine();\n            threads.add(new Counter(textForCounter));\n            threads.get(i).run();\n        }\n        int[]frequency=new int[256];\n        for (int i = 0; i &lt; numberOfCounters; i++) {\n\n            frequency=threads.get(i).getFrequency();\n            System.out.println(\"Counter \"+(i+1)+\" Result :\");\n            for (int j = 0; j &lt; frequency.length; j++) {\n                if(frequency[j]!=0){\n\n                    System.out.print((char)j+\":\"+frequency[j]+\" \");\n                }\n\n            }\n            System.out.println(\"\");\n        }\n\n\n    }\n}\n</code></pre> Counter.java<pre><code>public class Counter extends Thread{\n    int[] frequency=new int[256];\n    String counter;\n    public void run(){\n            for (int i = 0; i &lt; counter.length(); i++) {\n                frequency[(int)counter.charAt(i)]++;\n            }\n    }\n    public int[] getFrequency(){\n        return this.frequency;\n    }\n    public Counter (String counter){\n        this.counter=counter;\n    }\n\n}\n</code></pre></p>"},{"location":"Java/ObjectOrientedProgramming/","title":"Object Oriented Programming","text":""},{"location":"Java/ObjectOrientedProgramming/#1","title":"1","text":"<pre><code>The class Department has been created with the following attributes,\nAttribute   Datatype\ndepartmentName  String\nstaff   Staff\n\nThe class Staff has been created with the following attributes,\nAttribute   Datatype\nstaffName   String\ndesignation String\n\nInclude the following method in the Department class,\nMethod  Description\npublic displayStaff()   This method displays \"staffName is working in the departmentName department as designation\".\n\nCreate a driver class Main, in the main method get the inputs from user, create the objects and call the methods.\n\nInput and Output format:\nRefer to sample Input and Output for formatting specifications.\n\nSample Input and Output:\n[All text in bold corresponds to the input and rest corresponds to the output]\n\nEnter the name of the staff:\nJane\nEnter the staff designation:\nAssociate Professor\nEnter the department name:\nPhysics\nJane is working in the Physics department as Associate Professor\n</code></pre> <p>Main.java<pre><code>import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input= new Scanner(System.in);\n        Department department = new Department();\n        System.out.println(\"Enter the name of the staff:\");\n        department.staff.staffName=input.nextLine();\n        System.out.println(\"Enter the staff designation:\");\n        department.staff.designation=input.nextLine();\n        System.out.println(\"Enter the department name:\");\n        department.departmentName=input.nextLine();\n        department.displayStaff();\n        input.close();\n    }\n}\n</code></pre> Staff.java<pre><code>public class Staff {\n    String staffName;\n    String designation;\n}\n</code></pre> Department.java<pre><code>/**\n * Department\n */\npublic class Department {\n\n    String departmentName;\n    Staff staff= new Staff() ;\n    public void displayStaff() {\n        System.out.println(staff.staffName +\" is working in the \"+departmentName+\" department as \"+staff.designation);\n    }\n}\n</code></pre></p>"},{"location":"Java/ObjectOrientedProgramming/#2","title":"2","text":"<pre><code>Bank Account\nInheritance in Java is same as that of inheritance in real Life. A class which inherits another class obtains all the latter's attributes and methods. The former is called Child class whilst the latter is called Parent class. This phenomenon would be very promising in applications dealing with multiple classes that are constituted by similar or more likely same attributes. You 'll get to know the importance of inheritance from the following problem. All type of accounts in a bank have common attributes which can be inherited from an Account class.\n\nThe class Account has been created with the following protected attributes,\n\nAttributes  Datatype\naccName String\naccNo   String\nbankName    String\nInclude appropriate getters and setters.\n\n\nInclude the following protected methods.\n\nMethod  Description\npublic void display()   This protected method displays the account details\n\n\nCreate a class CurrentAccount with following private attributes which extends Account class\n\nAttributes  Datatype\ntinNumber   String\nCreate default constructor and a parameterized constructor with arguments in order CurrentAccount(String accName,String accNo,String bankName,String tinNumber).\nInclude appropriate getters and setters.\n\n\nInclude the following public methods.\n\nMethod  Description\npublic void display()   This method calls the super class display().\nThis public method displays the TIN number.\nCall this method with the reference of base class.\n\n\nCreate a class SavingsAccount with following private attributes which extends Account class\n\nAttributes  Datatype\norgName String\nCreate default constructor and a parameterized constructor with arguments in order SavingsAccount(String accName,String accNo,String bankName,String orgName).\nInclude appropriate getters and setters.\n\n\nInclude the following public methods.\n\nMethod  Description\npublic void display()   This method calls the super class display().\nThis public method displays the Organisation Name.\nCall this method with the reference of base class.\n\n\nCreate a driver class named Main to test the above class.\n\nNote:\nStrictly adhere to the Object-Oriented Specifications given in the problem statement.All class names, attribute names and method names should be the same as specified in the problem statement.\n\nInput Format:\nThe first input corresponds to choose current or savings account\nThe next line consists of account name,account number,bank name,org name or tin number (according to chosen account type)\n\nOutput Format\nThe output consists of account details  and TIN number or Organisation name\nRefer sample output for formatting specifications.\n\nSample Input/Output-1:\nChoose Account Type\n1.Savings Account\n2.Current Account\n1\nEnter Account details in comma separated(Account Name,Account Number,Bank Name,Organisation Name)\nMorsh,033808020000879,Baroda,Amphisoft\nAccount Name:Morsh\nAccount Number:033808020000879\nBank Name:Baroda\nOrganisation Name:Amphisoft\n\nSample Input/Output-2:\nChoose Account Type\n1.Savings Account\n2.Current Account\n2\nEnter Account details in comma separated(Account Name,Account Number,Bank Name,TIN Number)\nKrish,131231451,ICICI,798902\nAccount Name:Krish\nAccount Number:131231451\nBank Name:ICICI\nTIN Number:798902\n</code></pre> <p>Main.java<pre><code>import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input= new Scanner(System.in);\n        System.out.println(\"Choose Account Type\\n1.Savings Account\\n2.Current Account\");\n        int choice = input.nextInt();\n        switch (choice) {\n            case 1:\n\n                System.out.println(\"Enter Account details in comma separated(Account Name,Account Number,Bank Name,Organisation Name)\");\n                Account savings= new SavingsAccount(input.useDelimiter(\"[,]\").next(),input.useDelimiter(\"[,]\").next(),input.useDelimiter(\"[,]\").next(),input.useDelimiter(\"[,\\\\n]\").next());\n                savings.display();\n                break;\n            case 2:\n                System.out.println(\"Enter Account details in comma separated(Account Name,Account Number,Bank Name,TIN Number)\");\n                Account current= new CurrentAccount(input.useDelimiter(\"[,]\").next(),input.useDelimiter(\"[,]\").next(),input.useDelimiter(\"[,]\").next(),input.useDelimiter(\"[,\\\\n]\").next());\n                current.display();\n                break;\n            default:\n                break;\n        }\n        input.close();\n    }\n}\n</code></pre> Account.java<pre><code>/**\n * Account\n */\npublic class Account {\n\n    protected String accName;\n    protected String accNo;\n    protected String bankName;\n    protected void display() {\n\n    }\n}\n</code></pre> SavingsAccount.java<pre><code>public class SavingsAccount extends Account {\n    private String orgName;\n    public SavingsAccount(){\n\n    }\n    public SavingsAccount(String accName,String accNo,String bankName,String orgName){\n        this.accName= accName;\n        this.accNo= accNo;\n        this.bankName=bankName;\n        this.orgName= orgName;\n    }\n    public void display(){\n        System.out.println(\"Account Name:\"+accName);\n        System.out.println(\"Account Number:\"+accNo);\n        System.out.println(\"Bank Name:\"+bankName);\n        System.out.println(\"Organisation Name:\"+orgName);\n    }\n}\n</code></pre> CurrentAccount.java<pre><code>public class CurrentAccount extends Account {\n    private String tinNumber;\n    public CurrentAccount(){\n\n    }\n    public CurrentAccount(String accName,String accNo,String bankName,String tinNumber){\n        this.accName= accName;\n        this.accNo= accNo;\n        this.bankName=bankName;\n        this.tinNumber= tinNumber;\n    }\n    public void display(){\n        System.out.println(\"Account Name:\"+accName);\n        System.out.println(\"Account Number:\"+accNo);\n        System.out.println(\"Bank Name:\"+bankName);\n        System.out.println(\"TIN Number:\"+tinNumber);\n    }\n}\n</code></pre></p>"},{"location":"Java/ObjectOrientedProgramming/#3","title":"3","text":"<pre><code>Abstract Class - FundTransfer\n\nLet's try an application like a fund transfer for our larger application. So, in fund transfer, there are 3 types of NEFT/IMPS/RGTS. We can create an abstract class FundTransfer. And extend it in the child classes. Create an abstract method transfer and implement it in all the child classes.\n\nStrictly adhere to the Object-Oriented specifications given in the problem statement. All class names, attribute names and method names should be the same as specified in the problem statement.\n\nCreate an abstract class FundTransfer with following private attributes,\n\nAttributes  Datatype\naccountNumber   String\nbalance Double\n\nInclude the following methods in the class FundTransfer.\n\nMethod  Description\nBoolean validate(Double transfer)   To check if the accountNumber is 10 digits, the transfer amount is non-negative and less than balance.\nIf all cases are satisfied then return true, if not return false\nBoolean transfer(Double transfer)   It is an abstract method with no definition\n\nCreate a class NEFTTransfer which extends FundTransfer.\n\nInclude the following method in the class NEFTTransfer.\n\nMethod  Description\nBoolean transfer(Double transfer)   To check whether the transfer amount+5% of the transfer amount is less than balance.\nIf then subtracts transfer amount and 5% service charge from balance and return true, if not return false\n\nCreate a class IMPSTransfer which extends FundTransfer.\n\nInclude the following method in the class IMPSTransfer.\n\nMethod  Description\nBoolean transfer(Double transfer)   To check whether transfer amount+2% of transfer amount is less than balance.\nIf then subtracts transfer amount and 2% service charge from balance and return true, if not return false.\n\nCreate a class RTGSTransfer which extends FundTransfer.\n\nInclude the following method in the class RTGSTransfer.\n\nMethod  Description\nBoolean transfer(Double transfer)   To check whether the transfer amount is greater than Rs.10000.\nIf then subtracts transfer amount from balance and return true, if not return false.\n\nInclude appropriate getters/setters, constructors with super() to create objects. Write a driver class Main to test them.\n\nInput format:\nRefer to sample Input and Output for the details and for the formatting specifications.\n\nOutput format:\nPrint \u201cTransfer occurred successfully\u201d in the main method. If the transfer function returns true.\nPrint \"Account number or transfer amount seems to be wrong\" in the main method. If validate function returns false.\nPrint \"Transfer could not be made\" in the main method. If the transfer function returns false.\nRefer to sample Input and Output for formatting specifications.\n\nNote: All Texts in bold corresponds to the input and rest are output\n\nSample Input and Output 1:\n\nEnter your account number:\n1234567890\nEnter the balance of the account:\n10000\nEnter the type of transfer to be made:\n1.NEFT\n2.IMPS\n3.RTGS\n1\nEnter the amount to be transferred:\n2000\nTransfer occurred successfully\nRemaining balance is 7900.0\n\nSample Input and Output 2:\n\nEnter your account number:\n1111111\nEnter the balance of the account:\n10000\nEnter the type of transfer to be made:\n1.NEFT\n2.IMPS\n3.RTGS\n2\nEnter the amount to be transferred:\n1000\nAccount number or transfer amount seems to be wrong\n\nSample Input and Output 3:\n\nEnter your account number:\n1234567890\nEnter the balance of the account:\n50000\nEnter the type of transfer to be made:\n1.NEFT\n2.IMPS\n3.RTGS\n3\nEnter the amount to be transferred:\n7500\nTransfer could not be made\n</code></pre> <p>Main.java<pre><code>import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input= new Scanner(System.in);\n        System.out.println(\"Enter your account number:\");\n        String accNo = input.nextLine();\n        System.out.println(\"Enter the balance of the account:\");\n        Double accBal= input.nextDouble();\n        System.out.println(\"Enter the type of transfer to be made:\\n1.NEFT\\n2.IMPS\\n3.RTGS\");\n        int choice = input.nextInt();\n        Double amount;\n        switch (choice) {\n            case 1:\n                System.out.println(\"Enter the amount to be transferred:\");\n                amount=input.nextDouble();\n                FundTransfer neft =new NEFTTransfer(accNo,accBal);\n                if(neft.validate(amount)){\n                    if(neft.transfer(amount)){\n                    System.out.println(\"Transfer occurred successfully\");\n                    System.out.println(\"Remaining balance is \"+neft.getBalance());\n                    }\n                    else{\n                        System.out.println(\"Transfer could not be made\");\n                    }\n                }\n                else{\n                    System.out.println(\"Account number or transfer amount seems to be wrong\");\n                }\n                break;\n            case 2:\n                System.out.println(\"Enter the amount to be transferred:\");\n                amount=input.nextDouble();\n                FundTransfer imps =new IMPSTransfer(accNo,accBal);\n                if(imps.validate(amount)){\n                    if(imps.transfer(amount)){\n                    System.out.println(\"Transfer occurred successfully\");\n                    System.out.println(\"Remaining balance is \"+imps.getBalance());\n                    }\n                    else{\n                        System.out.println(\"Transfer could not be made\");\n                    }\n                }\n                else{\n                    System.out.println(\"Account number or transfer amount seems to be wrong\");\n                }\n                break;\n            case 3:\n                System.out.println(\"Enter the amount to be transferred:\"); \n                amount=input.nextDouble();\n                FundTransfer rtgs =new RTGSTransfer(accNo,accBal);  \n                if(rtgs.validate(amount)){\n                    if(rtgs.transfer(amount)){\n                    System.out.println(\"Transfer occurred successfully\");\n                    System.out.println(\"Remaining balance is \"+rtgs.getBalance());\n                    }\n                    else{\n                        System.out.println(\"Transfer could not be made\");\n                    }\n                }\n                else{\n                    System.out.println(\"Account number or transfer amount seems to be wrong\");\n                }\n                break;\n            default:\n                break;\n        }\n        input.close();\n    }\n}\n</code></pre> FundTransfer.java<pre><code>public abstract class FundTransfer {\n    private String accountNumber;\n    private Double balance;\n    public Boolean validate(Double transfer){\n        if(accountNumber.length()&gt;10||accountNumber.length()&lt;10 || transfer&lt;0 || transfer &gt;= balance){\n\n            return false;\n        }\n        else {\n\n            return true;\n        }\n    }\n    public abstract Boolean transfer(Double transfer);\n\n    public void setAccount(String accountNumber){\n        this.accountNumber=accountNumber;\n    }\n    public void setBalance(Double balance){\n        this.balance=balance;\n\n    }\n    public Double getBalance(){\n        return balance;\n    }\n\n\n}\n</code></pre> IMPSTransfer.java<pre><code>/**\n * IMPSTransfer\n */\npublic class IMPSTransfer extends FundTransfer{\n\n    public Boolean transfer(Double transfer){\n\n            if((transfer +(0.02*transfer))&lt;super.getBalance() ){\n                super.setBalance(super.getBalance()-transfer-0.02*transfer);\n            return true;\n            }\n\n            else{\n                return false;\n            }        \n    }\n    public IMPSTransfer(String accNo,Double accBal){\n        super.setAccount(accNo);\n        super.setBalance(accBal);\n    }\n}\n</code></pre> NEFTTransfer.java<pre><code>public class NEFTTransfer  extends FundTransfer {\n    public Boolean transfer(Double transfer){\n            if((transfer +(0.05*transfer))&lt;super.getBalance() ){\n                super.setBalance(super.getBalance()-transfer-0.05*transfer);\n            return true;\n            }\n\n            else{\n                return false;\n            }\n    }\n\n    public NEFTTransfer(String accNo,Double accBal){\n        super.setAccount(accNo);\n        super.setBalance(accBal);\n    }\n\n}\n</code></pre> RTGSTransfer.java<pre><code>public class RTGSTransfer extends FundTransfer {\n    public Boolean transfer(Double transfer){\n            if(transfer&gt;10000 ){\n                super.setBalance(super.getBalance()-transfer);\n            return true;\n            }\n            else{\n\n                return false;\n            }\n    }\n    public RTGSTransfer(String accNo,Double accBal){\n        super.setAccount(accNo);\n        super.setBalance(accBal);\n    }\n}\n</code></pre></p>"},{"location":"Java/ObjectOrientedProgramming/#iassess","title":"iAssess","text":""},{"location":"Java/ObjectOrientedProgramming/#1_1","title":"1","text":"<pre><code>super() method\n\nSo far you have learned about the basics of inheritance and created 2 child classes for a parent class and displayed the details. Now let's go for simple manipulation along with superclass. This will be needed in our application as some class share common attributes so they can be grouped as child classes of some superclass.\n\nTo try this let's create a parent class Event with following attributes,\nAttributes  Datatype\nname    String\ndetail  String\ntype    String\nownerName   String\ncostPerDay  Double\n\nThen create child class Exhibition that extends Event with the following attribute,\nAttributes  Datatype\nnoOfStall   Integer\n\nAnd create another child class StageEvent that extends Event with the following attribute,\nAttributes  Datatype\nnoOfSeats   Integer\n\nAdd suitable constructor (with super() if necessary) and getters/setters for the classes.\n\nGet the starting and ending date of the event from the user and calculate the total cost for the event. Then calculate GST for the event according to the event type.\n\nGST is 5% for Exhibition and 15% for StageEvent.\n\nInput format:\nThe first line of input is an integer which corresponds to the choice of event.\nThe second line of input is the details of the event in the CSV format\n(name, detail, type, owner name,costPerDay,noOfStall)  for the Exhibition.  \n(name, detail, type, owner name,costPerDay,noOfSeats)  for the stage event.\nThe next line is the starting date of the event.\nThe last line of the input is the ending date of the event.\n\nOutput format:\nThe output is the GST to be paid for the event.\nRefer to sample input/output for other further details and format of the output.\n\n[All Texts in bold corresponds to the input and rest are output]\nSample Input/Output 1:\n\nEnter your choice:\n1.Exhibition event\n2.Stage event\n1\nEnter the details of exhibition:\nScience Fair,Exciting experiments,Fair,John,10000.00,10\nEnter the starting date of the event:\n03-01-2018\nEnter the ending date of the event:\n06-01-2018\nThe GST to be paid is Rs.1500.0\n\nSample Input/Output 2:\n\nEnter your choice:\n1.Exhibition event\n2.Stage event\n2\nEnter the details of stage event:\nMovie Award Function,Awards for all category,Award function,Joe,100000,10000\nEnter the starting date of the event:\n07-01-2018\nEnter the ending date of the event:\n09-01-2018\nThe GST to be paid is Rs.30000.0\n</code></pre> <p>Main.java<pre><code>import java.text.DecimalFormat;\nimport java.time.LocalDate;\nimport java.time.Period;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            LocalDate start;\n        LocalDate end;\n        DateTimeFormatter dateFormat = DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");\n        DecimalFormat df = new DecimalFormat(\"0.0\");\n        Period period;\n        int days;\n        Scanner input= new Scanner(System.in).useDelimiter(\"\\\\s*[,\\\\n]\\\\s*\");\n        System.out.println(\"Enter your choice:\\n1.Exhibition event\\n2.Stage event\");\n        int choice=input.nextInt();\n        switch (choice) {\n            case 1:\n                System.out.println(\"Enter the details of exhibition:\");                \n                Event exhibition = new Exhibition(input.next(),input.next(),input.next(),input.next(),input.nextDouble(),input.nextInt());\n\n                System.out.println(\"Enter the starting date of the event:\");\n                start= LocalDate.parse(input.next(),dateFormat);\n                System.out.println(\"Enter the ending date of the event:\");\n                end=LocalDate.parse(input.next(),dateFormat);\n                period = Period.between(start,end);\n                days =period.getDays();\n\n                System.out.println(\"The GST to be paid is Rs.\"+ df.format(days*0.05*exhibition.getCostPerDay()));\n\n                break;\n\n            case 2:\n                System.out.println(\"Enter the details of stage event:\");\n                Event stage = new StageEvent(input.next(),input.next(),input.next(),input.next(),input.nextDouble(),input.nextInt());\n                System.out.println(\"Enter the starting date of the event:\");\n                start= LocalDate.parse(input.next(),dateFormat);\n                System.out.println(\"Enter the ending date of the event:\");\n                end=LocalDate.parse(input.next(),dateFormat);\n                period = Period.between(start,end);\n                days =period.getDays();\n                System.out.println(\"The GST to be paid is Rs.\"+ df.format(days*0.15*stage.getCostPerDay()));\n\n\n                break;\n            default:\n                break;\n        }\n        input.close();\n        } catch (Exception e) {\n            // TODO: handle exception\n        }\n\n    }\n}\n</code></pre> Event.java<pre><code>/**\n * Event\n */\npublic class Event {\n\n    private String name;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    private String detail;\n\n    public String getDetail() {\n        return detail;\n    }\n\n    public void setDetail(String detail) {\n        this.detail = detail;\n    }\n\n    private String type;\n\n    public String getType() {\n        return type;\n    }\n\n    public void setType(String type) {\n        this.type = type;\n    }\n\n    private String ownerName;\n\n    public String getOwnerName() {\n        return ownerName;\n    }\n\n    public void setOwnerName(String ownerName) {\n        this.ownerName = ownerName;\n    }\n\n    private Double costPerDay;\n\n    public Event() {\n        super();\n    }\n\n    public Double getCostPerDay() {\n        return costPerDay;\n    }\n\n    public void setCostPerDay(Double costPerDay) {\n\n        this.costPerDay = costPerDay;\n    }\n\n    public Event(String name, String detail, String type, String ownerName, Double costPerDay) {\n        super();\n        this.name = name;\n        this.detail = detail;\n        this.type = type;\n        this.ownerName = ownerName;\n        this.costPerDay = costPerDay;\n    }\n}\n</code></pre> Exhibition.java<pre><code>public class Exhibition extends Event{\n    private Integer noOfStall;\n    public Exhibition(){\n        super();\n    }\n\npublic Exhibition(String name, String detail, String type, String ownerName, Double costPerDay, Integer noOfStall) {\n        super(name, detail, type, ownerName, costPerDay);\n        this.noOfStall = noOfStall;\n    }\n\npublic Integer getNoOfStall() {\n    return noOfStall;\n}\n\npublic void setNoOfStall(Integer noOfStall) {\n    this.noOfStall = noOfStall;\n}\n\n}\n</code></pre> StageEvent.java<pre><code>public class StageEvent extends Event{\n    private Integer noOfSeats;\n    public StageEvent(){\n        super();\n    }\n\n    public StageEvent(String name, String detail, String type, String ownerName, Double costPerDay, Integer noOfSeats) {\n        super(name, detail, type, ownerName, costPerDay);\n        this.noOfSeats = noOfSeats;\n    }\n\n\n\n    public Integer getNoOfSeats() {\n        return noOfSeats;\n    }\n\n    public void setNoOfSeats(Integer noOfSeats) {\n        this.noOfSeats = noOfSeats;\n    }\n\n}\n</code></pre></p>"},{"location":"Java/ObjectOrientedProgramming/#2_1","title":"2","text":"<pre><code>Interface\n\nThe Interface defines a rule that any classes that implement it should override all the methods. Let's implement Interface in our application. We'll start simple, by including display method in the Stall interface. Now all types of stalls that implement the interface should override the method.\n\nStrictly adhere to the Object-Oriented specifications given in the problem statement. All class names, attribute names and method names should be the same as specified in the problem statement.\n\nCreate an interface Stall  with the following method\n\nMethod          Description\n\nvoid display()  abstract method.\n\n\nCreate a class GoldStall which implements Stall interface with the following private attributes\n\nAttribute   Datatype\n\nstallName   String\n\ncost        Integer\n\nownerName   String\n\ntvSet       Integer\n\nCreate default constructor and a parameterized constructor with arguments in order GoldStall(String stallName, Integer cost, String ownerName, Integer tvSet).\nInclude appropriate getters and setters.\n\nInclude the following method in the class GoldStall\n\nMethod\n\nDescription\n\nvoid display()\n\nTo display the stall name, cost of the stall, owner name and the number of tv sets.\n\n\nCreate a class PremiumStall which implements Stall interface with following private attributes\n\nAttribute   Datatype\n\nstallName   String\n\ncost        Integer\n\nownerName   String\n\nprojector   Integer\n\nCreate default constructor and a parameterized constructor with arguments in order PremiumStall(String stallName, Integer cost, String ownerName, Integer projector).\nInclude appropriate getters and setters.\n\nInclude the following method in the class PremiumStall.\n\nMethod          Description\n\nvoid display()  To display the stall name, cost of the stall, owner name and the number of projectors.\n\n\nCreate a class ExecutiveStall which implements Stall interface with following private attributes\n\nAttribute   Datatype\n\nstallName   String\n\ncost        Integer\n\nownerName   String\n\nscreen      Integer\n\nCreate default constructor and a parameterized constructor with arguments in order ExecutiveStall(String stallName, Integer cost, String ownerName, Integer screen).\nInclude appropriate getters and setters.\n\nInclude the following method in the class ExecutiveStall.\n\nMethod          Description\n\nvoid display()  To display the stall name, cost of the stall, owner name and the number of screens.\n\n\nCreate a driver class named Main to test the above class.\n\nInput Format:\nThe first input corresponds to choose the stall type.\nThe next line of input corresponds to the details of the stall in CSV format according to the stall type.\n\nOutput Format:\nPrint \u201cInvalid Stall Type\u201d if the user has chosen the stall type other than the given type\nOtherwise, display the details of the stall.\nRefer to sample output for formatting specifications.\n\nNote: All Texts in bold corresponds to the input and rest are output\n\nSample Input and Output 1:\n\nChoose Stall Type\n1)Gold Stall\n2)Premium Stall\n3)Executive Stall\n1\nEnter Stall details in comma separated(Stall Name,Stall Cost,Owner Name,Number of TV sets)\nThe Mechanic,120000,Johnson,10\nStall Name:The Mechanic\nCost:120000.Rs\nOwner Name:Johnson\nNumber of TV sets:10\n\nSample Input and Output 2:\n\nChooseStall Type\n1)Gold Stall\n2)Premium Stall\n3)Executive Stall\n2\nEnter Stall details in comma separated(Stall Name,Stall Cost,Owner Name,Number of Projectors)\nKnitting plaza,300000,Zain,20\nStall Name:Knitting plaza\nCost:300000.Rs\nOwner Name:Zain\nNumber of Projectors:20\n\nSample Input Output 3:\n\nChooseStall Type\n1)Gold Stall\n2)Premium Stall\n3)Executive Stall\n3\nEnter Stall details in comma separated(Stall Name,Stall Cost,Owner Name,Number of Screens)\nFruits Hunt,10000,Uber,7\nStall Name:Fruits Hunt\nCost:10000.Rs\nOwner Name:Uber\nNumber of Screens:7\n\nSample Input Output 4:\n\nChooseStall Type\n1)Gold Stall\n2)Premium Stall\n3)Executive Stall\n4\nInvalid Stall Type\n</code></pre> <p>Main.java<pre><code>import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n\n        Scanner input= new Scanner(System.in).useDelimiter(\"\\\\s*[,\\\\n]\\\\s*\");\n        System.out.println(\"Choose Stall Type\\n1)Gold Stall\\n2)Premium Stall\\n3)Executive Stall\");\n        int choice=input.nextInt();\n        switch (choice) {\n            case 1:\n                System.out.println(\"Enter Stall details in comma separated(Stall Name,Stall Cost,Owner Name,Number of TV sets)\");                \n                GoldStall gold = new GoldStall(input.next(),input.nextInt(),input.next(),input.nextInt());\n                gold.display();\n                break;\n\n            case 2:\n                System.out.println(\"Enter Stall details in comma separated(Stall Name,Stall Cost,Owner Name,Number of Projectors)\");\n                PremiumStall premium = new PremiumStall(input.next(),input.nextInt(),input.next(),input.nextInt());\n                premium.display();\n\n                break;\n            case 3:\n                System.out.println(\"Enter Stall details in comma separated(Stall Name,Stall Cost,Owner Name,Number of Screens)\");\n                ExecutiveStall executive = new ExecutiveStall(input.next(),input.nextInt(),input.next(),input.nextInt());\n                executive.display();\n\n                break;\n            default:\n            System.out.println(\"Invalid Stall Type\");\n                break;\n        }\n        input.close();\n    }\n}\n</code></pre> Stall.java<pre><code>interface Stall{\n       abstract void display();\n}\n</code></pre> ExecutiveStall.java<pre><code>/**\n * ExecutiveStall\n */\npublic class ExecutiveStall implements Stall {\n\n    String stallName;\n    Integer cost;\n    String ownerName;\n    Integer screen;\n    public void display(){\n        System.out.println(\"Stall Name:\"+this.stallName);       \n        System.out.println(\"Cost:\"+ this.cost+ \".Rs\");\n        System.out.println(\"Owner Name:\"+this.ownerName);\n        System.out.println(\"Number of Screens:\"+this.screen);\n    }\n    ExecutiveStall(){\n        super();\n    }\n    ExecutiveStall(String stallName, Integer cost, String ownerName, Integer screen){\n        super();\n        this.stallName=stallName;\n        this.cost=cost;\n        this.ownerName=ownerName;\n        this.screen=screen;\n    }\n}\n</code></pre> GoldStall.java<pre><code>/**\n * GoldStall\n */\npublic class GoldStall implements Stall{\n\n    public String stallName;\n    Integer cost;\n    String ownerName;\n    Integer tvSet;\n    public void display(){\n        System.out.println(\"Stall Name:\"+this.stallName);       \n        System.out.println(\"Cost:\"+ this.cost+ \".Rs\");\n        System.out.println(\"Owner Name:\"+this.ownerName);\n        System.out.println(\"Number of TV sets:\"+this.tvSet);\n    }\n    GoldStall(){\n        super();\n    }\n    GoldStall(String stallName, Integer cost, String ownerName, Integer tvSet){\n        super();\n        this.stallName=stallName;\n        this.cost=cost;\n        this.ownerName=ownerName;\n        this.tvSet=tvSet;\n    }\n}\n</code></pre> PremiumStall.java<pre><code>public class PremiumStall implements Stall{\n    String stallName;\n    Integer cost;\n    String ownerName;\n    Integer projector;\n    public void display(){\n        System.out.println(\"Stall Name:\"+this.stallName);       \n        System.out.println(\"Cost:\"+ this.cost+ \".Rs\");\n        System.out.println(\"Owner Name:\"+this.ownerName);\n        System.out.println(\"Number of Projectors:\"+this.projector);\n    }\n    PremiumStall(){\n        super();\n    }\n    PremiumStall(String stallName, Integer cost, String ownerName, Integer projector){\n        super();\n        this.stallName=stallName;\n        this.cost=cost;\n        this.ownerName=ownerName;\n        this.projector=projector;\n    }\n}\n</code></pre></p>"},{"location":"Java/StreamsAndFiles/","title":"Streams and Files","text":""},{"location":"Java/StreamsAndFiles/#1","title":"1","text":"<pre><code>File handling introduction\n\nFile handling is an important technique that you need to accustom to it. File reading and writing are types of handling. Let's practice file reading for now. There is a Class called FileReader that will help us with file reading. You'll be provided with a file that contains the data in CSV format. Using FileReader, read the file and parse the data contained in it to below specified format.\n\nProvided \"input.csv\" which have User details. Read all the user information stored in CSV format and create a user object by parsing the line. Add all the user objects to the ArrayList. At last, display the user list.\n\nStrictly adhere to the Object-Oriented specifications given in the problem statement. All class names, attribute names and method names should be the same as specified in the problem statement.\n\nCreate a class called User with following private attributes\n\nAttributes  Datatype\nname    String\nemail   String\nusername    String\npassword    String\n\nInclude getters and setters.\nCreate a default constructor and parameterized constructor.\nFormat for the parameterized constructor is User(String name, String email, String username, String password)\n\nCreate UserBO class with following methods\n\nMethod  Description\npublic List&lt;User&gt; readFromFile(BufferedReader br)   This method accepts the BufferedReader object as input and parses the data\nin the file to User objects and adds them to a list. Finally, it returns the list of User objects.\npublic void display(List&lt;User&gt; list)    This method accepts a list of User objects and displays the user details by iterating the list.\nUse \"%-15s %-20s %-15s %s\\n\" to print the details.\n\nCreate a driver class called Main. If the List of Users is empty print \"The list is empty\" in the main method. Else display the user detail by calling the display method.\n\nNote : Use BufferedReader br=new BufferedReader(new FileReader(\"input.csv\")) for file reading.\n\nInput format:\nRead the input from the \"input.csv\" file which contains the user details.\n\nOutput format:\nUse \"%-15s %-20s %-15s %s\\n\" to print statements for the heading of the details in the Main method.\n\nSample Input: (input.csv)\n\n\n\n\nSample Output :\n\nName            Email                Username        Password\nRam             ram@gmail.com        ram             ram123\nkrish           krish@gmail.com     krish           abc\n</code></pre> <p>input.csv<pre><code>Ram,ram@gmail.com,ram,ram123\nkrish,krish@gmail.com,krish,abc\n</code></pre> Main.java<pre><code>import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        try{\n            BufferedReader br=new BufferedReader(new FileReader(\"input.csv\"));\n            UserBO user=new UserBO();\n            ArrayList&lt;User&gt; userData=user.readFromFile(br);\n            if(userData.isEmpty()){\n                System.out.println(\"The list is empty\");\n            }\n            else{\n                user.display(userData);\n            }\n        }\n        catch(Exception e){\n            System.out.println(\"File Not Found\");\n        }\n    }\n\n\n\n}\n</code></pre> User.java<pre><code>/**\n * User\n */\npublic class User {\n\n    private String name;\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n    private String email;\n    public String getEmail() {\n        return email;\n    }\n    public void setEmail(String email) {\n        this.email = email;\n    }\n    private String username;\n    public String getUsername() {\n        return username;\n    }\n    public void setUsername(String username) {\n        this.username = username;\n    }\n    private String password;\n\n    public String getPassword() {\n        return password;\n    }\n    public void setPassword(String password) {\n        this.password = password;\n    }\n    public User(){\n\n    }\n    public User(String name, String email, String username, String password){\n        this.name=name;\n        this.email=email;\n        this.username=username;\n        this.password=password;\n    }\n\n}\n</code></pre> UserBO.java<pre><code>import java.io.BufferedReader;\nimport java.util.ArrayList;\nimport java.util.Formatter;\n\npublic class UserBO {\n    public ArrayList&lt;User&gt; readFromFile (BufferedReader br){\n        ArrayList&lt;User&gt; user= new ArrayList&lt;User&gt;();\n        try{\n\n                    String row;\n                    while((row=br.readLine())!=null){\n                        String[] userData= row.split(\",\");\n                        user.add(new User(userData[0],userData[1],userData[2],userData[3]));\n                    }\n\n        }catch(Exception e){\n            System.out.println(\"Exception\");\n        }\n        return user;\n\n    }\n    public void display(ArrayList&lt;User&gt; list){\n        Formatter formatter=new Formatter();\n        formatter.format(\"%-15s %-20s %-15s %s\\n\",\"Name\",\"Email\",\"Username\",\"Password\");\n\n        for (int i = 0; i &lt; list.size(); i++) {\n            formatter.format(\"%-15s %-20s %-15s %s\\n\",list.get(i).getName(),list.get(i).getEmail(),list.get(i).getUsername(),list.get(i).getPassword());\n\n        }\n        System.out.print(formatter);\n    }\n}\n</code></pre></p>"},{"location":"Java/StreamsAndFiles/#2","title":"2","text":"<pre><code>File Writing\nThe file we write can be of several formats. But for now, we are just going to write a CSV text file, in which all the fields are separated by comma delimiter. Use FileWriter and BufferedWriter to write the data to a file.\n\nAs a first thing, we are gonna create a file that contains the record of all the users registered. So write a program that can write all the user details from the console into a file \"output.csv\".\n\nStrictly adhere to the Object-Oriented specifications given in the problem statement. All class names, attribute names and method names should be the same as specified in the problem statement.\n\nCreate a class User with the following attributes,\n\nAttribute   Data type\nname    String\nmobileNumber    String\nusername    String\npassword    String\n\nCreate a class UserBO with the following methods,\n\nMethod  Description\npublic static void writeFile(ArrayList&lt;User&gt; userList, BufferedWriter bw)   This method gets a list of the user as argument and\nwrites all the user details in the list into a file\n\nCreate a driver class Main and use the main method to get the details from the user.\n\nInput format:\nThe first line of input consists of an integer that corresponds to the number of users.\nThe next n line of input consists of user details in  the CSV format (name, mobileNumber, username, password)\nRefer to sample Input for other further details.\n\nOutput format:\nWrite the user details in the output.csv file.\nRefer to sample Output for other further details.\n\nSample Input:\n[All Texts in bold corresponds to the input and rest are output]\n\nEnter the number of users:\n3\nEnter the details of user :1\nJane,1234,jane,jane\nEnter the details of user :2\nJohn,5678,john,john\nEnter the details of user :3\nJill,1357,jill,jill\n\n\n\nSample Output: (output.csv)\n</code></pre> <p>output.csv<pre><code>Jane,1234,jane,jane\nJohn,5678,john,john\nJill,1357,jill,jill\n</code></pre> Main.java<pre><code>import java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        try{\n            Scanner input= new Scanner(System.in).useDelimiter(\"\\\\s*[,\\\\n]\\\\s*\");\n            FileWriter writer = new FileWriter(\"output.csv\");\n            BufferedWriter bw=new BufferedWriter(writer);\n\n            ArrayList&lt;User&gt; userData=new ArrayList&lt;User&gt;();\n            System.out.println(\"Enter the number of users:\");\n            int numberOfUsers=input.nextInt();\n            for (int index = 0; index &lt; numberOfUsers; index++) {\n                System.out.println(\"Enter the details of user :\"+(index+1));\n                userData.add(new User(input.next(),input.next(),input.next(),input.next()));\n            }\n            UserBO.writeFile(userData, bw);\n            input.close();\n        }\n        catch(Exception e){\n            System.out.println(\"File Not Found\");\n        }\n    }\n\n\n\n}\n</code></pre> User.java<pre><code>/**\n * User\n */\npublic class User {\n\n    private String name;\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n    private String email;\n    public String getEmail() {\n        return email;\n    }\n    public void setEmail(String email) {\n        this.email = email;\n    }\n    private String username;\n    public String getUsername() {\n        return username;\n    }\n    public void setUsername(String username) {\n        this.username = username;\n    }\n    private String password;\n\n    public String getPassword() {\n        return password;\n    }\n    public void setPassword(String password) {\n        this.password = password;\n    }\n    public User(){\n\n    }\n    public User(String name, String email, String username, String password){\n        this.name=name;\n        this.email=email;\n        this.username=username;\n        this.password=password;\n    }\n\n}\n</code></pre> UserBO.java<pre><code>import java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\n\n\npublic class UserBO {\n        public static void writeFile(ArrayList&lt;User&gt; userList, BufferedWriter bw){\n            try {\n            for (int i = 0; i &lt; userList.size(); i++) {\n                /* String data=userList.get(i).getName()+\",\"+userList.get(i).getEmail()+\",\"+userList.get(i).getUsername()+\",\"+userList.get(i).getPassword()+\"\\n\";\n                   */\n                bw.write(userList.get(i).getName());\n                    bw.write(\",\");\n                    bw.write(userList.get(i).getEmail());\n                    bw.write(\",\");\n                    bw.write(userList.get(i).getUsername());\n                    bw.write(\",\");\n                    bw.write(userList.get(i).getPassword());\n                    bw.write(\"\\n\");\n\n                   /* bw.write(data);*/\n\n\n\n            }\n\n                bw.close();\n        } catch (IOException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n\n        }\n}\n</code></pre></p>"},{"location":"Java/StreamsAndFiles/#3","title":"3","text":"<pre><code>Read and Write\nIn our application, we are gonna read the contents of a file and write it into another file with some conditions. There can be many events for the same organization or owner. But we want only one event for every owner available. So we are gonna read the event details from the file \"input.txt\" and then write the event details into \"output.txt\" but after removal of duplicate entries.\n\nStrictly adhere to the Object-Oriented specifications given in the problem statement. All class names, attribute names and method names should be the same as specified in the problem statement.\n\nCreate a class Event with the following private attributes\n\nAttributes  Datatype\neventName   String\nattendeesCount  Integer\nownerName   String\nInclude appropriate getters and setters\nCreate default constructor and a parameterized constructor with arguments in order Event(String eventName, Integer attendeesCount, String ownerName).\n\nCreate a class EventBO to access the above class. Include the following public methods.\n\nMethod  Description\npublic List&lt;Event&gt; readFromFile(BufferedReader br)  This method accepts the BufferedReader object as input and parses the data in the file to Event objects\nand then adds them to a list. Finally, it returns the list of Event objects.\nvoid writeFile(List&lt;Event&gt; eventList,FileWriter fr) This method takes event list and file writer as the arguments and writes into \"output.txt\" with\nthe removal of duplicate event details (i.e) an event having the same owner name.\n\n\nCreate a driver class named Main which reads data from console and to test the above class.\n\nInput:\nRead the contents[event details] from the file \"input.txt\".\n\nOutput:\nWrite the contents[event details] with the removal of duplicate events into the \"output.txt\".\n\nSample Input: (input.txt)\n\n\n\n\nSample Output: (output.txt)\n</code></pre> <p>input.txt<pre><code>Jill,1,jill\nJill,1,jill\n</code></pre> output.txt<pre><code>Jill,1,jill\n</code></pre> Main.java<pre><code>import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        try{\n            BufferedReader br=new BufferedReader(new FileReader(\"input.txt\"));\n            EventBO event=new EventBO();\n            ArrayList&lt;Event&gt; eventData=event.readFromFile(br);\n            if(eventData.isEmpty()){\n                System.out.println(\"The list is empty\");\n            }\n\n\n            FileWriter writer = new FileWriter(\"output.txt\");\n            event.writeFile(eventData,writer);\n        }\n        catch(Exception e){\n            System.out.println(\"File Not Found\");\n        }\n    }\n\n\n\n}\n</code></pre> Event.java<pre><code>public class Event {\n    private String eventName;\n    public String getEventName() {\n        return eventName;\n    }\n    public void setEventName(String eventName) {\n        this.eventName = eventName;\n    }\n    private Integer attendeesCount;\n    public Integer getAttendeesCount() {\n        return attendeesCount;\n    }\n    public void setAttendeesCount(Integer attendeesCount) {\n        this.attendeesCount = attendeesCount;\n    }\n    private String ownerName;\n    public String getOwnerName() {\n        return ownerName;\n    }\n    public void setOwnerName(String ownerName) {\n        this.ownerName = ownerName;\n    }\n    public Event(){\n\n    }\n    public Event(String eventName, Integer attendeesCount, String ownerName){\n        this.eventName=eventName;\n        this.attendeesCount=attendeesCount;\n        this.ownerName=ownerName;\n    }\n\n}\n</code></pre> EventBO.java<pre><code>import java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class EventBO {\n    public ArrayList&lt;Event&gt; readFromFile(BufferedReader br) {\n        ArrayList&lt;Event&gt; event = new ArrayList&lt;Event&gt;();\n        try {\n\n            String row;\n            while ((row = br.readLine()) != null) {\n                String[] userData = row.split(\",\");\n                event.add(new Event(userData[0], Integer.parseInt(userData[1]), userData[2]));\n            }\n\n        } catch (Exception e) {\n            System.out.println(\"Exception\");\n        }\n        return event;\n\n    }\n\n    public void writeFile(ArrayList&lt;Event&gt; eventList, FileWriter writer) {\n        try {\n            BufferedWriter bw = new BufferedWriter(writer);\n            Set&lt;String&gt; set = new HashSet&lt;&gt;();\n            for (int i = 0; i &lt; eventList.size(); i++) {\n                if (set.contains(eventList.get(i).getOwnerName())) {\n                    continue;\n                } else{\n                    set.add(eventList.get(i).getOwnerName());\n                    bw.write(eventList.get(i).getEventName());\n                    bw.write(\",\");\n                    bw.write(String.valueOf(eventList.get(i).getAttendeesCount()));\n                    bw.write(\",\");\n                    bw.write(eventList.get(i).getOwnerName());\n                    bw.write(\"\\n\");\n                }\n\n            }\n            /*for (int i = 0; i &lt; eventList.size(); i++) {\n\n                 * String\n                 * data=userList.get(i).getName()+\",\"+userList.get(i).getEmail()+\",\"+userList.\n                 * get(i).getUsername()+\",\"+userList.get(i).getPassword()+\"\\n\";\n\n                if (eventList.lastIndexOf(eventList.get(i).getOwnerName()) == i) {\n\n                }\n\n                // System.out.println(eventList.get(i).getAttendeesCount());\n                /* bw.write(data); \n            }*/\n\n            bw.close();\n        } catch (IOException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre></p>"},{"location":"Java/StreamsAndFiles/#iassess","title":"iAssess","text":"<pre><code>IO - Simple File Write\n\nWrite a Java program to record the airport details into the file. Get the airport details name, cityName and countryCode from the user and write that information in a comma-separated format in a file (CSV).\nBelow is the format of the output file.\n&lt;name&gt;,&lt;cityName&gt;,&lt;countryCode&gt;\neg: Cochin International Airport,Cochin,IN\nCreate a main class \"Main.java\"\n\nInput and Output Format:\nGet the airport details name, cityName and country code from the user.\nPrint the airport details in the output file airport.csv\nSample Input :\n[All text in bold corresponds to input and the rest corresponds to output]\nEnter the name of the airport\nCochin International Airport\nEnter the city name\nCochin\nEnter the country code\nIN\n\nSample Output:\n</code></pre> <p>airport.csv<pre><code>Cochin International Airport,Cochin,IN\n</code></pre> Main.java<pre><code>import java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input=new Scanner(System.in);\n        System.out.println(\"Enter the name of the airport\");\n        String nameOfAirport=input.next();\n        nameOfAirport+=input.nextLine();\n        System.out.println(\"Enter the city name\");\n        String cityName=input.next();\n        System.out.println(\"Enter the country code\");\n        String countryCode=input.next();\n        FileWriter file;\n        try {\n            file = new FileWriter(\"airport.csv\");\n            BufferedWriter bw=new BufferedWriter(file);\n            bw.write(nameOfAirport);\n            bw.write(\",\");\n            bw.write(cityName);\n            bw.write(\",\");\n            bw.write(countryCode);\n            bw.close();\n        } catch (IOException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n        input.close();\n\n\n\n\n    }   \n}\n</code></pre></p>"},{"location":"JavaScript/AJAX/","title":"AJAX","text":""},{"location":"JavaScript/AJAX/#idesign","title":"iDesign","text":"<pre><code>Ajax \u2013 JSON Retrieval and updating JSON data\n\nWrite a javascript code to display and update the Student details using JSON data.\n\nUI Constraints:\n\nThe file name should be index.html\nGet the details from the JSON data and display them in the table.\nRetrieve the table data from JSON during body onload and the function name should be display( ).\nHave a heading text 'Student Details' inside the 'h2' tag.\nThe JSON file name should be Students.json\nAfter providing inputs and clicking the Update button, the Student table data should be updated.\nKindly give the id\u2019s and class names as per the constraints and screenshot.\nUse XMLHttpRequest to make Ajax call.\nNote :\n\nThe content of the page should be present as shown in the screenshot.\nIf you are using createElement() in the table, then use createTextNode() instead of innerText.\nUse \u2018var\u2019 instead of \u2018let\u2019 in the variable declaration.\n\nSample Screenshot 1:\n\n\n\nSample Screenshot 2:\n\n\n\nSample Screenshot 3: (Provide the inputs to update)\n\n\n\nSample Screenshot 4: (After the Email for the first Student)\n</code></pre> <p>index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n\n    &lt;title&gt;Document&lt;/title&gt;\n    &lt;style&gt;\n      table,\n      th,\n      td {\n        border: 1px solid black;\n        border-collapse: collapse;\n        padding: 5px;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n\n  &lt;body onload=\"display()\"&gt;\n    &lt;center&gt;\n      &lt;div style=\"border: 1px solid; padding: 5px\" &gt;\n        &lt;h2&gt;Student Details&lt;/h2&gt;\n        &lt;table id=\"student-table\"&gt;\n\n        &lt;/table&gt;\n        &lt;br /&gt;\n        Student Id : &lt;input type=\"text\" id=\"id\" /&gt;&lt;br /&gt;&lt;br /&gt;\n        Field Type :\n        &lt;select name=\"field\" id=\"fieldType\"&gt;\n          &lt;option value=\"name\"&gt;Name&lt;/option&gt;\n          &lt;option value=\"DOB\"&gt;DOB&lt;/option&gt;\n          &lt;option value=\"mobileNumber\"&gt;Mobile Number&lt;/option&gt;\n          &lt;option value=\"email\"&gt;Email&lt;/option&gt;\n          &lt;option value=\"address\"&gt;Address&lt;/option&gt;\n          &lt;option value=\"DOJ\"&gt;DOJ&lt;/option&gt;\n          &lt;option value=\"department\"&gt;Department&lt;/option&gt;\n          &lt;option value=\"mark\"&gt;Mark&lt;/option&gt;&lt;/select\n        &gt;&lt;br /&gt;&lt;br /&gt;\n        Field Value : &lt;input type=\"text\" id=\"fieldValue\" /&gt;&lt;br /&gt;&lt;br /&gt;\n        &lt;button id=\"update\" onclick=\"update()\"&gt;UPDATE&lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/center&gt;\n    &lt;script&gt;\n      function display() {\n        var xhttp = new XMLHttpRequest();\n        xhttp.onreadystatechange = function () {\n          if (this.readyState == 4 &amp;&amp; this.status == 200) {\n            var students = JSON.parse(this.responseText);\n            var table = document.getElementById(\"student-table\");\n            var row = document.createElement(\"tr\");\n              var idCell = document.createElement(\"th\");\n              var nameCell = document.createElement(\"th\");\n              var dobCell = document.createElement(\"th\");\n              var mobileCell = document.createElement(\"th\");\n              var emailCell = document.createElement(\"th\");\n              var addressCell = document.createElement(\"th\");\n              var dojCell = document.createElement(\"th\");\n              var departmentCell = document.createElement(\"th\");\n              var markCell = document.createElement(\"th\");\n\n\n              idCell.appendChild(document.createTextNode(\"Id\"));\n              nameCell.appendChild(document.createTextNode(\"Name\"));\n              dobCell.appendChild(document.createTextNode(\"DOB\"));\n              mobileCell.appendChild(\n              document.createTextNode(\"Mobile Number\")\n            );\n            emailCell.appendChild(document.createTextNode(\"Email\"));\n            addressCell.appendChild(document.createTextNode(\"Address\"));\n            dojCell.appendChild(document.createTextNode(\"DOJ\"));\n            departmentCell.appendChild(document.createTextNode(\"Department\"));\n            markCell.appendChild(document.createTextNode(\"Mark\"));\n\n              row.appendChild(idCell);\n              row.appendChild(nameCell);\n              row.appendChild(dobCell);\n              row.appendChild(mobileCell);\n              row.appendChild(emailCell);\n              row.appendChild(addressCell);\n              row.appendChild(dojCell);\n              row.appendChild(departmentCell);\n              row.appendChild(markCell);\n              table.appendChild(row);\n\n            for (let i = 0; i &lt; students.length; i++) {\n              var row = document.createElement(\"tr\");\n              var idCell = document.createElement(\"td\");\n              var nameCell = document.createElement(\"td\");\n              var dobCell = document.createElement(\"td\");\n              var mobileCell = document.createElement(\"td\");\n              var emailCell = document.createElement(\"td\");\n              var addressCell = document.createElement(\"td\");\n              var dojCell = document.createElement(\"td\");\n              var departmentCell = document.createElement(\"td\");\n              var markCell = document.createElement(\"td\");\n\n              idCell.appendChild(document.createTextNode(students[i].id));\n              nameCell.appendChild(document.createTextNode(students[i].name));\n              dobCell.appendChild(document.createTextNode(students[i].DOB));\n              mobileCell.appendChild(\n                document.createTextNode(students[i].mobileNumber)\n              );\n              emailCell.appendChild(document.createTextNode(students[i].email));\n              addressCell.appendChild(\n                document.createTextNode(students[i].address)\n              );\n              dojCell.appendChild(document.createTextNode(students[i].DOJ));\n              departmentCell.appendChild(\n                document.createTextNode(students[i].department)\n              );\n              markCell.appendChild(document.createTextNode(students[i].mark));\n\n              row.appendChild(idCell);\n              row.appendChild(nameCell);\n              row.appendChild(dobCell);\n              row.appendChild(mobileCell);\n              row.appendChild(emailCell);\n              row.appendChild(addressCell);\n              row.appendChild(dojCell);\n              row.appendChild(departmentCell);\n              row.appendChild(markCell);\n\n              table.appendChild(row);\n            }\n          }\n        };\n        xhttp.open(\"GET\", \"Students.json\", true);\n        xhttp.send();\n      }\n\n      function update() {\n        let id = document.getElementById(\"id\").value;\n        let fieldType = document.getElementById(\"fieldType\").value;\n        let fieldValue = document.getElementById(\"fieldValue\").value;\n        var table = document.getElementById(\"student-table\");\n        //var row = table.rows[id];\n        var row = table.rows[id];\n\n        let cellIndex = 0;\n\n        console.log(fieldType);\n        console.log(row);\n\n        if (fieldType == \"name\") {\n          cellIndex = 1;\n        } else if (fieldType == \"dob\") {\n          cellIndex = 2;\n        } else if (fieldType == \"mobileNumber\") {\n          cellIndex = 3;\n        } else if (fieldType == \"email\") {\n          cellIndex = 4;\n        } else if (fieldType == \"address\") {\n          cellIndex = 5;\n        } else if (fieldType == \"doj\") {\n          cellIndex = 6;\n        } else if (fieldType == \"department\") {\n          cellIndex = 7;\n        } else {\n          cellIndex = 8;\n        }\n\n\n          var cell = row.cells[cellIndex];\n          cell.innerHTML = fieldValue;\n          //console.log(cell);\n\n      }\n\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> Students.json<pre><code>[\n    {\n    \"id\":\"1\",\n    \"name\":\"John\",\n    \"DOB\":\"09-15-1998\",\n    \"mobileNumber\":\"9967543421\",\n    \"email\":\"john@email.com\",\n    \"address\":\"Chennai\",\n    \"DOJ\" : \"06-01-2016\",\n    \"department\" : \"CSE\",\n    \"mark\" : \"100\"\n    },\n    {\n    \"id\":\"2\",\n    \"name\":\"Liya\",\n    \"DOB\":\"12-15-1997\",\n    \"mobileNumber\":\"8978321211\",\n    \"email\":\"liya@email.com\",\n    \"address\":\"Coimbatore\",\n    \"DOJ\" : \"06-01-2016\",\n    \"department\" : \"ECE\",\n    \"mark\" : \"78\"\n    },\n    {\n    \"id\":\"3\",\n    \"name\":\"Rio\",\n    \"DOB\":\"10-20-1998\",\n    \"mobileNumber\":\"9078342122\",\n    \"email\":\"rio@email.com\",\n    \"address\":\"Madurai\",\n    \"DOJ\" : \"06-20-2016\",\n    \"department\" : \"CSE\",\n    \"mark\" : \"90\"\n    },\n    {\n    \"id\":\"4\",\n    \"name\":\"Priya\",\n    \"DOB\":\"01-01-1998\",\n    \"mobileNumber\":\"9965348304\",\n    \"email\":\"priya@email.com\",\n    \"address\":\"Coimbatore\",\n    \"DOJ\" : \"06-20-2016\",\n    \"department\" : \"CIVIL\",\n    \"mark\" : \"95\"\n    },\n    {\n    \"id\":\"5\",\n    \"name\":\"Amy\",\n    \"DOB\":\"11-23-1997\",\n    \"mobileNumber\":\"9880153455\",\n    \"email\":\"amy@email.com\",\n    \"address\":\"Chennai\",\n    \"DOJ\" : \"07-01-2016\",\n    \"department\" : \"CSE\",\n    \"mark\" : \"50\"\n    }\n    ]\n</code></pre></p>"},{"location":"JavaScript/AJAX/#iassess","title":"iAssess","text":"<pre><code>Ajax \u2013 JSON Retrieval and JSON Conversion\n\nDesign a webpage that will get the JSON details from a file and display it in a table. Then, display the Input fields to convert the particular booklist into a JSON format.\n\nProblem specification:\n\nThe file name should be index.html.\nGet the details from the JSON data and display them in the table.\nThen displays the table data in the object notation format.\nUI Constraints :\nRetrieve the table data from JSON during body onload and the function name should be loadJson( ).\nHave a heading text 'Book List' inside the 'h1' tag.\nThe JSON file name should be booklist.json\nHave a div tag with id \u201cbooklist\u201d. And display the result table inside the div with id 'booklist'.\nParse the JSON elements and display them in tabular form as shown in the screenshot.\nHave a button with id \u201cconvertToJSON\u201d . While on clicking, the JSON format of entered book details should be displayed inside the div tag with id \u2018jsonData\u2019.\nKindly give the id\u2019s and class names as per the constraints and screenshot.\nUse XMLHttpRequest to make Ajax call.\nNote :\n\nThe content of the page should be present as shown in the screenshot.\nIf you are using createElement() in the table, then use createTextNode() instead of innerText.\nUse \u2018var\u2019 instead of \u2018let\u2019 in the variable declaration.\n\nSample Screenshot 1:\n\n\n\nSample Screenshot 2 :\n</code></pre> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"style.css\" /&gt;\n  &lt;/head&gt;\n  &lt;body onload=\"loadJson()\"&gt;\n    &lt;center&gt;\n      &lt;h1&gt;Book List&lt;/h1&gt;\n      &lt;div id=\"booklist\"&gt;\n        &lt;table id=\"listTable\"&gt;\n            &lt;tbody&gt;\n                &lt;tr&gt;\n                    &lt;th&gt;Book Name&lt;/th&gt;\n                    &lt;th&gt;Author Name&lt;/th&gt;\n                    &lt;th&gt;Price&lt;/th&gt;\n\n                &lt;/tr&gt;\n            &lt;/tbody&gt;\n        &lt;/table&gt;\n      &lt;/div&gt;\n      &lt;div class=\"formData\"&gt;\n        Book Name :&lt;input type=\"text\" id=\"name\" /&gt;&lt;br /&gt;&lt;br /&gt;\n\n        &lt;div class=\"fields\"&gt;\n          Author name :&lt;input type=\"text\" id=\"price\" /&gt;&lt;br /&gt;&lt;br /&gt;\n        &lt;/div&gt;\n        Book Price :&lt;input type=\"text\" id=\"availableQuantity\" /&gt;&lt;br /&gt;&lt;br /&gt;\n      &lt;/div&gt;\n      &lt;button id=\"convertToJSON\" onclick=\"tojson()\"&gt;Convert To JSON&lt;/button&gt;\n      &lt;div id=\"jsonData\"&gt;&lt;/div&gt;\n    &lt;/center&gt;\n  &lt;/body&gt;\n  &lt;script&gt;\n    function loadJson() {\n      const xhr = new XMLHttpRequest();\n      xhr.open(\"GET\", \"booklist.json\", true);\n      xhr.onreadystatechange = function () {\n        if (this.readyState == 4 &amp;&amp; this.status == 200) {\n          var object = JSON.parse(this.responseText);\n          var div = document.getElementById(\"booklist\");\n          var table= document.getElementById(\"listTable\")\n          var tbody=table.getElementsByTagName(\"tbody\")[0];\n\n          for (let index = 0; index &lt; object.length; index++) {\n            const element = object[index];\n            var row = document.createElement(\"tr\");\n            var bookCell = document.createElement(\"td\");\n            var authorCell = document.createElement(\"td\");\n            var priceCell = document.createElement(\"td\");\n\n            bookCell.appendChild(document.createTextNode(element.bookname));\n            authorCell.appendChild(document.createTextNode(element.authorname));\n            priceCell.appendChild(document.createTextNode(element.price));\n\n            row.appendChild(bookCell);\n            row.appendChild(authorCell);\n            row.appendChild(priceCell);\n            tbody.appendChild(row);\n          }\n        }\n      };\n      xhr.send();\n    }\n    function tojson() {\n      var json = document.getElementById(\"jsonData\");\n      const xhr = new XMLHttpRequest();\n      xhr.open(\"GET\", \"booklist.json\", true);\n      xhr.onreadystatechange = function () {\n        if (this.readyState == 4 &amp;&amp; this.status == 200) {\n            var name=document.getElementById(\"name\").value;\n            var author=document.getElementById(\"price\").value;\n            var price=document.getElementById(\"availableQuantity\").value;\n\n          var object = JSON.parse(this.responseText);\n          var jsonObject={}\n          for (let index = 0; index &lt;object.length; index++) {\n            const element = object[index];\n            if(element.bookname==name){\n                jsonObject.bookname=name;\n            }\n            if(element.authorname==author){\n                jsonObject.authorname=author;\n            }\n            if(element.price==price){\n                jsonObject.price=price;\n            }\n          }\n          json.innerHTML=JSON.stringify(jsonObject);\n        }\n      };\n      xhr.send();\n    }\n  &lt;/script&gt;\n&lt;/html&gt;\n</code></pre> <p>```css tiitle=\"style.css\" h1 {     text-align: center;     padding-top: 50px;   }</p> <p>.btn {     text-align: center;   }</p> <p>#booklist {     display: flex;     justify-content: center;   }</p> <p>table {     border: 1px solid black;     margin: 15px;     border-collapse: collapse;   }</p> <p>tr:first-child {     background-color: lightblue;   }</p> <p>tr:nth-child(even) {     background-color: #f2f2f2;   }</p> <p>th {     border-bottom: 1px solid black;     text-align: left;     padding: 15px !important;   }</p> <p>td {     padding: 15px;   }</p> <p>#getBooklist {     padding: 10px;   }</p> <p>.formData {     text-align: center;   }</p> <p>.fields {     padding: 15px;   }</p> <p>#convertToJSON {     margin-top: 15px;     padding: 10px;     border: 1px solid black;     border-radius: 5px;     background-color: lightblue;   }</p> <p>#jsonData {     margin-top: 15px;   }</p> <p>input {       border-radius: 5px;       padding: 7px;       border: 1px solid gray;   } <pre><code>```json title=\"booklist.json\"\n[\n    {\n    \"bookname\":\"Farm House\",\n    \"authorname\":\"George Orwell\",\n    \"price\":\"$10\"\n    },\n    {\n    \"bookname\":\"Good Times, Bad Times\",\n    \"authorname\":\"Harold Evans\",\n    \"price\":\"$20\"\n    },\n    {\n    \"bookname\":\"A Journey\",\n    \"authorname\":\"Tony Blair\",\n    \"price\":\"$50\"\n    },\n    {\n    \"bookname\":\"The Jungle Book\",\n    \"authorname\":\"Rudyard Kipling\",\n    \"price\":\"$30\"\n    },\n    {\n    \"bookname\":\"Oliver Twist\",\n    \"authorname\":\"Charles Dickens\",\n    \"price\":\"$40\"\n    }\n    ]\n</code></pre></p>"},{"location":"JavaScript/Assessment/","title":"Assessment","text":""},{"location":"JavaScript/Assessment/#simple-billing-app","title":"Simple Billing App","text":"<p>index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Event Management&lt;/title&gt;\n    &lt;script src=\"script.js\"&gt;&lt;/script&gt;\n    ;\n    &lt;/head&gt;\n    &lt;body&gt;\n\n    &lt;!---Fill Code Here--&gt;\n    &lt;center&gt;\n        &lt;div id=\"eventForm\"&gt;\n            &lt;table&gt;\n\n                &lt;thead&gt;&lt;h2&gt;Event Management&lt;/h2&gt;&lt;/thead&gt;\n                &lt;tr&gt;\n                &lt;td&gt;Event Name&lt;/td&gt;&lt;td&gt; &lt;input type=\"text\" name=\"name\" id=\"name\"&gt;&lt;br&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Venue &lt;/td&gt;&lt;td&gt; &lt;input type=\"text\" name=\"venue\" id=\"venue\"&gt;&lt;br&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Date  &lt;/td&gt;&lt;td&gt;&lt;input type=\"text\" name=\"date\" id=\"date\" placeholder=\"dd/mm/yyy\"&gt;&lt;br&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Cost/day &lt;/td&gt;&lt;td&gt; &lt;input type=\"number\" name=\"price\" id=\"price\"&gt;&lt;br&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Number of Days Needed &lt;/td&gt;&lt;td&gt; &lt;input type=\"number\" name=\"count\" id=\"count\"&gt;&lt;br&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n\n                &lt;tr&gt;\n                    &lt;td&gt;&lt;/td&gt;\n                    &lt;td&gt;\n                        &lt;button type=\"submit\" id=\"addEvent\" onclick=\"addEvent()\"&gt;Add Event&lt;/button&gt;&lt;br&gt;\n\n                    &lt;/td&gt;\n\n                &lt;/tr&gt;\n            &lt;/table&gt;\n        &lt;/div&gt;\n        &lt;div id=\"result\"&gt;       \n\n            &lt;table border=1 id=\"resultTable\"&gt;\n\n                &lt;tbody&gt;\n\n                &lt;/tbody&gt;\n            &lt;/table&gt;        \n        &lt;/div&gt;\n\n    &lt;/center&gt;\n\n\n\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> script.js<pre><code>const events = [];\nfunction addEvent() {\n    var table = document.getElementById(\"resultTable\");\n    table.innerHTML='';\n  var name = document.getElementById(\"name\").value;\n  var venue = document.getElementById(\"venue\").value;\n  var date = document.getElementById(\"date\").value;\n  var price = document.getElementById(\"price\").value;\n  var count = document.getElementById(\"count\").value;\n  var dateParts = date.split(\"/\");\n  date = dateParts[2] + \"-\" + dateParts[1] + \"-\" + dateParts[0];\n  var totalCost = parseInt(count, 10) * parseInt(price, 10);\n\n  events.push({\n    name: name,\n    venue: venue,\n    date: date,\n    totalCost: totalCost,\n  });\n\n  display();\n}\nfunction display() {\n  var result = document.getElementById(\"result\");\n  //result.style.display = \"inline\";\n  if (events.length &gt; 0) {\n\n    var table = document.getElementById(\"resultTable\");\n\n\n    for (var index =0; index &lt; events.length; index++) {\n        if(index==0){\n            var row = document.createElement(\"tr\");\n            var nameCell = document.createElement(\"th\");\n            var venueCell = document.createElement(\"th\");\n            var dateCell = document.createElement(\"th\");\n            var totalCostCell = document.createElement(\"th\");\n            var cancelCell = document.createElement(\"th\");\n\n            nameCell.appendChild(document.createTextNode(\"Event Name\"));\n            venueCell.appendChild(document.createTextNode(\"Venue\"));\n            dateCell.appendChild(document.createTextNode(\"Date\"));\n            totalCostCell.appendChild(document.createTextNode(\"Total Cost\"));\n            cancelCell.appendChild(document.createTextNode(\"Cancel Event\"));\n\n            row.appendChild(nameCell);\n            row.appendChild(venueCell);\n            row.appendChild(dateCell);\n            row.appendChild(totalCostCell);\n            row.appendChild(cancelCell);\n            table.appendChild(row);\n\n\n\n        }\n      var element = events[index];\n      var row = document.createElement(\"tr\");\n      var nameCell = document.createElement(\"td\");\n      var venueCell = document.createElement(\"td\");\n      var dateCell = document.createElement(\"td\");\n      var totalCostCell = document.createElement(\"td\");\n      var cancelCell = document.createElement(\"td\");\n\n      nameCell.appendChild(document.createTextNode(element.name));\n      venueCell.appendChild(document.createTextNode(element.venue));\n      dateCell.appendChild(document.createTextNode(element.date));\n      totalCostCell.appendChild(document.createTextNode(element.totalCost));\n      var a = document.createElement(\"a\");\n      var i = index.toString();\n      a.setAttribute(\"id\", \"link\" + i);\n      a.setAttribute(\"href\", \"#\");\n      a.setAttribute(\"onclick\", \"deleteElement(\" + i + \")\");\n      a.innerHTML = \"Cancel\";\n      cancelCell.appendChild(a);\n\n      row.appendChild(nameCell);\n      row.appendChild(venueCell);\n      row.appendChild(dateCell);\n      row.appendChild(totalCostCell);\n      row.appendChild(cancelCell);\n      table.appendChild(row);\n    }\n  } else {\n    //result.style.display = \"inline\";\n    result.innerHTML = \"No Events available\";\n  }\n}\nfunction deleteElement(i) {\n\n  events.splice(i, 1);\n  var table = document.getElementById(\"resultTable\");\n    table.innerHTML='';\n  display();\n}\n</code></pre></p>"},{"location":"JavaScript/Assessment/#student-details-search","title":"Student Details Search","text":"index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"UTF-8\"&gt;\n        &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n        &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n        &lt;link  rel=\"stylesheet\"href=\"style.css\"&gt;\n        &lt;title&gt;Student Details&lt;/title&gt;\n    &lt;/head&gt;\n&lt;body&gt;      \n\n&lt;h3&gt;Student Details Search&lt;/h3&gt;\n&lt;input type=\"text\" id=\"studentname\" placeholder=\"Enter Student Name\"&gt;\n&lt;button id=\"search\" onclick=\"display()\"&gt;Search&lt;/button&gt;\n&lt;div id=\"result\"&gt;&lt;/div&gt;\n&lt;!-- Fill your code --&gt;\n\n&lt;script&gt;\n\n\n    // Fill your code\n    function display() {\n        var xhttp = new XMLHttpRequest();\n        xhttp.onreadystatechange = function () {\n          if (this.readyState == 4 &amp;&amp; this.status == 200) {\n            var students = JSON.parse(this.responseText);\n            var div = document.getElementById(\"result\");\n\n\n            for (let i = 0; i &lt; students.length; i++) {\n                if(students[i].name ==(document.getElementById(\"studentname\").value)){\n                var nameCell = document.createElement(\"ul\");\n              var cgpaCell = document.createElement(\"ul\");\n              var ageCell = document.createElement(\"ul\");\n              var departmentCell = document.createElement(\"ul\");\n              var batchCell = document.createElement(\"ul\");\n\n              nameCell.appendChild(document.createTextNode(\"Name :\" +students[i].name));\n              cgpaCell.appendChild(document.createTextNode(\"CGPA :\" +students[i].cgpa));\n              ageCell.appendChild(document.createTextNode(\"Age :\" +students[i].age));\n              departmentCell.appendChild(document.createTextNode(\"Department :\" +students[i].department));\n              batchCell.appendChild(document.createTextNode(\"Batch :\" +students[i].batch));\n\n              div.appendChild(nameCell);\n              div.appendChild(cgpaCell);\n              div.appendChild(ageCell);\n              div.appendChild(departmentCell);\n              div.appendChild(batchCell);\n                }\n\n\n            }\n          }\n        };\n        xhttp.open(\"GET\", \"StudentDetails.json\", true);\n        xhttp.send();\n      }\n\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>StudentDetails.json<pre><code>[\n    {\n    \"name\": \"Jhon\",\n    \"cgpa\":\"6.7\",\n    \"age\": 20,\n    \"department\": \"CSE\",\n    \"batch\":\"2022\"\n    },\n\n    {\n    \"name\": \"Smith\",\n    \"cgpa\":\"7.7\",\n    \"age\": 21,\n    \"department\": \"EEE\",\n    \"batch\":\"2021\"\n    },\n\n    {\n    \"name\": \"Alex\",\n    \"cgpa\":\"8.7\",\n    \"age\": 22,\n    \"department\": \"MECH\",\n    \"batch\":\"2020\"\n    },\n\n    {\n    \"name\": \"Jack\",\n    \"cgpa\":\"10.7\",\n    \"age\": 24,\n    \"department\": \"ECE\",\n    \"batch\":\"2018\"\n    },\n\n    {\n    \"name\": \"James\",\n    \"cgpa\":\"9.7\",\n    \"age\": 23,\n    \"department\": \"CIVIL\",  \n    \"batch\":\"2019\"\n    },\n\n    {\n    \"name\": \"Tom\",\n    \"cgpa\":\"7.6\",\n    \"age\": 25,\n    \"department\": \"CSE\",\n    \"batch\":\"2017\"\n    },\n\n    {\n    \"name\": \"Harry\",\n    \"cgpa\":\"8.6\",\n    \"age\": 26,\n    \"department\": \"EEE\",\n    \"batch\":\"2016\"\n    },\n\n    {\n    \"name\": \"Ron\",\n    \"cgpa\":\"9.6\",\n    \"age\": 27,\n    \"department\": \"MECH\",\n    \"batch\":\"2015\"\n    },\n\n    {\n    \"name\": \"Hermione\",\n    \"cgpa\":\"10.6\",\n    \"age\": 28,\n    \"department\": \"ECE\",\n    \"batch\":\"2014\"\n    },\n\n    {\n    \"name\": \"Draco\",\n    \"cgpa\":\"9.5\",\n    \"age\": 29,\n    \"department\": \"CIVIL\",  \n    \"batch\":\"2013\"\n    },\n\n    {\n    \"name\": \"Voldemort\",\n    \"cgpa\":\"8.5\",\n    \"age\": 30,\n    \"department\": \"CSE\",\n    \"batch\":\"2012\"\n    }   \n]\n</code></pre> style.css<pre><code>body{\n    font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n    font-size: 20px;\n    line-height: 1.5;\n    margin: 0;\n    padding: 0;\n    text-align: center;\n}\n#result{\n    text-align: left;\n    margin: 0 auto;\n    margin-top: 30px;\n    width: 25%;\n    border-radius: 10px;\n\n}\n#studentname{\n    font-weight: bold;\n    margin-bottom: 10px;\n    padding: auto;\n    width: 200px;\n    height: 20px;\n    border-radius: 5px;\n    border: 2px solid rgb(215, 211, 211);\n\n}\nul{\n    list-style-type: none;\n    margin-bottom: 10px;\n    margin-left: 30px;\n    text-align: left;\n}\nh3{\n    margin-bottom: 20px;\n    font-size: 25px;\n}\n</code></pre></p>"},{"location":"JavaScript/HTML-DOM/","title":"HTML-DOM","text":""},{"location":"JavaScript/HTML-DOM/#idesign","title":"iDesign","text":""},{"location":"JavaScript/HTML-DOM/#1","title":"1","text":"<pre><code>Changing property using Javascript\n\n\n\nDesign an HTML page as shown in the screenshot and apply the style using the Javascript function.\n\nProperty marginTop\nSet the top margin of a &lt;div&gt; element.\nSyntax :\ndocument.getElementById(\"myDiv\").style.marginTop = \"50px\"; \nProperty border\nAdd a border to a &lt;div&gt; element.\nSyntax :\ndocument.getElementById(\"myDiv\").style.border= \"1px solid\";\n\nSample Screenshot :\n\n\n\nConstraints:\n\nThe outer div should have a border and the inner div should have margin-top property\n\n\n\nAdditional Constraints :\n\nThe file name shall be index.html.\nHave two div's, one inside the other.\nThe outer div shall have id \"outerDiv\" and apply border property in the script.\nThe inner div shall have id \"innerDiv\" and apply marginTop property in the script.\nChange the properties inside the apply() function.\nLoad the function apply() on body onload attribute.\n\nNote :\n\nContent of the page should be present as shown in the screenshot.\n\nContent :\n\nA wedding planner is a professional who assists with the design, planning and management of a client's wedding. Weddings are significant events in people's lives and as such, couples are often willing to spend considerable amount of money to ensure that their weddings are well-organized. Wedding planners are often used by couples who work long hours and have little spare time available for sourcing and managing wedding venues and wedding suppliers.\n\nTemplate Code :\n\nClick here to download the template code.\n</code></pre> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body onload=\"apply()\"&gt;\n    &lt;div id=\"outerDiv\"&gt;\n        &lt;div id=\"innerDiv\"&gt;\n            &lt;p&gt;\nA wedding planner is a professional who assists with the design, planning and management of a client's wedding. Weddings are significant events in people's lives and as such, couples are often willing to spend considerable amount of money to ensure that their weddings are well-organized. Wedding planners are often used by couples who work long hours and have little spare time available for sourcing and managing wedding venues and wedding suppliers.\n\n            &lt;/p&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;script&gt;\n        function apply(){\n            document.getElementById(\"outerDiv\").style.border= \"1px solid\"; \n        document.getElementById(\"innerDiv\").style.marginTop = \"100px\"; \n        }\n\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"JavaScript/HTML-DOM/#2","title":"2","text":"<pre><code>JS - Credit card validation\n\n\nDesign an HTML page to perform phone number and credit card validation using javascript as shown in the screenshot.\n\nSample Screenshot 1:\n\n\n\nSample Screenshot 2 :\n\nIf the phone number contains anything other than digits it must print 'Phone number must contain only digits' in the div with id 'phoneNumber_Warning'.\n\n\n\nSample Screenshot 3 :\n\nIf the card number contains other than digits it must print 'Card number must contain only digits' in the div with id 'cardNumber_Warning'.\n\n\n\nSample Screenshot 4 :\n\n\n\nSample Screenshot 5 :\n\nIf the Phone number does not contain 10 digits it must print 'Phone Number must be 10 digits' in the div with id 'phoneNumber_Warning'.\n\n\n\nSample Screenshot 6 :\n\nIf the card number does not contain 16 digits it must print 'Card Number must be 16 digits' in the div with id 'cardNumber_Warning'.\n\n\n\nSample Screenshot 7 :\n\nIf both phone and card numbers are validated, then print 'Details stored in database' in the div with id 'success'\n\n\n\nNote :\n\nContent of the page should be present as shown in the screenshot.\n\nTemplate Code :\n\nClick here to download the template code.\n</code></pre> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"form-data\"&gt;\n        &lt;h3&gt;Phone Number &amp; Card Validation&lt;/h3&gt;\n        &lt;form action=\"\" id=\"form-validation\" &gt;\n            &lt;div id=\"PhoneNumber_Warning\" style=\"-webkit-text-fill-color: red;\"&gt;&lt;/div&gt;\n            &lt;label for=\"phone-number\"&gt;Enter your Phone Number :&lt;/label&gt;\n            &lt;input type=\"text\" id=\"phone-number\" name=\"phone-number\" onkeydown=\"checkPhone()\" required&gt;\n\n            &lt;br&gt;\n            &lt;label for=\"card-number\"&gt;Enter your Card Number :&lt;/label&gt;\n            &lt;input type=\"text\" id=\"card-number\" name=\"card-number\" onkeydown=\"checkCard()\" required&gt;\n            &lt;div id=\"CardNumber_Warning\" style=\"-webkit-text-fill-color: red;\"&gt;&lt;/div&gt;\n            &lt;br&gt;\n            &lt;button type=\"submit\" id=\"validate\"&gt;Validate&lt;/button&gt;\n            &lt;br&gt;\n            &lt;div id=\"success\" style=\"-webkit-text-fill-color: green;\"&gt;&lt;/div&gt;\n\n        &lt;/form&gt;\n    &lt;/div&gt;\n    &lt;script&gt;\n        document.getElementById(\"form-data\").style.border=\"1px solid\"\n        function checkPhone(){\n            const phone=/^\\d*$/;\n            const phoneData=document.getElementById(\"phone-number\").value;\n            if(!phone.test(phoneData)){\n                document.getElementById(\"PhoneNumber_Warning\").innerHTML=\"Phone number must contains only digits\"\n            }\n        }\n        function checkCard(){\n            const card=/^\\d*$/;\n            const cardData=document.getElementById(\"card-number\").value;\n            if(!card.test(cardData)){\n                document.getElementById(\"CardNumber_Warning\").innerHTML=\"Card number must contains only digits\"\n            }\n        }\n        function validate(event){\n            event.preventDefault();\n            const phoneNumber= document.getElementById(\"phone-number\").value;\n            const cardNumber= document.getElementById(\"card-number\").value;\n            flag=true;\n\n            //const phoneNumberRegex=/^\\d{10}$/\n            if (phoneNumber.length!=10) {\n                document.getElementById(\"PhoneNumber_Warning\").innerHTML=\"Phone Number must be 10 digits\";\n\n                    flag=false;\n            }\n            //const cardNumberRegex=/^\\d{16}$/\n            if (cardNumber.length!=16) {\n                document.getElementById(\"CardNumber_Warning\").innerHTML=\"Card Number must be 16 digits\";\n               flag=false\n            }\n            if(flag){\n                document.getElementById(\"success\").innerHTML=\"Details stored in database\"\n            }\n\n\n\n        }\n        const form =document.getElementById(\"form-validation\")\n        form.addEventListener(\"submit\",validate)\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"JavaScript/HTML-DOM/#3","title":"3","text":"<pre><code>`JS - Oninput Event\n\"Eventious\" is one of the most popular online application being used by the people of all age groups as it would include knowledgeable games. They have planned to launch a new game that would display the content simultaneously when the user types the values in the specific field. This game would estimate the speed of the contents being typed in the content box.\n\nAs the developers of Eventious are busy in playing support roles for the existing games, the technnical team has assigned you the task of creating the web-app for repeating the contents in the text area using oninput events in javascript.\nHints : The oninput event occurs when an element gets user input.\nThis event occurs when the value of an `&lt;input&gt; or &lt;textarea&gt;` element is changed.Syntax :`&lt;element oninput=\"myScript\"&gt;`\n\nContent :\nh3 - Oninput Event\nHave one `&lt;div&gt;` element with id 'result'\nHave a `&lt;textarea&gt; `field with id 'myContent' and oninput attribute value 'displayContent()'\nDisplay the whole content inside the `&lt;center&gt;` tag.\nInclude the following functions/methods in the script.\nFunction Name   Description\ndisplayContent()    This method is used to display the content of textarea in the resulting `&lt;div&gt; `element while the user types and clears the content.\n\nConstraints:\nFile name should be 'index.html'.\nEnter the content in the textarea with id 'myContent'.\nThe content of textarea must be displayed inside the div element with id 'result' while the user types and clears the content.\n\nNote :\nContent of the page should be present as shown in the screenshot.\nKindly refer the content which is given as a part of description.\n\nSample Screenshot 1 :\n\n\n\nSample Screenshot 2 :\nOn entering the contents in textarea , it should be displayed in the result div as mentioned below,\n\n\n\nSample Screenshot 3 :\n\n\n\nSample Screenshot 4 :\nOn clearing the content in textarea , the change should be reflected in the result div.`\n</code></pre> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div style=\"border: 1px solid;\"&gt;\n        &lt;center&gt;\n        &lt;h3&gt;Oninput Event&lt;/h3&gt;\n        &lt;br&gt;\n        &lt;textarea name=\"myContent\" id=\"myContent\" cols=\"30\" rows=\"10\" oninput=\"displayContent()\"&gt;&lt;/textarea&gt;\n        &lt;div id=\"result\"&gt;&lt;/div&gt;\n        &lt;/center&gt;\n\n\n    &lt;/div&gt;\n    &lt;script&gt;\n        function displayContent(){\n            var x = document.getElementById(\"myContent\").value;\n            document.getElementById(\"result\").innerHTML=\"Typed text is : \"+x;\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"JavaScript/HTML-DOM/#iassess","title":"iAssess","text":""},{"location":"JavaScript/HTML-DOM/#1_1","title":"1","text":"<pre><code>JS - Grade\nMaple Educational Institutions has conducted an Entrance Examination to select prospective students for admissions of the upcoming academic year. The students who have cleared the entrance exam with 50% and above i.e more than 'E' grade are considered for the post-admission process, where other students have to re-appear for the examinations.\n\n\nThe Institution Management decided to announce the exam results with the grade obtained by each of the students on their official website and has approached you for help.  Create a webpage which will get the marks as input from the students and display the grade obtained by them.\nHints : if/else statementUse if to specify a block of code to be executed, if a specified condition is true. \nUse else to specify a block of code to be executed, if the same condition is false. Syntax :    \nif (condition) {\n// if the condition is true block of code to be executed \n} else {\n// if fails else part gets executed\n}\n\nConstraints :\nThe Html page must contain a h1 tag.\nThe name and id of the text field should be \"mark\".\nThe name of the button should be \"submit\".\nonclick attribute should have the value \"myFunction()\".\nGrade sheet is as mentioned below.\nS.No    Marks   Grade\n1   100 A+\n2   90 - 99 A\n3   80 - 89 B\n4   70 - 79 C\n5   60 - 69 D\n6   50 - 59 E\n7   below 50    RA\n\nThe grade of the student must be displayed inside the div element with id \"result\".\n\nNote :\nContent of the page should be present as shown in the screenshot.\nKindly refer the content which is given as a part of description.\n\nSample Screenshot 1 :\n\n\n\nSample Screenshot 2 :\n\n\n\nSample Screenshot 3 :\n\n\n\n\nSample Screenshot 4 :\n\n\n\nSample Screenshot 5 :\n\n\n\nSample Screenshot 6 :\n\n\n\nSample Screenshot 7 :\n\n\n\nSample Screenshot 8 :\n</code></pre> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div style=\"border: 1px solid;\"&gt;\n        &lt;center&gt;\n            &lt;h1&gt;Grade Sheet&lt;/h1&gt;\n            &lt;br&gt;\n            Marks &lt;input type=\"text\" name=\"mark\" id=\"mark\"&gt;\n            &lt;br&gt;\n            &lt;button type=\"button\" name=\"submit\" onclick=\"myFunction()\"&gt;Submit&lt;/button&gt;\n            &lt;div id=\"result\"&gt;&lt;/div&gt;\n        &lt;/center&gt;\n    &lt;/div&gt;\n    &lt;script&gt;\n        function myFunction(){\n            const marks=document.getElementById(\"mark\").value;\n            if (marks==100) {\n                document.getElementById(\"result\").style.color=\"green\";\n                document.getElementById(\"result\").innerHTML=\"Grade obtained by the student is : A+\"\n            }\n            else{\n                if(marks&lt;100&amp;&amp;marks&gt;=90){\n                document.getElementById(\"result\").style.color=\"green\";\n                document.getElementById(\"result\").innerHTML=\"Grade obtained by the student is : A\"\n            }else{\n                if(marks&lt;90&amp;&amp;marks&gt;=80){\n                document.getElementById(\"result\").style.color=\"green\";\n                document.getElementById(\"result\").innerHTML=\"Grade obtained by the student is : B\"\n            }\n            else{\n                if(marks&lt;80&amp;&amp;marks&gt;=70){\n                document.getElementById(\"result\").style.color=\"green\";\n                document.getElementById(\"result\").innerHTML=\"Grade obtained by the student is : C\"\n            }\n            else{\n                if(marks&lt;70&amp;&amp;marks&gt;=60){\n                document.getElementById(\"result\").style.color=\"green\";\n                document.getElementById(\"result\").innerHTML=\"Grade obtained by the student is : D\"\n            }\n\n            else{\n                if(marks&lt;60&amp;&amp;marks&gt;=50){\n                document.getElementById(\"result\").style.color=\"green\";\n                document.getElementById(\"result\").innerHTML=\"Grade obtained by the student is : E\"\n            }\n            else{\n                if(marks&lt;50){\n                document.getElementById(\"result\").style.color=\"red\";\n                document.getElementById(\"result\").innerHTML=\"Grade obtained by the student is : RA\"\n            }\n            }\n            }\n            }\n            }\n            }\n            }\n\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"JavaScript/HTML-DOM/#2_1","title":"2","text":"<pre><code>JS - Increase width and height\nNowadays, pictures play an important role in strengthening the communication and marketing efforts in all levels of publishing the organization. Recently Lee, the techno-assistant of \"Pink Frag Event Organization\" got a feedback regarding the images being uploaded in their official website couldnt be clearly understood, as the resolution was not upto the level.\n\nHence, Lee has assigned you the task of making the images to be zoomed in i.e, the width and heigth of the images should be increased on every double click on the image using the javascript functions.\n\nHints :  Width and height Property  The width property sets or returns the width an element. The height property sets or returns the height of an element. The width and height property has effect only on block-level elements or on elements with absolute / fixed position.  Syntax :   object.style.width (for width) and object.style.height (for height) where object = document.getElementById(\"#id\");\n\n\nContent :\nh1 - Increase width and height of div\ndiv id=\"myDiv\" width=\"400px\" height=\"200px\" ondblclick=\"addSize()\"\nh3 - Pink frag Event Organization\nOur events team handles all your requirements from conceptualization to execution, leaving you free to focus completely on achieving your objectives.With proper planning and logistics management and the ability to activate requisite resources, we have undertaken a wide variety of projects.\n\nConstraints:\nThe file name should be index.html.\nCreate a div with id \"myDiv\" and the content as mentioned above.\nIncrease the width and the height of the div by \"10px\" on every double click.\n\nNote :\nContent of the page should be present as shown in the screenshot.\nKindly refer the content which is given as a part of description.\n\nSample Screenshot 1 :\n\n\n\nSample Screenshot 2 :\nFor the first doubleClick(),\n\n\nSample Screenshot 3 :\nFor the sixth doubleClick(),\n</code></pre> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;center&gt;\n        &lt;div style=\"border: 1px solid;\"&gt;\n            &lt;h1&gt;Increase width and height of div&lt;/h1&gt;\n            &lt;div id=\"myDiv\" ondblclick=\"addSize()\" style=\" height: 200px;width: 400px;\"&gt;\n                &lt;h3&gt;Pink frag Event Organization&lt;/h3&gt;\n                Our events team handles all your requirements from conceptualization to execution, leaving you free to focus completely on achieving your objectives.With proper planning and logistics management and the ability to activate requisite resources, we have undertaken a wide variety of projects.\n\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/center&gt;\n\n    &lt;script&gt;\n        function addSize(){\n\n            var currentWidth = document.getElementById('myDiv').offsetWidth;\n\n\n  document.getElementById('myDiv').style.width = (currentWidth +10) + \"px\";\n  var currentHeight = document.getElementById('myDiv').offsetHeight;\n\n\n  document.getElementById('myDiv').style.height = (currentHeight + 10) + \"px\";\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"JavaScript/JS-fundamentals/","title":"JS-Fundamentals","text":""},{"location":"JavaScript/JS-fundamentals/#idesign","title":"iDesign","text":"<pre><code>Eligible Voter\n\nA voting age is a minimum age established by law that a person must attain before they become eligible to vote in public election. Allow the person if his/her age is greater than or equal to 18 using function.\n\nProblem Description:\n1) Read input file \u2018input.txt\u2019.\n2) Check the constraint inside the function checkAge().\n3) Display the message for the voters based on the constraint.\n\n\nInput and Output Format:\n\nRefer to sample input and output.\n\nInput is the age of the person.\n\nOutput is the message for voters.(Allowed/Not Allowed)\n\nInput:\n\n25\n\nOutput:\n\nAllowed\n\nInput:\n\n7\n\nOutput:\nNot Allowed\n</code></pre> <p>app.js<pre><code>var fs = require('fs');\nvar input = fs.readFileSync('input.txt').toString();\n//fill your code\nvar age=parseInt(input)\nif(checkAge(age)){\n    console.log(\"Allowed\")\n}\nelse{\n    console.log(\"Not Allowed\")\n}\nfunction checkAge(age){\nif(age&gt;=18){\nreturn true;\n}\n}\n</code></pre> input.txt<pre><code>65\n</code></pre></p>"},{"location":"JavaScript/JS-fundamentals/#iassess","title":"iAssess","text":""},{"location":"JavaScript/JS-fundamentals/#1","title":"1","text":"<pre><code>String Palindrome\n\nWrite a JavaScript console program to read the input file and check whether the given string is palindrome or not.\n\nInput and Output Format:\n\nRefer sample input and output for formatting specifications.\n\nInput is a string.\n\nOutput displays whether the given string is palindrome or not. (case insensitive)\n\nNote: Input should be read from input.txt\n\nThe spaces should be removed before checking.\n\nInput 1:\n\nTaco cat\n\nOutput 1:\n\nTaco cat is a palindrome\n\nInput 2:\n\nA gross creature\n\nOutput 2:\n\nA gross creature is not a palindrome\n</code></pre> <p>app.js<pre><code>var fs = require('fs');\nvar input1 = fs.readFileSync('input.txt').toString();\n//fill your code\nvar input=input1.trim().toLowerCase().replace(/\\s/g, \"\");\nfunction checkPalindrome(input){\n    let length=input.length\n    for(var i=0;i&lt;length/2;i++){\n        if(input[i]!==input[length-1-i]){\n            return input1+\" is not a palindrome\"\n        }\n    }\n    return input1+\" is a palindrome\"\n}\nvar value=checkPalindrome(input)\nconsole.log(value)\n</code></pre> input.txt<pre><code>Taco cat\n</code></pre></p>"},{"location":"JavaScript/JS-fundamentals/#2","title":"2","text":"<pre><code>Find Factorial\n\nWrite a program using the Arrow function to find the factorial of a given number.\n\nInput and Output :\n\nBelow input is the format of the file input.txt.\nInput consists of an integer.\nOutput is an integer.\n\nSample Input :\n\n5\n\nSample Output :\n\n120\n</code></pre> app.js<pre><code>var fs=require('fs');\nvar input=fs.readFileSync('input.txt').toString().trim();\n\n//Fill your code here\nvar value=(input)=&gt;{\n    var factorial=input\n    for (let index = 1; index &lt; input; index++) {\n        factorial=factorial*index\n\n    }\n\n    return factorial\n}\nconsole.log(value(input))\n</code></pre>"},{"location":"JavaScript/JavaScriptFreecodecamp/","title":"Javascript By FreeCodeCamp","text":""},{"location":"JavaScript/JavaScriptFreecodecamp/#basics-of-javascript","title":"Basics of JavaScript","text":"<pre><code>var circleStr=\"The \\t'Perimeter'\\t of circle is\";\n\nvar rectangleStr='The \"Perimeter\" of rectangle is';\nvar areaSquareStr=`The area of \"square\" is `;\nvar areaCircleStr=`The area of \"circle\" is `;\nvar areaRectangleStr='The area of \"rectangle\" is ';\nvar perimeterSquareStr=\"The perimeter of \\\"square\\\" is \";\n\nvar totalArea=areaSquareStr+\" 25 , \"+areaCircleStr+\" 22 , \"+areaRectangleStr+\" 52 .\\n\";\nvar totalPerimeter=circleStr+\" 35 , \"+rectangleStr+\" 87 , \"+perimeterSquareStr+\" 30 .\\n\";\nconsole.log(totalArea);\nconsole.log(totalPerimeter);\n</code></pre> <p>output:</p> <pre><code>The area of \"square\" is  25 , The area of \"circle\" is  22 , The area of \"rectangle\" is  52 .\n\nThe     'Perimeter'      of circle is 35 , The \"Perimeter\" of rectangle is 87 , The perimeter of \"square\" is  30 .\n</code></pre>"},{"location":"JavaScript/JavaScriptFreecodecamp/#hello-from-javascript","title":"Hello from JavaScript","text":"<pre><code>console.log(\"Hello from JavaScript\");\n</code></pre> <pre><code>var catName = \"Quincy\";\nvar quote;\n\nvar catName = \"Beau\";//we can redeclare with var but not with let!\n\nfunction catTalk() {\n  \"use strict\";\n\n  catName = \"Oliver\";\n  quote = catName + \" says Meow!\";\n  console.log(quote);\n\n}\ncatTalk();\n//Oliver says Meow!\n</code></pre>"},{"location":"JavaScript/JavaScriptFreecodecamp/#compare-scopes-of-the-var-and-let-keywords","title":"Compare Scopes of the var and let Keywords","text":"<pre><code>function checkScope() {\n    \"use strict\";\n      var i = \"function scope\";\n      if (true) {\n        let i = \"block scope\";\n        console.log(\"Block scope i is: \", i);\n      }\n      console.log(\"Function scope i is: \", i);\n      return i;\n    }\n\n    checkScope();\n</code></pre> <p>output:</p> <pre><code>Block scope i is:  block scope\nFunction scope i is:  function scope\n</code></pre>"},{"location":"JavaScript/JavaScriptFreecodecamp/#declare-a-read-only-variable-with-the-const-keyword","title":"Declare a Read-Only Variable with the const Keyword","text":"<pre><code>function printManyTimes(str) {\n    \"use strict\";\n\n    var sentence = str + \" is cool!\";\n\n    sentence = str + \" is amazing!\"\n\n    for(var i = 0; i &lt; str.length; i+=2) {\n      console.log(sentence);\n    }\n\n  }\n  printManyTimes(\"freeCodeCamp\");\n</code></pre> <p>output:</p> <pre><code>freeCodeCamp is amazing!\nfreeCodeCamp is amazing!\nfreeCodeCamp is amazing!\nfreeCodeCamp is amazing!\nfreeCodeCamp is amazing!\nfreeCodeCamp is amazing!\n</code></pre>"},{"location":"JavaScript/JavaScriptFreecodecamp/#mutate-const-array","title":"Mutate const array","text":"<pre><code>const s = [5, 7, 2];\nfunction editInPlace() {\n  \"use strict\";\n\n  s = [2, 5, 7];\n\n}\neditInPlace();\n</code></pre> <p>output:</p> <pre><code>TypeError: Assignment to constant variable.\n</code></pre> <pre><code>const s = [5, 7, 2];\nfunction editInPlace() {\n \"use strict\";\n\n//s = [2, 5, 7];\n s[0] = 2;\n s[1] = 5;\n s[2] = 7;\n\n}\neditInPlace();\n\nconsole.log(s)\n//[ 2, 5, 7 ]\n</code></pre>"},{"location":"JavaScript/JavaScriptFreecodecamp/#prevent-object-mutation","title":"Prevent Object Mutation","text":"<pre><code>function freezeObj() {\n    \"use strict\";\n    const MATH_CONSTANTS = {\n      PI: 3.14\n    };\n\n    Object.freeze(MATH_CONSTANTS);\n\n    try {\n      MATH_CONSTANTS.PI = 99;\n    } catch( ex ) {\n      console.log(ex);\n    }\n    return MATH_CONSTANTS.PI;\n  }\n</code></pre>"},{"location":"JavaScript/JavaScriptFreecodecamp/#use-arrow-function","title":"use arrow function","text":"<pre><code> var magic = function() {\n    return new Date();\n  };\n</code></pre> <pre><code>var magic = () =&gt; {\n  return new Date();\n};\n</code></pre> <pre><code>  var magic = () =&gt; new Date();\n</code></pre>"},{"location":"JavaScript/JavaScriptFreecodecamp/#arrow-function-with-parameters","title":"Arrow function with parameters","text":"<pre><code>  var myConcat = function(arr1, arr2) {\n    return arr1.concat(arr2);\n  };\n\n  console.log(myConcat([1, 2], [3, 4, 5]));\n  //[ 1, 2, 3, 4, 5 ]\n</code></pre> <pre><code>var myConcat = (arr1, arr2) =&gt; arr1.concat(arr2);\n\nconsole.log(myConcat([1, 2], [3, 4, 5]));\n//[ 1, 2, 3, 4, 5 ]\n</code></pre>"},{"location":"JavaScript/JavaScriptFreecodecamp/#higher-order-arrow-fuctions","title":"Higher order arrow fuctions","text":"<pre><code>const realNumberArray = [4, 5.6, -9.8, 3.14, 42, 6, 8.34, -2];\n\nconst squareList = (arr) =&gt; {\n  const squaredIntegers = arr.filter(num =&gt; Number.isInteger(num) &amp;&amp; num &gt; 0).map(x =&gt; x * x);\n  return squaredIntegers;\n};\n\n\nconst squaredIntegers = squareList(realNumberArray);\nconsole.log(squaredIntegers);\n</code></pre>"},{"location":"JavaScript/JavaScriptFreecodecamp/#set-defaut-pameters-to-your-function","title":"set defaut pameters to your function","text":"<pre><code>const increment = (function() {\n    return function increment(number, value) {\n      return number + value;\n    };\n  })();\n  console.log(increment(5, 2)); \n  console.log(increment(5)); \n</code></pre> <p>output:</p> <pre><code>7\nNaN\n</code></pre> <pre><code>  const increment = (function() {\n    return function increment(number, value = 1) {\n      return number + value;\n    };\n  })();\n  console.log(increment(5, 2)); \n  console.log(increment(5));\n</code></pre> <p>output:</p> <pre><code>7\n6\n</code></pre>"},{"location":"JavaScript/JavaScriptFreecodecamp/#rest-operator-with-function-parameter","title":"Rest operator(...) with function parameter","text":"<pre><code>  const sum = (function() {\n  return function sum(x, y, z) {\n    const args = [ x, y, z ];\n    return args.reduce((a, b) =&gt; a + b, 0);\n  };\n})();\nconsole.log(sum(1, 2, 3));\n//6\n</code></pre> <pre><code>  const sum = (function() {\n    return function sum(...args) {\n      return args.reduce((a, b) =&gt; a + b, 0);\n    };\n  })();\n  console.log(sum(1, 2, 3, 4));\n//10\n</code></pre>"},{"location":"JavaScript/JavaScriptFreecodecamp/#spread-operator","title":"spread operator","text":"<pre><code>const arr1 = ['JAN', 'FEB', 'MAR', 'APR', 'MAY'];\nlet arr2;\n(function() {\n  arr2 = arr1; // change this line\n  arr1[0] = 'potato'\n})();\nconsole.log(arr2);\n//[ 'potato', 'FEB', 'MAR', 'APR', 'MAY' ]\n</code></pre> <pre><code>const arr1 = ['JAN', 'FEB', 'MAR', 'APR', 'MAY'];\nlet arr2;\n(function() {\n  arr2 = [...arr1]; // change this line\n  arr1[0] = 'potato'\n})();\nconsole.log(arr2);\n//[ 'JAN', 'FEB', 'MAR', 'APR', 'MAY' ]\n</code></pre>"},{"location":"JavaScript/JavaScriptFreecodecamp/#use-destructuring-assignment-to-assign-variables-from-object","title":"use Destructuring Assignment to assign variables from object","text":"<pre><code>var voxel = {x: 3.6, y: 7.4, z: 6.54 };\n\nvar x = voxel.x; // x = 3.6\nvar y = voxel.y; // y = 7.4\nvar z = voxel.z; // z = 6.54\n\nconst { x : a, y : b, z : c } = voxel; // a = 3.6, b = 7.4, c = 6.54\n\n\nconst AVG_TEMPERATURES = {\n  today: 77.5,\n  tomorrow: 79\n};\n\nfunction getTempOfTmrw(avgTemperatures) {\n  \"use strict\";\n  // change code below this line\n  const { tomorrow : tempOfTomorrow } = avgTemperatures; // change this line\n  // change code above this line\n  return tempOfTomorrow;\n}\n\nconsole.log(getTempOfTmrw(AVG_TEMPERATURES)); // should be 79\n</code></pre>"},{"location":"JavaScript/JavaScriptFreecodecamp/#use-destructuring-assignment-to-assign-variables-from-nested-object","title":"use Destructuring Assignment to assign variables from nested object","text":"<pre><code>const LOCAL_FORECAST = {\n    today: { min: 72, max: 83 },\n    tomorrow: { min: 73.3, max: 84.6 }\n  };\n\n  function getMaxOfTmrw(forecast) {\n    \"use strict\";\n\n    const { tomorrow : { max : maxOfTomorrow }} = forecast; \n\n    return maxOfTomorrow;\n  }\n\n  console.log(getMaxOfTmrw(LOCAL_FORECAST)); \n  //84.6\n</code></pre>"},{"location":"JavaScript/JavaScriptFreecodecamp/#use-destructuring-assignment-to-assign-variables-from-arrays","title":"use Destructuring Assignment to assign variables from arrays","text":"<pre><code>const [z, x, , y] = [1, 2, 3, 4, 5, 6];\nconsole.log(z, x, y);\n\n\nlet a = 8, b = 6;\n(() =&gt; {\n  \"use strict\";\n  [a, b] = [b, a]\n})();\nconsole.log(a); \nconsole.log(b); \n/*\n1 2 4\n6\n8\n*/\n</code></pre>"},{"location":"JavaScript/JavaScriptFreecodecamp/#use-destructuring-assignment-with-the-rest-operator-to-reassign-array-elements","title":"use-destructuring-assignment-with-the-rest-operator-to-reassign-array-elements","text":"<pre><code>const source = [1,2,3,4,5,6,7,8,9,10];\nfunction removeFirstTwo(list) {\n\n  const [ , , ...arr] = list; \n\n  return arr;\n}\nconst arr = removeFirstTwo(source);\nconsole.log(arr); \nconsole.log(source);\n/*\n[\n  3, 4, 5,  6,\n  7, 8, 9, 10\n]\n[\n  1, 2, 3, 4,  5,\n  6, 7, 8, 9, 10\n]\n*/\n</code></pre>"},{"location":"JavaScript/JavaScriptFreecodecamp/#use-destructuring-assignment-to-pass-an-object-as-a-functions-parameters","title":"use-destructuring-assignment-to-pass-an-object-as-a-functions-parameters","text":"<pre><code>const stats = {\n    max: 56.78,\n    standard_deviation: 4.34,\n    median: 34.54,\n    mode: 23.87,\n    min: -0.75,\n    average: 35.85\n  };\n  const half = (function() {\n\n    return function half(stats) {\n      return (stats.max + stats.min) / 2.0;\n    };\n\n  })();\n  console.log(stats); \n  console.log(half(stats)); \n  /*\n  {\n  max: 56.78,\n  standard_deviation: 4.34,\n  median: 34.54,\n  mode: 23.87,\n  min: -0.75,\n  average: 35.85\n}\n28.015  \n  */\n</code></pre> <pre><code>  const stats = {\n    max: 56.78,\n    standard_deviation: 4.34,\n    median: 34.54,\n    mode: 23.87,\n    min: -0.75,\n    average: 35.85\n  };\n  const half = (function() {\n\n    return function half({ max, min }) {\n      return (max + min) / 2.0;\n    };\n\n  })();\n  console.log(stats); \n  console.log(half(stats)); \n  /*\n  {\n  max: 56.78,\n  standard_deviation: 4.34,\n  median: 34.54,\n  mode: 23.87,\n  min: -0.75,\n  average: 35.85\n}\n28.015\n  */\n</code></pre>"},{"location":"JavaScript/JavaScriptFreecodecamp/#create-strings-using-template-literals","title":"create-strings-using-template-literals","text":"<pre><code>const person = {\n    name: \"Zodiac Hasbro\",\n    age: 56\n  };\n\n  // Template literal with multi-line and string interpolation\n  const greeting = `Hello, my name is ${person.name}!\n  I am ${person.age} years old.`;\n\n  console.log(greeting); \n\n\n  const result = {\n    success: [\"max-length\", \"no-amd\", \"prefer-arrow-functions\"],\n    failure: [\"no-var\", \"var-on-top\", \"linebreak\"],\n    skipped: [\"id-blacklist\", \"no-dup-keys\"]\n  };\n  function makeList(arr) {\n    const resultDisplayArray = [];\n    for (let i = 0; i &lt; arr.length; i++) {\n      resultDisplayArray.push(`&lt;li class=\"text-warning\"&gt;${arr[i]}&lt;/li&gt;`)\n    }\n\n    return resultDisplayArray;\n  }\n  /**\n   * makeList(result.failure) should return:\n   * [ `&lt;li class=\"text-warning\"&gt;no-var&lt;/li&gt;`,\n   *   `&lt;li class=\"text-warning\"&gt;var-on-top&lt;/li&gt;`, \n   *   `&lt;li class=\"text-warning\"&gt;linebreak&lt;/li&gt;` ]\n   **/\n  const resultDisplayArray = makeList(result.failure);\n\n  console.log(resultDisplayArray)\n</code></pre>"},{"location":"JavaScript/JavaScriptFreecodecamp/#write-concise-object-literal-declarations-using-simple-fields","title":"write-concise-object-literal-declarations-using-simple-fields","text":"<pre><code> const createPerson = (name, age, gender) =&gt; {\n\n    return {\n      name: name,\n      age: age,\n      gender: gender\n    };\n\n  };\n  console.log(createPerson(\"Zodiac Hasbro\", 56, \"male\"));\n  //{ name: 'Zodiac Hasbro', age: 56, gender: 'male' } \n</code></pre> <pre><code>  const createPerson = (name, age, gender) =&gt; ( { name, age, gender });\nconsole.log(createPerson(\"Zodiac Hasbro\", 56, \"male\")); \n//{ name: 'Zodiac Hasbro', age: 56, gender: 'male' }\n</code></pre>"},{"location":"JavaScript/JavaScriptFreecodecamp/#write-concise-declarative-functions-with-es6","title":"write-concise-declarative-functions-with-es6","text":"<pre><code>const bicycle = {\n    gear: 2,\n    setGear: function(newGear) {\n      \"use strict\";\n      this.gear = newGear;\n    }\n  };\n\n  bicycle.setGear(3);\n  console.log(bicycle.gear);\n  //3\n</code></pre> <pre><code>  const bicycle = {\n    gear: 2,\n    setGear(newGear) {\n      \"use strict\";\n      this.gear = newGear;\n    }\n  };\n\n  bicycle.setGear(3);\n  console.log(bicycle.gear);\n//3\n</code></pre>"},{"location":"JavaScript/JavaScriptFreecodecamp/#use-class-syntax-to-define-a-constructor-function","title":"use-class-syntax-to-define-a-constructor-function","text":"<pre><code>class SpaceShuttle {\n    constructor(targetPlanet){\n      this.targetPlanet = targetPlanet;\n    }\n  }\n  var zeus = new SpaceShuttle('Jupiter');\n\n  console.log(zeus.targetPlanet)\n\n  function makeClass() {\n    class Vegetable {\n      constructor(name){\n        this.name = name;\n      }\n    }\n    return Vegetable;\n  }\n  const Veg = makeClass();\n  const carrot = new Veg('carrot');\n  console.log(carrot.name); \n//Jupiter\n//carrot\n</code></pre>"},{"location":"JavaScript/JavaScriptFreecodecamp/#use-getters-and-setters-to-control-access-to-an-object","title":"use-getters-and-setters-to-control-access-to-an-object","text":"<pre><code>class Book {\n    constructor(author) {\n      this._author = author;\n    }\n    // getter\n    get writer(){\n      return this._author;\n    }\n    // setter\n    set writer(updatedAuthor){\n      this._author = updatedAuthor;\n    }\n  }\n\n  function makeClass() {\n    class Thermostat {\n      constructor(temp) {\n        this._temp = 5/9 * (temp - 32);\n      }\n      get temperature(){\n        return this._temp;\n      }\n      set temperature(updatedTemp){\n        this._temp = updatedTemp;\n      }\n    }\n    return Thermostat;\n  }\n\n  const Thermo = makeClass();\n  const thermos = new Thermo(76); \n  let temp = thermos.temperature; \n  thermos.temperature = 26;\n  temp = thermos.temperature; \n  console.log(temp);\n  //26\n</code></pre>"},{"location":"JavaScript/JavaScriptFreecodecamp/#understand-the-differences-between-import-and-require","title":"understand-the-differences-between-import-and-require","text":"<pre><code>export const capitalizeString = str =&gt; str.toUpperCase()\n</code></pre> <pre><code>import { capitalizeString } from \"./string_function\"\nconst cap = capitalizeString(\"hello!\");\n\nconsole.log(cap);\n</code></pre>"},{"location":"JavaScript/JavaScriptFreecodecamp/#use-export-to-reuse-a-code-block","title":"use-export-to-reuse-a-code-block","text":"<pre><code>const capitalizeString = (string) =&gt; {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  }\n\n  export { capitalizeString };\n\n  export const foo = \"bar\";\n  export const bar = \"foo\";\n</code></pre>"},{"location":"JavaScript/JavaScriptFreecodecamp/#use-to-import-everything-from-a-file","title":"use-to-import-everything-from-a-file","text":"<pre><code>import * as capitalizeStrings from \"capitalize_strings\";\n</code></pre>"},{"location":"JavaScript/JavaScriptFreecodecamp/#create-an-export-fallback-with-export-default","title":"create-an-export-fallback-with-export-default","text":"<pre><code>export default function subtract(x,y) {return x - y;}\n</code></pre>"},{"location":"JavaScript/JavaScriptFreecodecamp/#import-a-default-export","title":"import-a-default-export","text":"<pre><code>import subtract from \"math_functions\";\n\nsubtract(7,4);\n</code></pre>"},{"location":"JavaScript/ObjectOrientedConcepts/","title":"Object Oriented Concepts","text":""},{"location":"JavaScript/ObjectOrientedConcepts/#idesign","title":"iDesign","text":""},{"location":"JavaScript/ObjectOrientedConcepts/#1","title":"1","text":"<pre><code>Check Name Length using ES5\n\nCheck the given user name length using Javascript class using ES5.\n\nProblem Description:\n1) Read input file \u2018input.txt\u2019\n2) Create class named as User.\n3) Inside the class create the argument as user name.\n4) Now create getter for name.\n5) Create the function checkNameLength() inside the class.\n6) Inside the function check the length of the user name.\n7) If the user name length is greater than 4 then, print the name as it is. Else print the message \u2018Name is too short\u2019.\n6) Create object for the class using new Classname() and pass the input to the constructor.\n7) And call the object method, using object.methodName() to print the output.\n\nInput and Output Format:\n\nRefer to sample input and output.\n\nInput is user name.\n\nOutput is user name.(If the length is greater than 4), Else  \u2018Name is too short\u2019.\n\nInput:\n\nHarina\n\nOutput:\n\nHarina\n\nInput:\n\nJim\n\nOutput:\n\nName is too short\n</code></pre> <p>app.js<pre><code>var fs = require('fs');\nvar input=fs.readFileSync('input.txt').toString().trim().split('\\n');\n//fill your code\nvar value=String(input)\nclass User {\n    constructor(name) {\n        this._name = name;\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    checkNameLength() {\n        if (this._name.length &gt; 4) {\n\n            console.log(this._name);\n        } else {\n            console.log('Name is too short');\n        }\n    }\n}\nvar user=new User(value)\nuser.checkNameLength();\n</code></pre> input.txt<pre><code>Harina\n</code></pre></p>"},{"location":"JavaScript/ObjectOrientedConcepts/#2","title":"2","text":"<pre><code>Prime or Composite using ES6\n\nWrite a program to check the given number is prime or composite.\n\nProblem Description:\n1) Read a number from file \u2018input.txt\u2019\n2) In display.js check and print, the given number is prime or composite.\n3) In display.js exports the function/class name.  ( Example : exports.className = className; )\n4) In app.js import the function/class name. ( Example: {className} = require(\u2018file path'); )\n5) From app.js call the function/class to print the message.\n\nInput and Output Format:\n\nRefer to sample input and output.\n\nInput is a number.\n\nThe output is the statement.\n\nInput:\n\n23\n\nOutput:\n\nPrime Number\n\nInput:\n\n26\n\nOutput:\n\nComposite Number\n\nInput:\n\n1\n\nOutput:\n\nNeither Prime nor Composite\n</code></pre> <p>app.js<pre><code>//fill your code\nconst {value} = require ('./display.js')\nvar fs = require('fs');\nvar data = fs.readFileSync('input.txt');\nvar intval=parseInt(data)\nconsole.log(value(intval))\n</code></pre> display.js<pre><code>let value=(data)=&gt;{\n    if(data&lt;=1){\n        return \"Neither Prime nor Composite\"\n    }\nfor(let i=2;i&lt;=Math.sqrt(data);i++){\n    if(data%i===0){\n        return \"Composite Number\"\n    }\n\n}\nreturn \"Prime Number\"\n}\nexports.value=value\n</code></pre> input.txt<pre><code>23\n</code></pre></p>"},{"location":"JavaScript/ObjectOrientedConcepts/#iassess","title":"iAssess","text":""},{"location":"JavaScript/ObjectOrientedConcepts/#1_1","title":"1","text":"<pre><code>Print Employee Details using ES5\n\nPrint employee details using javascript class using ES5.\n\nProblem Description:\n1) Read input file \u2018input.txt\u2019\n2) Create a class named as Employee.\n3) Inside the class create arguments employee name,dept and DOJ.\n4) Now create the method as displayEmployee() and inside the method print the employee details.\n5) Create object for the class using new Classname() and pass the input to the constructor.\n6) And call the object method, using object.methodName() to print the employee details.\n\nInput and Output Format:\n\nRefer to sample input and output.\n\nInput and output is employee details.\n\nInput:\n\nJohn\nHR\n23-8-1997\n\nOutput:\n\nName : John\nDepartment : HR\nDOJ : 23-8-1997\n</code></pre> <p>app.js<pre><code>var fs = require('fs');\nvar input=fs.readFileSync('input.txt').toString().trim().split('\\n');\n//fill your code\nvar name=String(input[0])\nvar dept=String(input[1])\nvar doj=String(input[2])\n\nclass Employee{\n    constructor(name,dept,doj){\n        this.name=name\n        this.dept=dept\n        this.doj=doj\n    }\n    displayEmployee(){\n        console.log(\"Name : \"+this.name)\n         console.log(\"Department : \"+this.dept)\n          console.log(\"DOJ : \"+this.doj)\n    }\n}\nvar emp1=new Employee(name,dept,doj)\nemp1.displayEmployee()\n</code></pre> input.txt<pre><code>John\nHR\n23-8-1997\n</code></pre></p>"},{"location":"JavaScript/ObjectOrientedConcepts/#2_1","title":"2","text":"<pre><code>Area and Perimeter using ES6\n\nWrite a program to find the area and perimeter of extended classes from the parent class.\n\nProblem Description :\n\n1) Read input file \u2018input.txt\u2019\n2) Create a class named as Shape using the keyword class.\n3) Inside the class create constructor with argument name.\n3) Create a method calculatePerimeter() and calculateArea in the parent class Shape.\n4) Create three child classes Circle, Square, and Triangle.\n5) Each class should have a constructor which invokes name from the parent class:\n    Constructor of Circle should have arguments for name and radius\n    Constructor of Square should have arguments for name and side\n    Constructor of Triangle should have arguments for name, side1, side2, side3, side4, base and height.\n6) Create methods in each class to display the measurements.\n\n    displayCircleMeasurments() in class Circle\n    displaySquareMeasurments() in class Square\n    displayTriangleMeasurments() in class Triangle\n7) Each display method should invoke the methods in the parent class\n\n    calculateArea()\n    calculatePerimeter()\nNote :\n\ncalculateArea() and calculatePerimeter() are the methods written inside Parent class Shape. It should be invoked from the child classes with the super keyword.\n\nInput and Output Format :\n\nRefer to sample input and output.\nInput consists of n lines. Each line consists of a comma-separated values of the name of the shape and required sides of the corresponding shape\nOutput should display the calculated area and perimeter of all the three shapes.\n\nSample Input :\n\nCircle,11\nSquare,4\nTriangle,3,4,5,4,6\n\nSample Output :\n\nPerimeter of a Circle: 69.08\nArea of a Circle: 379.94\nPerimeter of a Square: 16\nArea of a Square: 16\nPerimeter of a Triangle: 12\nArea of a Triangle: 12\n</code></pre> <p>app.js<pre><code>var fs = require('fs');\nvar input=fs.readFileSync('input.txt').toString().trim().split('\\n');\n//fill your code\nvar circle=input[0].split(',')\nvar square=input[1].split(',')\nvar triangle=input[2].split(',')\nclass Shape{\n\n    constructor(side1,side2){\n        this.side1=side1\n        this.side2=side2\n    }\n    calculatePerimeter(side1){\n           return  side1\n    }\n    calculateArea(side1,side2){\n        return side1*side2\n    }\n}\nvar cName=String(circle[0])\nvar  cRadius=parseInt(circle[1])\nclass Circle extends Shape{\nconstructor(cName,cRadius){\n    super()\n    this.cName=cName\n    this.cRadius=cRadius\n}\ndisplayCircleMeasurments(){\nconsole.log(\"Perimeter of a \"+this.cName+\": \"+2*3.14*super.calculatePerimeter(this.cRadius))\nconsole.log(\"Area of a \"+this.cName+\": \"+3.14*super.calculateArea(this.cRadius,this.cRadius))\n\n}\n}\nvar sName=String(square[0])\nvar  sSide=parseInt(square[1])\nclass Square extends Shape{\n    constructor(sName,sSide){\n        super()\n    this.sName=sName\n    this.sSide=sSide\n}\ndisplaySquareMeasurments(){\nconsole.log(\"Perimeter of a \"+this.sName+\": \"+4*super.calculatePerimeter(this.sSide))\nconsole.log(\"Area of a \"+this.sName+\": \"+super.calculateArea(this.sSide,this.sSide))\n\n}\n}\nvar tName=String(triangle[0])\nvar  side1=parseInt(triangle[1])\nvar  side2=parseInt(triangle[2])\nvar  side3=parseInt(triangle[3])\nvar  base=parseInt(triangle[4])\nvar  height=parseInt(triangle[5])\nclass Triangle extends Shape{\n\n    constructor(tName,side1,side2,side3,base,height){\n        super()\n    this.tName=tName\n    this.side1=side1\n    this.side2=side2\n    this.side3=side3\n   // this.side4=this.side4\n    this.base=base\n    this.height=height\n    this.sum=this.side1+this.side2+ this.side3\n}\n\ndisplayTriangleMeasurments(){\n\nconsole.log(\"Perimeter of a \"+this.tName+\": \"+super.calculatePerimeter(this.sum))\nconsole.log(\"Area of a \"+this.tName+\": \"+0.5*super.calculateArea(this.base,this.height))\n}\n}\nvar circle1=new Circle(cName,cRadius)\nvar square1=new Square(sName,sSide)\nvar triangle1=new Triangle(tName,side1,side2,side3,base,height)\n\ncircle1.displayCircleMeasurments();\nsquare1.displaySquareMeasurments();\ntriangle1.displayTriangleMeasurments();\n</code></pre> input.txt<pre><code>Circle,11\nSquare,4\nTriangle,3,4,5,4,6 \n</code></pre></p>"},{"location":"Kubernetes/kubernetes-assignment/","title":"Kubernetes Hands-on","text":""},{"location":"Kubernetes/kubernetes-assignment/#react-springboot-mysql-application","title":"React + SpringBoot + MySQL Application","text":""},{"location":"Kubernetes/kubernetes-assignment/#1-dockerize-each-component","title":"1. Dockerize Each Component:","text":"<p><code>Frontend Dockerfile</code> <pre><code>FROM ubuntu:latest\nMAINTAINER rahul_vishwakarma1\nRUN apt-get update\nRUN apt-get -y install curl gnupg\nRUN curl -sL https://deb.nodesource.com/setup_14.x  | bash -\nRUN apt-get -y install nodejs\n\nCOPY ./ui /home/ui\n\nWORKDIR /home/ui\n\nRUN useradd ui\n\nRUN chmod -R ugoa+rwx /home/ui &amp;&amp; chown -R ui:0 /home/ui\n\nUSER ui\n\nEXPOSE 3000\n\nRUN npm install\nRUN mkdir -p node_modules/.cache &amp;&amp; chmod -R 777 node_modules/.cache\n\nCMD npm run build &amp;&amp; npx serve -s build\n#CMD [\"npm\", \"start\"]\n</code></pre> <pre><code>docker build -t rahul1181/frontend-image:1.16 . \ndocker push rahul1181/frontend-image:1.16\n</code></pre></p> <p>make sure to create .env, .env.development, .env.production files in ui. So that env in deployment file will point to .env.production</p> <p><code>Backend Dockerfile</code> <pre><code>FROM openjdk:17-jdk-alpine\nMAINTAINER rahul_vishwakarma1\nCOPY . .\nENTRYPOINT [\"java\",\"-jar\",\"/jttours-0.0.1-SNAPSHOT.jar\"]\n</code></pre> <pre><code>docker build -t rahul1181/backend-image:1.3 .\ndocker push rahul1181/backend-image:1.3 \n</code></pre></p>"},{"location":"Kubernetes/kubernetes-assignment/#2-create-kubernetes-namespace","title":"2. Create Kubernetes Namespace:","text":"<p><code>namespace.yaml</code> <pre><code>apiVersion: v1\nkind: Namespace\nmetadata:\n  name: jttours\n</code></pre> <pre><code>oc apply -f namespace.yaml\n</code></pre></p>"},{"location":"Kubernetes/kubernetes-assignment/#3-mysql","title":"3. MySQL","text":""},{"location":"Kubernetes/kubernetes-assignment/#persistent-storage","title":"Persistent Storage:","text":"<p><code>mysql-pv.yaml</code> <pre><code>apiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: mysql-pv\n  namespace: jttours\nspec:\n  capacity:\n    storage: 250Mi\n  accessModes:\n    - ReadWriteOnce\n  hostPath:\n    path: \"/path/to/mysql/data\"\n\n---\n\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: mysql-pv-claim\n  namespace: jttours\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 250Mi\n</code></pre> <pre><code>oc apply -f mysql-pv.yaml\n</code></pre></p>"},{"location":"Kubernetes/kubernetes-assignment/#create-mysql-secret","title":"Create MySQL Secret:","text":"<p><code>mysql-secret.yaml</code> <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: mysql-secret\n  namespace: jttours\ntype: Opaque\ndata:\n  mysql-root-password: YWRtaW4=   # Base64 encoded 'admin'\n  mysql-user-password: YWRtaW4=   # Base64 encoded 'admin' \n</code></pre> <pre><code>oc apply -f mysql-secret.yaml\n</code></pre></p>"},{"location":"Kubernetes/kubernetes-assignment/#create-mysql-configmap","title":"Create MySQL Configmap","text":"<p><pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: mysql-config-map\n  namespace: jttours\ndata:\n  mysql-server: mysql-service    # The name of mysql service\n  mysql-database-name: jttoursdb     # The name of the database used by the demo app\n  mysql-user-username: rahul     # A new created user for the demo app \n</code></pre> <pre><code>oc apply -f mysql-configmap.yaml\n</code></pre></p>"},{"location":"Kubernetes/kubernetes-assignment/#mysql-statefulset","title":"MySQL StatefulSet","text":"<p><code>mysql-statefulset.yaml</code> <pre><code>apiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: mysql-statefulset\n  namespace: jttours\nspec:\n  serviceName: mysql-service\n  replicas: 1\n  selector:\n    matchLabels:\n      app: mysql\n  template:\n    metadata:\n      labels:\n        app: mysql\n    spec:\n      containers:\n      - image: mysql:5.6\n        name: mysql\n        env:\n        - name: MYSQL_DATABASE\n          valueFrom:\n            configMapKeyRef:\n              name: mysql-config-map\n              key: mysql-database-name\n        - name: MYSQL_ROOT_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: mysql-secret\n              key: mysql-root-password\n        - name: MYSQL_USER\n          valueFrom:\n            configMapKeyRef:\n              name: mysql-config-map\n              key: mysql-user-username\n        - name: MYSQL_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: mysql-secret\n              key: mysql-user-password\n        livenessProbe:\n          tcpSocket:\n            port: 3306\n        ports:\n        - containerPort: 3306\n          name: mysql\n        volumeMounts:\n        - name: mysql-persistent-storage\n          mountPath: /var/lib/mysql\n      volumes:\n      - name: mysql-persistent-storage\n        persistentVolumeClaim:\n          claimName: mysql-pv-claim\n</code></pre> <pre><code>oc apply -f mysql-statefulset.yaml\n</code></pre></p>"},{"location":"Kubernetes/kubernetes-assignment/#mysql-deployment-if-mysql-statefulset-is-not-applied","title":"MySQL Deployment (If MySQL StatefulSet is not applied )","text":"<p>For databases statefulsets are preferred over deployments. It has its own advantages</p> <p><code>mysql-deployment.yaml</code> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: mysql-deployment\n  namespace: jttours\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: mysql\n  template:\n    metadata:\n      labels:\n        app: mysql\n        tier: mysql\n    spec:\n      containers:\n      - image: mysql:5.6\n        name: mysql\n        env:\n        - name: MYSQL_DATABASE\n          valueFrom:\n            configMapKeyRef:\n              name: mysql-config-map\n              key: mysql-database-name\n        - name: MYSQL_ROOT_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: mysql-secret\n              key: mysql-root-password\n        - name: MYSQL_USER\n          valueFrom:\n            configMapKeyRef:\n              name: mysql-config-map\n              key: mysql-user-username\n        - name: MYSQL_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: mysql-secret\n              key: mysql-user-password\n        livenessProbe:\n          tcpSocket:\n            port: 3306\n        ports:\n        - containerPort: 3306\n          name: mysql\n        volumeMounts:\n        - name: mysql-persistent-storage\n          mountPath: /var/lib/mysql\n      volumes:\n      - name: mysql-persistent-storage\n        persistentVolumeClaim:\n          claimName: mysql-pv-claim\n</code></pre> <pre><code>oc apply -f mysql-deployment.yaml\n</code></pre></p>"},{"location":"Kubernetes/kubernetes-assignment/#mysql-service","title":"MySQL Service","text":"<p><pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: mysql-service\n  namespace: jttours\nspec:\n  selector:\n    app: mysql\n  ports:\n    - protocol: TCP\n      port: 3306\n      targetPort: 3306\n</code></pre> <pre><code>oc apply -f mysql-service.yaml\n</code></pre></p> <p>paste the cluster-ip of mysql-service in backend-configmap.yaml</p> <pre><code>oc apply -f namespace.yaml\noc apply -f mysql-pv.yaml\noc apply -f mysql-secret.yaml\noc apply -f mysql-configmap.yaml\noc apply -f mysql-statefulset.yaml\n# oc apply -f mysql-deployment.yaml\noc apply -f mysql-service.yaml\n</code></pre> <p>paste cluster-ip of mysql-service in backend-configmap.yaml</p>"},{"location":"Kubernetes/kubernetes-assignment/#4-backend","title":"4. Backend","text":""},{"location":"Kubernetes/kubernetes-assignment/#backend-configmap","title":"Backend Configmap","text":"<p><pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: backend-configmap\n  namespace: jttours\ndata:\n  SPRING_DATASOURCE_URL: \"jdbc:mysql://172.21.171.36/jttoursdb\" # cluster-ip of mysql-service\n  SPRING_DATASOURCE_USERNAME: \"root\"\n  SPRING_DATASOURCE_PASSWORD: \"admin\"\n</code></pre> <pre><code>oc apply -f backend-configmap.yaml\n</code></pre></p>"},{"location":"Kubernetes/kubernetes-assignment/#backend-deployment","title":"Backend Deployment","text":"<p><pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: backend-deployment\n  namespace: jttours\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: backend\n  template:\n    metadata:\n      labels:\n        app: backend\n    spec:\n      containers:\n        - name: backend-container\n          image: rahul1181/backend-image:1.2\n          envFrom:\n            - configMapRef:\n                name: backend-configmap\n          ports:\n            - containerPort: 8080\n          volumeMounts:\n            - name: mysql-persistent-storage\n              mountPath: /var/lib/mysql\n      volumes:\n        - name: mysql-persistent-storage\n          persistentVolumeClaim:\n            claimName: mysql-pv-claim\n</code></pre> <pre><code>oc apply -f backend-deployment.yaml\n</code></pre></p>"},{"location":"Kubernetes/kubernetes-assignment/#backend-service","title":"Backend Service","text":"<p><pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: backend-service\n  namespace: jttours\nspec:\n  selector:\n    app: backend\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 8080\n  type: NodePort\n</code></pre> <pre><code>oc apply -f backend-service.yaml\n</code></pre> <pre><code>oc expose svc backend-service -n jttours\n</code></pre></p> <p>paste url of route in frontend-config</p>"},{"location":"Kubernetes/kubernetes-assignment/#5-frontend","title":"5. Frontend","text":""},{"location":"Kubernetes/kubernetes-assignment/#frontend-configmap","title":"Frontend Configmap","text":"<p><pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: frontend-configmap\n  namespace: jttours\ndata:\n  REACT_APP_API_URL: \"backend-service-jttours.ibm01-roks-2add6c5939e72723a23a68c764c76a06-0000.us-south.containers.appdomain.cloud\"\n</code></pre> <pre><code>oc apply -f frontend-configmap.yaml\n</code></pre></p>"},{"location":"Kubernetes/kubernetes-assignment/#frontend-deploment","title":"Frontend Deploment","text":"<p><pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: frontend-deployment\n  namespace: jttours\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: frontend\n  template:\n    metadata:\n      labels:\n        app: frontend\n    spec:\n      containers:\n        - name: frontend-container\n          image: rahul1181/frontend-image:1.15\n          envFrom:\n            - configMapRef:\n                name: frontend-configmap\n          ports:\n            - containerPort: 3000\n</code></pre> <pre><code>oc apply -f frontend-deployment.yaml\n</code></pre></p>"},{"location":"Kubernetes/kubernetes-assignment/#frontend-service","title":"Frontend Service","text":"<p><pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: frontend-service\n  namespace: jttours\nspec:\n  selector:\n    app: frontend\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 3000\n  type: NodePort\n</code></pre> <pre><code>oc apply -f frontend-service.yaml\n</code></pre> <pre><code>oc expose svc frontend-service -n jttours\n</code></pre></p> <p>Now we can access the frontend from route url</p>"},{"location":"Kubernetes/kubernetes-assignment/#6-ingress-optional","title":"6. Ingress (Optional)","text":"<p><pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: my-ingress\n  namespace: jttours\nspec:\n  rules:\n    - host: dns.rahulssv.com # Replace with your actual domain or IP address - Domain must be registered with service IP\n      http:\n        paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name: frontend-service\n                port:\n                  number: 80\n          - path: /api\n            pathType: Prefix\n            backend:\n              service:\n                name: backend-service\n                port:\n                  number: 80\n</code></pre> <pre><code>oc apply -f ingress.yaml\n</code></pre></p>"},{"location":"Kubernetes/kubernetes-day3/","title":"Kubernetes Day 3","text":"<p><code>ubuntu@ubuntu-VM:~$ minikube start</code></p> <pre><code>* minikube v1.29.0 on Ubuntu 22.04\n* Kubernetes 1.26.1 is now available. If you would like to upgrade, specify: --kubernetes-version=v1.26.1\n* Using the docker driver based on existing profile\n* Starting control plane node minikube in cluster minikube\n* Pulling base image ...\n* Updating the running docker \"minikube\" container ...\n* Preparing Kubernetes v1.23.12 on Docker 20.10.23 ...\n* Verifying Kubernetes components...\n  * Using image gcr.io/k8s-minikube/storage-provisioner:v5\n* Enabled addons: storage-provisioner, default-storageclass\n\n! /usr/bin/kubectl is version 1.26.3, which may have incompatibilities with Kubernetes 1.23.12.\n\n* Want kubectl v1.23.12? Try 'minikube kubectl -- get pods -A'\n\n* Done! kubectl is now configured to use \"minikube\" cluster and \"default\" namespace by default\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ vim</code></p> <pre><code>Command 'vim' not found, but can be installed with:\nsudo apt install vim         # version 2:8.2.3995-1ubuntu2.13, or\nsudo apt install vim-tiny    # version 2:8.2.3995-1ubuntu2.13\nsudo apt install neovim      # version 0.6.1-3\nsudo apt install vim-athena  # version 2:8.2.3995-1ubuntu2.13\nsudo apt install vim-gtk3    # version 2:8.2.3995-1ubuntu2.13\nsudo apt install vim-nox     # version 2:8.2.3995-1ubuntu2.13\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ apt-get install vim</code></p> <pre><code>E: Could not open lock file /var/lib/dpkg/lock-frontend - open (13: Permission denied)\nE: Unable to acquire the dpkg frontend lock (/var/lib/dpkg/lock-frontend), are you root?\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ sudo apt-get install vim</code></p> <pre><code>[sudo] password for ubuntu:\nReading package lists... Done\nBuilding dependency tree... Done\nReading state information... Done\nThe following packages were automatically installed and are no longer required:\n  libflashrom1 libftdi1-2\nUse 'sudo apt autoremove' to remove them.\nThe following additional packages will be installed:\n  vim-runtime\nSuggested packages:\n  ctags vim-doc vim-scripts\nThe following NEW packages will be installed:\n  vim vim-runtime\n0 upgraded, 2 newly installed, 0 to remove and 30 not upgraded.\nNeed to get 8,568 kB of archives.\nAfter this operation, 37.6 MB of additional disk space will be used.\nDo you want to continue? [Y/n] y\nGet:1 &lt;http://in.archive.ubuntu.com/ubuntu&gt; jammy-updates/main amd64 vim-runtime a                                                                                        ll 2:8.2.3995-1ubuntu2.13 [6,834 kB]\nGet:2 &lt;http://in.archive.ubuntu.com/ubuntu&gt; jammy-updates/main amd64 vim amd64 2:8                                                                                        .2.3995-1ubuntu2.13 [1,734 kB]\nFetched 8,568 kB in 8s (1,050 kB/s)\nSelecting previously unselected package vim-runtime.\n(Reading database ... 208278 files and directories currently installed.)\nPreparing to unpack .../vim-runtime_2%3a8.2.3995-1ubuntu2.13_all.deb ...\nAdding 'diversion of /usr/share/vim/vim82/doc/help.txt to /usr/share/vim/vim82/d                                                                                        oc/help.txt.vim-tiny by vim-runtime'\nAdding 'diversion of /usr/share/vim/vim82/doc/tags to /usr/share/vim/vim82/doc/t                                                                                        ags.vim-tiny by vim-runtime'\nUnpacking vim-runtime (2:8.2.3995-1ubuntu2.13) ...\nSelecting previously unselected package vim.\nPreparing to unpack .../vim_2%3a8.2.3995-1ubuntu2.13_amd64.deb ...\nUnpacking vim (2:8.2.3995-1ubuntu2.13) ...\nSetting up vim-runtime (2:8.2.3995-1ubuntu2.13) ...\nSetting up vim (2:8.2.3995-1ubuntu2.13) ...\nupdate-alternatives: using /usr/bin/vim.basic to provide /usr/bin/vim (vim) in a                                                                                        uto mode\nupdate-alternatives: using /usr/bin/vim.basic to provide /usr/bin/vimdiff (vimdi                                                                                        ff) in auto mode\nupdate-alternatives: using /usr/bin/vim.basic to provide /usr/bin/rvim (rvim) in                                                                                         auto mode\nupdate-alternatives: using /usr/bin/vim.basic to provide /usr/bin/rview (rview)                                                                                         in auto mode\nupdate-alternatives: using /usr/bin/vim.basic to provide /usr/bin/vi (vi) in aut                                                                                        o mode\nupdate-alternatives: using /usr/bin/vim.basic to provide /usr/bin/view (view) in                                                                                         auto mode\nupdate-alternatives: using /usr/bin/vim.basic to provide /usr/bin/ex (ex) in aut                                                                                        o mode\nProcessing triggers for man-db (2.10.2-1) ...\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ touch my-ns.yaml</code> <code>ubuntu@ubuntu-VM:~$ vim my-ns.yaml</code> <code>ubuntu@ubuntu-VM:~$ cat my-ns.yaml</code></p> <pre><code>apiVersion: v1\nkind: Namespace\nmetadata:\n  name: &lt;insert-namespace-name-here&gt;\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ vim my-ns.yaml</code> <code>ubuntu@ubuntu-VM:~$ kubectl create -f my-ns.yaml</code></p> <pre><code>namespace/novgems created\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl get namespaces</code></p> <pre><code>NAME              STATUS   AGE\ndefault           Active   219d\nkube-node-lease   Active   219d\nkube-public       Active   219d\nkube-system       Active   219d\nnovgems           Active   29s\ntest              Active   23h\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ touch nginx-pod.yaml</code> <code>ubuntu@ubuntu-VM:~$ vim nginx-pod</code> <code>ubuntu@ubuntu-VM:~$ cat nginx-pod.yaml</code> <code>ubuntu@ubuntu-VM:~$ vim nginx-pod.yaml</code> <code>ubuntu@ubuntu-VM:~$ cat nginx-pod.yaml</code></p> <pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx\nspec:\n  containers:\n\n* name: nginx\n    image: nginx:1.14.2\n    ports:\n  * containerPort: 80\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ vim nginx-pod.yaml</code> <code>ubuntu@ubuntu-VM:~$ vim nginx-pod.yaml</code> <code>ubuntu@ubuntu-VM:~$ nano nginx-pod.yaml</code> <code>ubuntu@ubuntu-VM:~$ cat nginx-pod.yaml</code></p> <pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginxp\nspec:\n  containers:\n* name: nginxc\n    image: nginx:1.14.2\n    ports:\n  * containerPort: 80\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl create -f nginx-pod.yaml</code></p> <pre><code>pod/nginxp created\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl get pods</code></p> <pre><code>NAME     READY   STATUS    RESTARTS   AGE\nnginxp   1/1     Running   0          20s\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ mkdir podwithfire</code> <code>ubuntu@ubuntu-VM:~$ ls</code></p> <pre><code>Desktop        index.html.12  index.html.19  index.html.25  index.html.31  index.html.38  index.html.44  index.html.6  nginx-pod.yaml  ,ssh\nDocuments      index.html.13  index.html.2   index.html.26  index.html.32  index.html.39  index.html.45  index.html.7  Pictures        Templates\nDownloads      index.html.14  index.html.20  index.html.27  index.html.33  index.html.4   index.html.46  index.html.8  podwithfire     test\nindex.html     index.html.15  index.html.21  index.html.28  index.html.34  index.html.40  index.html.47  index.html.9  Public          Videos\nindex.html.1   index.html.16  index.html.22  index.html.29  index.html.35  index.html.41  index.html.48  Music         remoting        workspace\nindex.html.10  index.html.17  index.html.23  index.html.3   index.html.36  index.html.42  index.html.49  my-ns.yaml    remoting.jar    yaml\nindex.html.11  index.html.18  index.html.24  index.html.30  index.html.37  index.html.43  index.html.5   nginx-pod     snap\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl get pods</code></p> <pre><code>NAME     READY   STATUS    RESTARTS   AGE\nnginxp   1/1     Running   0          14m\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl delete pod nginxp</code></p> <pre><code>pod \"nginxp\" deleted\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl get pods</code></p> <pre><code>No resources found in default namespace.\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ touch twocontainer-pod.yaml</code> <code>ubuntu@ubuntu-VM:~$ nano twocontainer-pod.yaml</code> <code>ubuntu@ubuntu-VM:~$ touch twocontainer-pod.yaml</code> <code>ubuntu@ubuntu-VM:~$ cat twocontainer-pod.yaml</code></p> <pre><code>apiVersion: v1\nkind : Pod\nmetadata:\n  name: twocontainers\nspec:\n  containers:\n* name: simpleservice\n    image: nginx:1.14\n    ports:\n* containerPort: 80\n* name: shell\n    image: centos\n    command:\n  * \"bin/bash\"\n  * \"-c\"\n  * \"sleep 10000\"\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl create -f twocontainer-pod.yaml</code></p> <pre><code>error: error parsing twocontainer-pod.yaml: error converting YAML to JSON: yaml: line 9: did not find expected key\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ nano twocontainer-pod.yaml</code> <code>ubuntu@ubuntu-VM:~$ kubectl create -f twocontainer-pod.yaml</code> pod/twocontainers created <code>ubuntu@ubuntu-VM:~$ kubectl get pods</code></p> <pre><code>NAME            READY   STATUS              RESTARTS   AGE\ntwocontainers   0/2     ContainerCreating   0          17s\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl exec -it twocontainers -c simpleservice</code></p> <pre><code>error: you must specify at least one command for the container\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl exec -it twocontainers -c simpleservice bash</code></p> <pre><code>kubectl exec [POD] [COMMAND] is DEPRECATED and will be removed in a future version. Use kubectl exec [POD] -- [COMMAND] instead.\nroot@twocontainers:/# curl localhost\nbash: curl: command not found\nroot@twocontainers:/# exit\nexit\ncommand terminated with exit code 127\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl exec -it twocontainers -c shell bin/bash</code></p> <p><code>ubuntu@ubuntu-VM:~$ kubectl get namespaces</code></p> <pre><code>kubectl exec [POD] [COMMAND] is DEPRECATED and will be removed in a future version. Use kubectl exec [POD] -- [COMMAND] instead.\n[root@twocontainers /]# curl localhost\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Welcome to nginx!&lt;/title&gt;\n&lt;style&gt;\n    body {\n        width: 35em;\n        margin: 0 auto;\n        font-family: Tahoma, Verdana, Arial, sans-serif;\n    }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;\n&lt;p&gt;If you see this page, the nginx web server is successfully instal                                                                                                    led and\nworking. Further configuration is required.&lt;/p&gt;\n\n&lt;p&gt;For online documentation and support please refer to\n&lt;a href=\"http://nginx.org/\"&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;\nCommercial support is available at\n&lt;a href=\"http://nginx.com/\"&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n[root@twocontainers /]# exit\nexit\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl apply -n novegems -f twocontainer-pod.yaml</code></p> <pre><code>Error from server (NotFound): error when creating \"twocontainer-pod.yaml\": namespaces \"novegems\" not found\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl apply -n novgems -f twocontainer-pod.yaml</code></p> <pre><code>pod/twocontainers created\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl get pods --namespace=novgems</code></p> <pre><code>NAME            READY   STATUS    RESTARTS   AGE\ntwocontainers   2/2     Running   0          31s\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl get -o get json pod twocontainers</code></p> <pre><code>error: the server doesn't have a resource type \"json\"\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl get -o get yaml pod twocontainers</code></p> <pre><code>error: the server doesn't have a resource type \"yaml\"\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl get -o get yaml pod twocontainers --namespace=novgems</code></p> <pre><code>error: the server doesn't have a resource type \"yaml\"\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl get -o get pod twocontainers --namespace=novgems</code></p> <pre><code>error: unable to match a printer suitable for the output format \"get\", allowed formats are: custom-columns,custom-columns-file,go-template,go-template-file,json,jsonpath,jsonpath-as-json,jsonpath-file,name,template,templatefile,wide,yaml\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl create -f twocontainer-pod.yaml</code></p> <pre><code>Error from server (AlreadyExists): error when creating \"twocontainer-pod.yaml\": pods \"twocontainers\" already exists\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl get pods</code></p> <pre><code>NAME            READY   STATUS    RESTARTS   AGE\ntwocontainers   2/2     Running   0          45m\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl get -o json pod twocontainers</code></p> <pre><code>{\n    \"apiVersion\": \"v1\",\n    \"kind\": \"Pod\",\n    \"metadata\": {\n        \"creationTimestamp\": \"2023-11-01T05:56:00Z\",\n        \"name\": \"twocontainers\",\n        \"namespace\": \"default\",\n        \"resourceVersion\": \"129876\",\n        \"uid\": \"5f0251c4-b7fa-4c91-af6f-9b3db73b1c78\"\n    },\n    \"spec\": {\n        \"containers\": [\n            {\n                \"image\": \"nginx:1.14\",\n                \"imagePullPolicy\": \"IfNotPresent\",\n                \"name\": \"simpleservice\",\n                \"ports\": [\n                    {\n                        \"containerPort\": 80,\n                        \"protocol\": \"TCP\"\n                    }\n                ],\n                \"resources\": {},\n                \"terminationMessagePath\": \"/dev/termination-log\",\n                \"terminationMessagePolicy\": \"File\",\n                \"volumeMounts\": [\n                    {\n                        \"mountPath\": \"/var/run/secrets/kubernetes.io                                                                                                    /serviceaccount\",\n                        \"name\": \"kube-api-access-sz524\",\n                        \"readOnly\": true\n                    }\n                ]\n            },\n            {\n                \"command\": [\n                    \"bin/bash\",\n                    \"-c\",\n                    \"sleep 10000\"\n                ],\n                \"image\": \"centos\",\n                \"imagePullPolicy\": \"Always\",\n                \"name\": \"shell\",\n                \"resources\": {},\n                \"terminationMessagePath\": \"/dev/termination-log\",\n                \"terminationMessagePolicy\": \"File\",\n                \"volumeMounts\": [\n                    {\n                        \"mountPath\": \"/var/run/secrets/kubernetes.io                                                                                                    /serviceaccount\",\n                        \"name\": \"kube-api-access-sz524\",\n                        \"readOnly\": true\n                    }\n                ]\n            }\n        ],\n        \"dnsPolicy\": \"ClusterFirst\",\n        \"enableServiceLinks\": true,\n        \"nodeName\": \"minikube\",\n        \"preemptionPolicy\": \"PreemptLowerPriority\",\n        \"priority\": 0,\n        \"restartPolicy\": \"Always\",\n        \"schedulerName\": \"default-scheduler\",\n        \"securityContext\": {},\n        \"serviceAccount\": \"default\",\n        \"serviceAccountName\": \"default\",\n        \"terminationGracePeriodSeconds\": 30,\n        \"tolerations\": [\n            {\n                \"effect\": \"NoExecute\",\n                \"key\": \"node.kubernetes.io/not-ready\",\n                \"operator\": \"Exists\",\n                \"tolerationSeconds\": 300\n            },\n            {\n                \"effect\": \"NoExecute\",\n                \"key\": \"node.kubernetes.io/unreachable\",\n                \"operator\": \"Exists\",\n                \"tolerationSeconds\": 300\n            }\n        ],\n        \"volumes\": [\n            {\n                \"name\": \"kube-api-access-sz524\",\n                \"projected\": {\n                    \"defaultMode\": 420,\n                    \"sources\": [\n                        {\n                            \"serviceAccountToken\": {\n                                \"expirationSeconds\": 3607,\n                                \"path\": \"token\"\n                            }\n                        },\n                        {\n                            \"configMap\": {\n                                \"items\": [\n                                    {\n                                        \"key\": \"ca.crt\",\n                                        \"path\": \"ca.crt\"\n                                    }\n                                ],\n                                \"name\": \"kube-root-ca.crt\"\n                            }\n                        },\n                        {\n                            \"downwardAPI\": {\n                                \"items\": [\n                                    {\n                                        \"fieldRef\": {\n                                            \"apiVersion\": \"v1\",\n                                            \"fieldPath\": \"metadata.namespace\"\n                                        },\n                                        \"path\": \"namespace\"\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    },\n    \"status\": {\n        \"conditions\": [\n            {\n                \"lastProbeTime\": null,\n                \"lastTransitionTime\": \"2023-11-01T05:56:00Z\",\n                \"status\": \"True\",\n                \"type\": \"Initialized\"\n            },\n            {\n                \"lastProbeTime\": null,\n                \"lastTransitionTime\": \"2023-11-01T05:56:19Z\",\n                \"status\": \"True\",\n                \"type\": \"Ready\"\n            },\n            {\n                \"lastProbeTime\": null,\n                \"lastTransitionTime\": \"2023-11-01T05:56:19Z\",\n                \"status\": \"True\",\n                \"type\": \"ContainersReady\"\n            },\n            {\n                \"lastProbeTime\": null,\n                \"lastTransitionTime\": \"2023-11-01T05:56:00Z\",\n                \"status\": \"True\",\n                \"type\": \"PodScheduled\"\n            }\n        ],\n        \"containerStatuses\": [\n            {\n                \"containerID\": \"docker://75742bacaee21e868bd88705ff5                                                                                                    9b59be52e6e8848d5173f49c1646801b7d061\",\n                \"image\": \"centos:latest\",\n                \"imageID\": \"docker-pullable://centos@sha256:a27fd808                                                                                                    0b517143cbbbab9dfb7c8571c40d67d534bbdee55bd6c473f432b177\",\n                \"lastState\": {},\n                \"name\": \"shell\",\n                \"ready\": true,\n                \"restartCount\": 0,\n                \"started\": true,\n                \"state\": {\n                    \"running\": {\n                        \"startedAt\": \"2023-11-01T05:56:18Z\"\n                    }\n                }\n            },\n            {\n                \"containerID\": \"docker://8ac4bdcf719459b5dd77db0f82d                                                                                                    683d2451f60b837bfa1496902636ab291d1b3\",\n                \"image\": \"nginx:1.14\",\n                \"imageID\": \"docker-pullable://nginx@sha256:f7988fb6c                                                                                                    02e0ce69257d9bd9cf37ae20a60f1df7563c3a2a6abe24160306b8d\",\n                \"lastState\": {},\n                \"name\": \"simpleservice\",\n                \"ready\": true,\n                \"restartCount\": 0,\n                \"started\": true,\n                \"state\": {\n                    \"running\": {\n                        \"startedAt\": \"2023-11-01T05:56:03Z\"\n                    }\n                }\n            }\n        ],\n        \"hostIP\": \"192.168.49.2\",\n        \"phase\": \"Running\",\n        \"podIP\": \"172.17.0.3\",\n        \"podIPs\": [\n            {\n                \"ip\": \"172.17.0.3\"\n            }\n        ],\n        \"qosClass\": \"BestEffort\",\n        \"startTime\": \"2023-11-01T05:56:00Z\"\n    }\n}\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl get nodes</code></p> <pre><code>NAME       STATUS   ROLES                  AGE    VERSION\nminikube   Ready    control-plane,master   219d   v1.23.12\n</code></pre>"},{"location":"Kubernetes/kubernetes-day4/","title":"Kubernetes Day 4","text":"<p><code>ubuntu@ubuntu-VM:~$ minikube start</code> <pre><code>* minikube v1.29.0 on Ubuntu 22.04\n* Kubernetes 1.26.1 is now available. If you would like to upgrad   e, specify: --kubernetes-version=v1.26.1\n* Using the docker driver based on existing profile\n* Starting control plane node minikube in cluster minikube\n* Pulling base image ...\n* Updating the running docker \"minikube\" container ...\n! This container is having trouble accessing https://k8s.gcr.io\n* To pull new external images, you may need to configure a proxy:    https://minikube.sigs.k8s.io/docs/reference/networking/proxy/\n* Preparing Kubernetes v1.23.12 on Docker 20.10.23 ...\n* Verifying Kubernetes components...\n  - Using image gcr.io/k8s-minikube/storage-provisioner:v5\n* Enabled addons: default-storageclass, storage-provisioner\n\n! /usr/bin/kubectl is version 1.26.3, which may have incompatibilities with Kubernetes 1.23.12.\n  - Want kubectl v1.23.12? Try 'minikube kubectl -- get pods -A'\n* Done! kubectl is now configured to use \"minikube\" cluster and \"default\" namespace by default\n</code></pre> <code>ubuntu@ubuntu-VM:~$ kube ctl get pods</code> <pre><code>Command 'kube' not found, did you mean:\n  command 'kubu' from snap kubu (1.1.4)\n  command 'jube' from deb jube (2.4.2-1)\n  command 'qube' from deb avogadro-utils (1.95.1-8)\nSee 'snap info &lt;snapname&gt;' for additional versions.\n</code></pre> <code>ubuntu@ubuntu-VM:~$ kubectl get pods</code> <pre><code>NAME            READY   STATUS    RESTARTS         AGE\ntwocontainers   2/2     Running   10 (2m19s ago)   22h\n</code></pre> <code>ubuntu@ubuntu-VM:~$ kubectl delete pod ```{r} twocontainers</code> pod \"twocontainers\" deleted</p> <p><pre><code>`ubuntu@ubuntu-VM:~$ kubectl get pods`\n```{r}\nNo resources found in default namespace.\n</code></pre> <code>ubuntu@ubuntu-VM:~$ kubectl apply -f https://kubernetes.io/examples/ontend.yaml</code> <pre><code>replicaset.apps/frontend created\n</code></pre></p> <p><code>ubuntu@ubuntu-VM:~$ kubectl get rs</code> <pre><code>NAME       DESIRED   CURRENT   READY   AGE\nfrontend   3         3         0       17s\n</code></pre> <code>ubuntu@ubuntu-VM:~$ kubectl describe rs/frontend</code> <pre><code>Name:         frontend\nNamespace:    default\nSelector:     tier=frontend\nLabels:       app=guestbook\n              tier=frontend\nAnnotations:  &lt;none&gt;\nReplicas:     3 current / 3 desired\nPods Status:  3 Running / 0 Waiting / 0 Succeeded / 0 Failed\nPod Template:\n  Labels:  tier=frontend\n  Containers:\n   php-redis:\n    Image:        gcr.io/google_samples/gb-frontend:v3\n    Port:         &lt;none&gt;\n    Host Port:    &lt;none&gt;\n    Environment:  &lt;none&gt;\n    Mounts:       &lt;none&gt;\n  Volumes:        &lt;none&gt;\nEvents:\n  Type    Reason            Age   From                   Message\n  ----    ------            ----  ----                   -------\n  Normal  SuccessfulCreate  52s   replicaset-controller  Created poddt\n  Normal  SuccessfulCreate  52s   replicaset-controller  Created pod52\n  Normal  SuccessfulCreate  52s   replicaset-controller  Created podfm\n</code></pre> <code>ubuntu@ubuntu-VM:~$ kubectl get pods</code> <pre><code>NAME             READY   STATUS    RESTARTS   AGE\nfrontend-bh4fm   1/1     Running   0          98s\nfrontend-lmk52   1/1     Running   0          98s\nfrontend-q6xdt   1/1     Running   0          98s\n\n````ubuntu@ubuntu-VM:~$ kubectl get pods frontend-b2zdv -o yaml`\n```{r}\nError from server (NotFound): pods \"frontend-b2zdv\" not found\n</code></pre> <code>ubuntu@ubuntu-VM:~$ kubectl get pods frontend-bh4fm -o yaml</code> <pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  creationTimestamp: \"2023-11-02T04:37:41Z\"\n  generateName: frontend-\n  labels:\n    tier: frontend\n  name: frontend-bh4fm\n  namespace: default\n  ownerReferences:\n  - apiVersion: apps/v1\n    blockOwnerDeletion: true\n    controller: true\n    kind: ReplicaSet\n    name: frontend\n    uid: e961c8fd-3ea7-4572-9270-cda6b24309d9\n  resourceVersion: \"187365\"\n  uid: 6ff854b5-f861-433c-aba7-857091da35ad\nspec:\n  containers:\n  - image: gcr.io/google_samples/gb-frontend:v3\n    imagePullPolicy: IfNotPresent\n    name: php-redis\n    resources: {}\n    terminationMessagePath: /dev/termination-log\n    terminationMessagePolicy: File\n    volumeMounts:\n    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount\n      name: kube-api-access-r928w\n      readOnly: true\n  dnsPolicy: ClusterFirst\n  enableServiceLinks: true\n  nodeName: minikube\n  preemptionPolicy: PreemptLowerPriority\n  priority: 0\n  restartPolicy: Always\n  schedulerName: default-scheduler\n  securityContext: {}\n  serviceAccount: default\n  serviceAccountName: default\n  terminationGracePeriodSeconds: 30\n  tolerations:\n  - effect: NoExecute\n    key: node.kubernetes.io/not-ready\n    operator: Exists\n    tolerationSeconds: 300\n  - effect: NoExecute\n    key: node.kubernetes.io/unreachable\n    operator: Exists\n    tolerationSeconds: 300\n  volumes:\n  - name: kube-api-access-r928w\n    projected:\n      defaultMode: 420\n      sources:\n      - serviceAccountToken:\n          expirationSeconds: 3607\n          path: token\n      - configMap:\n          items:\n          - key: ca.crt\n            path: ca.crt\n          name: kube-root-ca.crt\n      - downwardAPI:\n          items:\n          - fieldRef:\n              apiVersion: v1\n              fieldPath: metadata.namespace\n            path: namespace\nstatus:\n  conditions:\n  - lastProbeTime: null\n    lastTransitionTime: \"2023-11-02T04:37:41Z\"\n    status: \"True\"\n    type: Initialized\n  - lastProbeTime: null\n    lastTransitionTime: \"2023-11-02T04:38:05Z\"\n    status: \"True\"\n    type: Ready\n  - lastProbeTime: null\n    lastTransitionTime: \"2023-11-02T04:38:05Z\"\n    status: \"True\"\n    type: ContainersReady\n  - lastProbeTime: null\n    lastTransitionTime: \"2023-11-02T04:37:41Z\"\n    status: \"True\"\n    type: PodScheduled\n  containerStatuses:\n  - containerID: docker://bd9b381d8404c84095ae265baa913d4cd0fa00505d3ce9e7ff\n    image: gcr.io/google_samples/gb-frontend:v3\n    imageID: docker-pullable://gcr.io/google_samples/gb-frontend@shaf6a18586d6751e8963cf684c27b9873ca926df22cdf88ed4452615\n    lastState: {}\n    name: php-redis\n    ready: true\n    restartCount: 0\n    started: true\n    state:\n      running:\n        startedAt: \"2023-11-02T04:38:04Z\"\n  hostIP: 192.168.49.2\n  phase: Running\n  podIP: 172.17.0.2\n  podIPs:\n  - ip: 172.17.0.2\n  qosClass: BestEffort\n  startTime: \"2023-11-02T04:37:41Z\"\n</code></pre> <code>ubuntu@ubuntu-VM:~$ kubectl apply -f https://kubernetes.io/examples/ml</code> <pre><code>pod/pod1 created\npod/pod2 created\n</code></pre></p> <p><code>ubuntu@ubuntu-VM:~$ kubectl get pods</code> <pre><code>NAME             READY   STATUS    RESTARTS   AGE\nfrontend-bh4fm   1/1     Running   0          54m\nfrontend-lmk52   1/1     Running   0          54m\nfrontend-q6xdt   1/1     Running   0          54m\n</code></pre> <code>ubuntu@ubuntu-VM:~$ kubectl get pods</code> <pre><code>NAME             READY   STATUS    RESTARTS   AGE\nfrontend-bh4fm   1/1     Running   0          55m\nfrontend-lmk52   1/1     Running   0          55m\nfrontend-q6xdt   1/1     Running   0          55m\n</code></pre> <code>ubuntu@ubuntu-VM:~$ kubectl apply -f https://kubernetes.io/examples/ml</code> <pre><code>pod/pod1 created\npod/pod2 created\n</code></pre> <code>ubuntu@ubuntu-VM:~$ kubectl apply -f https://kubernetes.io/examples/ontend.yaml</code> <pre><code>replicaset.apps/frontend unchanged\n</code></pre> <code>ubuntu@ubuntu-VM:~$ kubectl get pods</code> <pre><code>NAME             READY   STATUS    RESTARTS   AGE\nfrontend-bh4fm   1/1     Running   0          55m\nfrontend-lmk52   1/1     Running   0          55m\nfrontend-q6xdt   1/1     Running   0          55m\n</code></pre> <code>ubuntu@ubuntu-VM:~$ kubectl delete rs frontend</code> <pre><code>replicaset.apps \"frontend\" deleted\n</code></pre> <code>ubuntu@ubuntu-VM:~$ kubectl get pods</code> <pre><code>No resources found in default namespace.\n</code></pre> <code>ubuntu@ubuntu-VM:~$ kubectl apply -f https://kubernetes.io/examples/ml</code> <pre><code>pod/pod1 created\npod/pod2 created\n</code></pre> <code>ubuntu@ubuntu-VM:~$ kubectl get pods</code> <pre><code>NAME   READY   STATUS    RESTARTS   AGE\npod1   1/1     Running   0          4s\npod2   1/1     Running   0          4s\n</code></pre> <code>ubuntu@ubuntu-VM:~$ touch frontendrs.yml</code> <code>ubuntu@ubuntu-VM:~$ nano frontendrs.yml</code> <code>ubuntu@ubuntu-VM:~$ kubectl create -f frontendrs.yml</code> <pre><code>replicaset.apps/frontend created\n</code></pre> <code>ubuntu@ubuntu-VM:~$ kubectl get pods</code> <pre><code>NAME   READY   STATUS    RESTARTS   AGE\npod1   1/1     Running   0          4m10s\npod2   1/1     Running   0          4m10s\n</code></pre> <code>ubuntu@ubuntu-VM:~$ kubectl get rs</code> <pre><code>NAME       DESIRED   CURRENT   READY   AGE\nfrontend   2         2         2       15s\n</code></pre> <code>ubuntu@ubuntu-VM:~$ kubectl describe rs/frontend</code> <pre><code>Name:         frontend\nNamespace:    default\nSelector:     tier=frontend\nLabels:       app=guestbook\n              tier=frontend\nAnnotations:  &lt;none&gt;\nReplicas:     2 current / 2 desired\nPods Status:  2 Running / 0 Waiting / 0 Succeeded / 0 Failed\nPod Template:\n  Labels:  tier=frontend\n  Containers:\n   php-redis:\n    Image:        gcr.io/google_samples/gb-frontend:v3\n    Port:         &lt;none&gt;\n    Host Port:    &lt;none&gt;\n    Environment:  &lt;none&gt;\n    Mounts:       &lt;none&gt;\n  Volumes:        &lt;none&gt;\nEvents:           &lt;none&gt;\n</code></pre> <code>ubuntu@ubuntu-VM:~$ kubectl create deployment --help</code> <pre><code>Create a deployment with the specified name.\n\nAliases:\ndeployment, deploy\n\nExamples:\n  # Create a deployment named my-dep that runs the busybox image\n  kubectl create deployment my-dep --image=busybox\n\n  # Create a deployment with a command\n  kubectl create deployment my-dep --image=busybox -- date\n\n  # Create a deployment named my-dep that runs the nginx image with 3 replicas\n  kubectl create deployment my-dep --image=nginx --replicas=3\n\n  # Create a deployment named my-dep that runs the busybox image and expose port 5701\n  kubectl create deployment my-dep --image=busybox --port=5701\n\nOptions:\n    --allow-missing-template-keys=true:\n        If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.\n\n    --dry-run='none':\n        Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.\n\n    --field-manager='kubectl-create':\n        Name of the manager used to track field ownership.\n\n    --image=[]:\n        Image names to run.\n\n    -o, --output='':\n        Output format. One of: (json, yaml, name, go-template, go-template-file, template, templatefile, jsonpath, jsonpath-as-json, jsonpath-file).\n\n    --port=-1:\n        The port that this container exposes.\n\n    -r, --replicas=1:\n        Number of replicas to create. Default is 1.\n\n    --save-config=false:\n        If true, the configuration of current object will be saved in its annotation. Otherwise, the annotation will be unchanged. This flag is useful when you want to perform kubectl apply on this object in the future.\n\n    --show-managed-fields=false:\n        If true, keep the managedFields when printing objects in JSON or YAML format.\n\n    --template='':\n        Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].\n\n    --validate='strict':\n        Must be one of: strict (or true), warn, ignore (or false). \"true\" or \"strict\" will use a schema to validate the input and fail the request if invalid. It will perform server side validation if ServerSideFieldValidation is enabled on the api-server, but will fall back to less reliable client-side validation if not.             \"warn\" will warn about unknown or duplicate fields without blocking the request if server-side field validation is enabled on the API server, and behave as \"ignore\" otherwise.             \"false\" or \"ignore\" will not perform any schema validation, silently dropping any unknown or duplicate fields.\n\nUsage:\n  kubectl create deployment NAME --image=image -- [COMMAND] [args...] [options]\n\nUse \"kubectl options\" for a list of global command-line options (applies to all commands).\n</code></pre> <code>ubuntu@ubuntu-VM:~$ kubectl create deployment my-dep --image=nginx --port=8080</code> <pre><code>deployment.apps/my-dep created\n</code></pre> <code>ubuntu@ubuntu-VM:~$ kubectl get deployment</code> <pre><code>NAME     READY   UP-TO-DATE   AVAILABLE   AGE\nmy-dep   1/1     1            1           40s\n</code></pre> <code>ubuntu@ubuntu-VM:~$ curl localhost:8080</code> <pre><code>&lt;html&gt;&lt;head&gt;&lt;meta http-equiv='refresh' content='1;url=/login?from=%2F'/&gt;&lt;script&gt;window.location.replace('/login?from=%2F');&lt;/script&gt;&lt;/head&gt;&lt;body style='background-color:white; color:white;'&gt;\n\n\nAuthentication required\n&lt;!--\n--&gt;\n\n&lt;/body&gt;&lt;/html&gt;                                                    \n</code></pre> <code>ubuntu@ubuntu-VM:~$ kubectl get deployment</code> <pre><code>NAME     READY   UP-TO-DATE   AVAILABLE   AGE\nmy-dep   1/1     1            1           7m48s\n</code></pre> <code>ubuntu@ubuntu-VM:~$ kubectl get pods</code> <pre><code>NAME                      READY   STATUS    RESTARTS   AGE\nmy-dep-6d55d579d5-9xrx9   1/1     Running   0          7m57s\npod1                      1/1     Running   0          51m\npod2                      1/1     Running   0          51m\n</code></pre> <code>ubuntu@ubuntu-VM:~$ kubectl describe my-dep-6d55d579d5-9xrx9</code> <pre><code>error: the server doesn't have a resource type \"my-dep-6d55d579d5-9xrx9\"\n</code></pre> <code>ubuntu@ubuntu-VM:~$ kubectl describe pod my-dep-6d55d579d5-9xrx9</code> <pre><code>Name:             my-dep-6d55d579d5-9xrx9\nNamespace:        default\nPriority:         0\nService Account:  default\nNode:             minikube/192.168.49.2\nStart Time:       Thu, 02 Nov 2023 11:48:25 +0530\nLabels:           app=my-dep\n                  pod-template-hash=6d55d579d5\nAnnotations:      &lt;none&gt;\nStatus:           Running\nIP:               172.17.0.6\nIPs:\n  IP:           172.17.0.6\nControlled By:  ReplicaSet/my-dep-6d55d579d5\nContainers:\n  nginx:\n    Container ID:   docker://f7d3a488297b7188275207dc5400ea08764d462d7c32c24104b50aa7aca155bf\n    Image:          nginx\n    Image ID:       docker-pullable://nginx@sha256:86e53c4c16a6a276b204b0fd3a8143d86547c967dc8258b3d47c3a21bb68d3c6\n    Port:           8080/TCP\n    Host Port:      0/TCP\n    State:          Running\n      Started:      Thu, 02 Nov 2023 11:48:40 +0530\n    Ready:          True\n    Restart Count:  0\n    Environment:    &lt;none&gt;\n    Mounts:\n      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-52dkp (ro)\nConditions:\n  Type              Status\n  Initialized       True\n  Ready             True\n  ContainersReady   True\n  PodScheduled      True\nVolumes:\n  kube-api-access-52dkp:\n    Type:                    Projected (a volume that contains injected data from multiple sources)\n    TokenExpirationSeconds:  3607\n    ConfigMapName:           kube-root-ca.crt\n    ConfigMapOptional:       &lt;nil&gt;\n    DownwardAPI:             true\nQoS Class:                   BestEffort\nNode-Selectors:              &lt;none&gt;\nTolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s\n                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s\nEvents:\n  Type    Reason     Age    From               Message\n  ----    ------     ----   ----               -------\n  Normal  Scheduled  8m35s  default-scheduler  Successfully assigned default/my-dep-6d55d579d5-9xrx9 to minikube\n  Normal  Pulling    8m35s  kubelet            Pulling image \"nginx\"\n  Normal  Pulled     8m22s  kubelet            Successfully pulled image \"nginx\" in 13.176684961s\n  Normal  Created    8m21s  kubelet            Created container nginx\n  Normal  Started    8m21s  kubelet            Started container nginx\n</code></pre> <code>ubuntu@ubuntu-VM:~$ kubectl exec -it my-dep-6d55d579d5-9xrx9 -c nginx bash</code> <pre><code>kubectl exec [POD] [COMMAND] is DEPRECATED and will be removed in a future version. Use kubectl exec [POD] -- [COMMAND] instead.\nroot@my-dep-6d55d579d5-9xrx9:/# curl localhost\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Welcome to nginx!&lt;/title&gt;\n&lt;style&gt;\nhtml { color-scheme: light dark; }\nbody { width: 35em; margin: 0 auto;\nfont-family: Tahoma, Verdana, Arial, sans-serif; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;\n&lt;p&gt;If you see this page, the nginx web server is successfully installed and\nworking. Further configuration is required.&lt;/p&gt;\n\n&lt;p&gt;For online documentation and support please refer to\n&lt;a href=\"http://nginx.org/\"&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;\nCommercial support is available at\n&lt;a href=\"http://nginx.com/\"&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nroot@my-dep-6d55d579d5-9xrx9:/# exit\nexit\n</code></pre></p> <p><code>ubuntu@ubuntu-VM:~$ kubectl get cluster-info</code> <pre><code>error: the server doesn't have a resource type \"cluster-info\"\n</code></pre> <code>ubuntu@ubuntu-VM:~$ kubectl cluster-info</code> <pre><code>Kubernetes control plane is running at https://192.168.49.2:8443\nCoreDNS is running at https://192.168.49.2:8443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy\n\nTo further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.\n</code></pre> <code>ubuntu@ubuntu-VM:~$ kubectl get nodes</code> <pre><code>NAME       STATUS   ROLES                  AGE    VERSION\nminikube   Ready    control-plane,master   220d   v1.23.12\n</code></pre> <code>ubuntu@ubuntu-VM:~$ kubectl get pods</code> <pre><code>NAME                      READY   STATUS    RESTARTS   AGE\nmy-dep-6d55d579d5-9xrx9   1/1     Running   0          36m\npod1                      1/1     Running   0          79m\npod2                      1/1     Running   0          79m\n</code></pre> <code>ubuntu@ubuntu-VM:~$ kubectl get deployments</code> <pre><code>NAME     READY   UP-TO-DATE   AVAILABLE   AGE\nmy-dep   1/1     1            1           36m\n</code></pre> <code>ubuntu@ubuntu-VM:~$ kubectl get svc</code> <pre><code>NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE\nkubernetes   ClusterIP   10.96.0.1    &lt;none&gt;        443/TCP   220d\n</code></pre></p>"},{"location":"Kubernetes/kubernetes-day5/","title":"Kubernetes day5","text":"<p><code>ubuntu@ubuntu-VM:~$ start minikube</code> <pre><code>Command 'start' not found, did you mean:\n  command 'stars' from snap stars (2.7jrc3)\n  command 'stat' from deb coreutils (8.32-4.1ubuntu1)\n  command 'startx' from deb xinit (1.4.1-0ubuntu4)\n  command 'tart' from deb tart (3.10-1build1)\n  command 'rstart' from deb x11-session-utils (7.7+4build2)\n  command 'kstart' from deb kde-cli-tools (4:5.24.4-0ubuntu1)\nSee 'snap info &lt;snapname&gt;' for additional versions.\n</code></pre></p> <p><code>ubuntu@ubuntu-VM:~$ minikube start</code> <pre><code>* minikube v1.29.0 on Ubuntu 22.04\n* Kubernetes 1.26.1 is now available. If you would like to upgrade, ubernetes-version=v1.26.1\n* minikube 1.31.2 is available! Download it: https://github.com/kubeube/releases/tag/v1.31.2\n* To disable this notice, run: 'minikube config set WantUpdateNotifi'\n\n* Using the docker driver based on existing profile\n* Starting control plane node minikube in cluster minikube\n* Pulling base image ...\n* Updating the running docker \"minikube\" container ...\n* Preparing Kubernetes v1.23.12 on Docker 20.10.23 ...\n* Verifying Kubernetes components...\n  - Using image gcr.io/k8s-minikube/storage-provisioner:v5\n* Enabled addons: storage-provisioner, default-storageclass\n\n! /usr/bin/kubectl is version 1.26.3, which may have incompatibilitirnetes 1.23.12.\n  - Want kubectl v1.23.12? Try 'minikube kubectl -- get pods -A'\n* Done! kubectl is now configured to use \"minikube\" cluster and \"deface by default\n</code></pre></p> <p><code>ubuntu@ubuntu-VM:~$ minikube dashboard</code> <pre><code>* Enabling dashboard ...\n  - Using image docker.io/kubernetesui/dashboard:v2.7.0\n  - Using image docker.io/kubernetesui/metrics-scraper:v1.0.8\n* Some dashboard features require the metrics-server addon. To enable all features please run:\n\n        minikube addons enable metrics-server\n\n\n* Verifying dashboard health ...\n* Launching proxy ...\n* Verifying proxy health ...\n* Opening http://127.0.0.1:39617/api/v1/namespaces/kubernetes-dashboard/services/http:kubernetes-dashboard:/proxy/ in your default browser...\n/usr/bin/xdg-open: 882: www-browser: not found\n/usr/bin/xdg-open: 882: links2: not found\n/usr/bin/xdg-open: 882: elinks: not found\n/usr/bin/xdg-open: 882: links: not found\n/usr/bin/xdg-open: 882: lynx: not found\n/usr/bin/xdg-open: 882: w3m: not found\nxdg-open: no method available for opening 'http://127.0.0.1:39617/api/v1/namespaces/kubernetes-dashboard/services/http:kubernetes-dashboard:/proxy/'\n\nX Exiting due to HOST_BROWSER: failed to open browser: exit status 3\n</code></pre></p> <p><code>ubuntu@ubuntu-VM:~$ kubectl create deployment</code> <pre><code> hello-node --image=registry.k8s.io/e2e-test-images/agnhost:2.39 -- /agnhost netexec --http-port=8080\ndeployment.apps/hello-node created\n</code></pre></p> <p><code>ubuntu@ubuntu-VM:~$ kubectl get deployments</code> <pre><code>NAME         READY   UP-TO-DATE   AVAILABLE   AGE\nhello-node   1/1     1            1           13s\nmy-dep       1/1     1            1           22h\n</code></pre></p> <p><code>ubuntu@ubuntu-VM:~$ kubectl get pods</code> <pre><code>NAME                         READY   STATUS    RESTARTS      AGE\nhello-node-cdcf64657-9chvx   1/1     Running   0             20s\nmy-dep-6d55d579d5-9xrx9      1/1     Running   2 (19m ago)   22h\npod1                         1/1     Running   2 (19m ago)   23h\npod2                         1/1     Running   2 (19m ago)   23h\n</code></pre></p> <p><code>ubuntu@ubuntu-VM:~$ kubectl get events</code> <pre><code>LAST SEEN   TYPE      REASON              OBJECT                            MESSAGE\n36s         Normal    Scheduled           pod/hello-node-cdcf64657-9chvx    Successfully assigned default/hello-node-cdcf64657-9chvx to minikube\n35s         Normal    Pulling             pod/hello-node-cdcf64657-9chvx    Pulling image \"registry.k8s.io/e2e-test-images/agnhost:2.39\"\n29s         Normal    Pulled              pod/hello-node-cdcf64657-9chvx    Successfully pulled image \"registry.k8s.io/e2e-test-images/agnhost:2.39\" in 6.527180476s\n28s         Normal    Created             pod/hello-node-cdcf64657-9chvx    Created container agnhost\n28s         Normal    Started             pod/hello-node-cdcf64657-9chvx    Started container agnhost\n36s         Normal    SuccessfulCreate    replicaset/hello-node-cdcf64657   Created pod: hello-node-cdcf64657-9chvx\n36s         Normal    ScalingReplicaSet   deployment/hello-node             Scaled up replica set hello-node-cdcf64657 to 1\n19m         Normal    Starting            node/minikube             \n18m         Normal    RegisteredNode      node/minikube                     Node minikube event: Registered Node minikube in Controller\n19m         Normal    Pulling             pod/my-dep-6d55d579d5-9xrx9       Pulling image \"nginx\"\n19m         Normal    Created             pod/my-dep-6d55d579d5-9xrx9       Created container nginx\n19m         Normal    Started             pod/my-dep-6d55d579d5-9xrx9       Started container nginx\n19m         Normal    SandboxChanged      pod/my-dep-6d55d579d5-9xrx9       Pod sandbox changed, it will be killed and re-created.\n19m         Normal    Pulled              pod/my-dep-6d55d579d5-9xrx9       Successfully pulled image \"nginx\" in 2.74658657s\n19m         Warning   FailedSync          pod/my-dep-6d55d579d5-9xrx9       error determining status: rpc error: code = Unknown desc = Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?\n19m         Normal    Pulled              pod/my-dep-6d55d579d5-9xrx9       Successfully pulled image \"nginx\" in 2.774821453s\n19m         Normal    Pulled              pod/pod1                          Container image \"gcr.io/google-samples/hello-app:2.0\" already present on machine\n19m         Normal    Created             pod/pod1                          Created container hello1\n19m         Normal    Started             pod/pod1                          Started container hello1\n19m         Normal    SandboxChanged      pod/pod1                          Pod sandbox changed, it will be killed and re-created.\n19m         Normal    Pulled              pod/pod2                          Container image \"gcr.io/google-samples/hello-app:1.0\" already present on machine\n19m         Normal    Created             pod/pod2                          Created container hello2\n19m         Normal    Started             pod/pod2                          Started container hello2\n19m         Normal    SandboxChanged      pod/pod2                          Pod sandbox changed, it will be killed and re-created.\n19m         Warning   FailedSync          pod/pod2                          error determining status: rpc error: code = Unknown desc = Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?\n</code></pre></p> <p><code>ubuntu@ubuntu-VM:~$ kubectl config view</code> <pre><code>apiVersion: v1\nclusters:\n- cluster:\n    certificate-authority: /home/ubuntu/.minikube/ca.crt\n    extensions:\n    - extension:\n        last-update: Fri, 03 Nov 2023 09:51:02 IST\n        provider: minikube.sigs.k8s.io\n        version: v1.29.0\n      name: cluster_info\n    server: https://192.168.49.2:8443\n  name: minikube\ncontexts:\n- context:\n    cluster: minikube\n    extensions:\n    - extension:\n        last-update: Fri, 03 Nov 2023 09:51:02 IST\n        provider: minikube.sigs.k8s.io\n        version: v1.29.0\n      name: context_info\n    namespace: default\n    user: minikube\n  name: minikube\ncurrent-context: minikube\nkind: Config\npreferences: {}\nusers:\n- name: minikube\n  user:\n    client-certificate: /home/ubuntu/.minikube/profiles/minikube/client.crt\n    client-key: /home/ubuntu/.minikube/profiles/minikube/client.key\n</code></pre></p> <p><code>ubuntu@ubuntu-VM:~$ kubectl logs hello-node-cdcf64657-9chvx</code> <pre><code>I1103 04:39:41.218384       1 log.go:195] Started HTTP server on port 8080\nI1103 04:39:41.218975       1 log.go:195] Started UDP server on port  8081\n</code></pre></p> <p><code>ubuntu@ubuntu-VM:~$ kubectl proxy</code> <pre><code>Starting to serve on 127.0.0.1:8001\n\n&lt;--------new session----------&gt;\n</code></pre></p> <p><code>ubuntu@ubuntu-VM:~$ curl http://localhost:8001/version</code> <pre><code>{\n  \"major\": \"1\",\n  \"minor\": \"23\",\n  \"gitVersion\": \"v1.23.12\",\n  \"gitCommit\": \"c6939792865ef0f70f92006081690d77411c8ed5\",\n  \"gitTreeState\": \"clean\",\n  \"buildDate\": \"2022-09-21T12:13:07Z\",\n  \"goVersion\": \"go1.17.13\",\n  \"compiler\": \"gc\",\n  \"platform\": \"linux/amd64\"\n</code></pre></p> <p><code>ubuntu@ubuntu-VM:~$ kubectl apply -f https://k8s.io/examples/controllers/nginx-deployment.yaml</code></p> <pre><code>deployment.apps/nginx-deployment created\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl get deployments</code> <pre><code>NAME               READY   UP-TO-DATE   AVAILABLE   AGE\nhello-node         1/1     1            1           54m\nmy-dep             1/1     1            1           23h\nnginx-deployment   3/3     3            3           16s\n</code></pre></p> <p><code>ubuntu@ubuntu-VM:~$ kubectl rollout status deployment/nginx-deployment</code> <pre><code>deployment \"nginx-deployment\" successfully rolled out\n</code></pre></p> <p><code>ubuntu@ubuntu-VM:~$ kubectl get rs</code> <pre><code>NAME                         DESIRED   CURRENT   READY   AGE\nfrontend                     2         2         2       23h\nhello-node-cdcf64657         1         1         1       55m\nmy-dep-6d55d579d5            1         1         1       23h\nnginx-deployment-9456bbbf9   3         3         3       86s\n</code></pre></p> <p><code>ubuntu@ubuntu-VM:~$ kubectl get pods --show-labels</code> <pre><code>NAME                               READY   STATUS    RESTARTS      A                                                                                                    GE    LABELS\nhello-node-cdcf64657-9chvx         1/1     Running   0             5                                                                                                    6m    app=hello-node,pod-template-hash=cdcf64657\nmy-dep-6d55d579d5-9xrx9            1/1     Running   2 (75m ago)   2                                                                                                    3h    app=my-dep,pod-template-hash=6d55d579d5\nnginx-deployment-9456bbbf9-7hkg5   1/1     Running   0             1                                                                                                    13s   app=nginx,pod-template-hash=9456bbbf9\nnginx-deployment-9456bbbf9-fgmhc   1/1     Running   0             1                                                                                                    13s   app=nginx,pod-template-hash=9456bbbf9\nnginx-deployment-9456bbbf9-ndxrr   1/1     Running   0             1                                                                                                    13s   app=nginx,pod-template-hash=9456bbbf9\npod1                               1/1     Running   2 (75m ago)   2                                                                                                    4h    tier=frontend\npod2                               1/1     Running   2 (75m ago)   2                                                                                                    4h    tier=frontend\n</code></pre></p> <p><code>ubuntu@ubuntu-VM:~$ kubectl set image deployment.v1.apps/nginx-deployment nginx=nginx:1.16.1</code> <pre><code>deployment.apps/nginx-deployment image updated\n</code></pre></p> <p><code>ubuntu@ubuntu-VM:~$ kubectl edit deployment/nginx-deployment</code> <pre><code>Edit cancelled, no changes made.\n</code></pre></p> <p><code>ubuntu@ubuntu-VM:~$ kubectl rollout status deployment/nginx-deployment</code> <pre><code>deployment \"nginx-deployment\" successfully rolled out\n</code></pre></p> <p><code>ubuntu@ubuntu-VM:~$ kubectl get rs</code> <pre><code>NAME                         DESIRED   CURRENT   READY   AGE\nfrontend                     2         2         2       23h\nhello-node-cdcf64657         1         1         1       58m\nmy-dep-6d55d579d5            1         1         1       23h\nnginx-deployment-9456bbbf9   0         0         0       4m15s\nnginx-deployment-ff6655784   3         3         3       107s\n</code></pre></p> <p><code>ubuntu@ubuntu-VM:~$ kubectl get pods</code> <pre><code>NAME                               READY   STATUS    RESTARTS      AGE\nhello-node-cdcf64657-9chvx         1/1     Running   0             59m\nmy-dep-6d55d579d5-9xrx9            1/1     Running   2 (77m ago)   23h\nnginx-deployment-ff6655784-4dk7k   1/1     Running   0             109s\nnginx-deployment-ff6655784-thfjl   1/1     Running   0             108s\nnginx-deployment-ff6655784-zg86c   1/1     Running   0             2m\npod1                               1/1     Running   2 (77m ago)   24h\npod2                               1/1     Running   2 (77m ago)   24h\n</code></pre></p> <p><code>ubuntu@ubuntu-VM:~$ kubectl describe deployments</code> <pre><code>\n</code></pre></p> <p><code>ubuntu@ubuntu-VM:~$ kubectl set image deployment/nginx-deployment nginx=nginx:1.161</code> <pre><code>Name:                   hello-node\nNamespace:              default\nCreationTimestamp:      Fri, 03 Nov 2023 10:09:33 +0530\nLabels:                 app=hello-node\nAnnotations:            deployment.kubernetes.io/revision: 1\nSelector:               app=hello-node\nReplicas:               1 desired | 1 updated | 1 total | 1 available | 0 un                                                                                            available\nStrategyType:           RollingUpdate\nMinReadySeconds:        0\nRollingUpdateStrategy:  25% max unavailable, 25% max surge\nPod Template:\n  Labels:  app=hello-node\n  Containers:\n   agnhost:\n    Image:      registry.k8s.io/e2e-test-images/agnhost:2.39\n    Port:       &lt;none&gt;\n    Host Port:  &lt;none&gt;\n    Command:\n      /agnhost\n      netexec\n      --http-port=8080\n    Environment:  &lt;none&gt;\n    Mounts:       &lt;none&gt;\n  Volumes:        &lt;none&gt;\nConditions:\n  Type           Status  Reason\n  ----           ------  ------\n  Available      True    MinimumReplicasAvailable\n  Progressing    True    NewReplicaSetAvailable\nOldReplicaSets:  &lt;none&gt;\nNewReplicaSet:   hello-node-cdcf64657 (1/1 replicas created)\nEvents:\n  Type    Reason             Age   From                   Message\n  ----    ------             ----  ----                   -------\n  Normal  ScalingReplicaSet  60m   deployment-controller  Scaled up replica                                                                                             set hello-node-cdcf64657 to 1\n\n\nName:                   my-dep\nNamespace:              default\nCreationTimestamp:      Thu, 02 Nov 2023 11:48:25 +0530\nLabels:                 app=my-dep\nAnnotations:            deployment.kubernetes.io/revision: 1\nSelector:               app=my-dep\nReplicas:               1 desired | 1 updated | 1 total | 1 available | 0 un                                                                                            available\nStrategyType:           RollingUpdate\nMinReadySeconds:        0\nRollingUpdateStrategy:  25% max unavailable, 25% max surge\nPod Template:\n  Labels:  app=my-dep\n  Containers:\n   nginx:\n    Image:        nginx\n    Port:         8080/TCP\n    Host Port:    0/TCP\n    Environment:  &lt;none&gt;\n    Mounts:       &lt;none&gt;\n  Volumes:        &lt;none&gt;\nConditions:\n  Type           Status  Reason\n  ----           ------  ------\n  Available      True    MinimumReplicasAvailable\n  Progressing    True    NewReplicaSetAvailable\nOldReplicaSets:  &lt;none&gt;\nNewReplicaSet:   my-dep-6d55d579d5 (1/1 replicas created)\nEvents:          &lt;none&gt;\n\n\nName:                   nginx-deployment\nNamespace:              default\nCreationTimestamp:      Fri, 03 Nov 2023 11:04:06 +0530\nLabels:                 app=nginx\nAnnotations:            deployment.kubernetes.io/revision: 2\nSelector:               app=nginx\nReplicas:               3 desired | 3 updated | 3 total | 3 available | 0 un                                                                                            available\nStrategyType:           RollingUpdate\nMinReadySeconds:        0\nRollingUpdateStrategy:  25% max unavailable, 25% max surge\nPod Template:\n  Labels:  app=nginx\n  Containers:\n   nginx:\n    Image:        nginx:1.16.1\n    Port:         80/TCP\n    Host Port:    0/TCP\n    Environment:  &lt;none&gt;\n    Mounts:       &lt;none&gt;\n  Volumes:        &lt;none&gt;\nConditions:\n  Type           Status  Reason\n  ----           ------  ------\n  Available      True    MinimumReplicasAvailable\n  Progressing    True    NewReplicaSetAvailable\nOldReplicaSets:  &lt;none&gt;\nNewReplicaSet:   nginx-deployment-ff6655784 (3/3 replicas created)\nEvents:\n  Type    Reason             Age    From                   Message\n  ----    ------             ----   ----                   -------\n  Normal  ScalingReplicaSet  5m41s  deployment-controller  Scaled up replica                                                                                             set nginx-deployment-9456bbbf9 to 3\n  Normal  ScalingReplicaSet  3m13s  deployment-controller  Scaled up replica                                                                                             set nginx-deployment-ff6655784 to 1\n  Normal  ScalingReplicaSet  3m2s   deployment-controller  Scaled down repli                                                                                            ca set nginx-deployment-9456bbbf9 to 2\n  Normal  ScalingReplicaSet  3m2s   deployment-controller  Scaled up replica                                                                                             set nginx-deployment-ff6655784 to 2\n  Normal  ScalingReplicaSet  3m1s   deployment-controller  Scaled down repli                                                                                            ca set nginx-deployment-9456bbbf9 to 1\n  Normal  ScalingReplicaSet  3m1s   deployment-controller  Scaled up replica                                                                                             set nginx-deployment-ff6655784 to 3\n  Normal  ScalingReplicaSet  3m     deployment-controller  Scaled down repli                                                                                            ca set nginx-deployment-9456bbbf9 to 0\n  deployment.apps/nginx-deployment image updated\n</code></pre></p> <p><code>ubuntu@ubuntu-VM:~$ kubectl rollout status deployment/nginx-deployment</code> <pre><code>Waiting for deployment \"nginx-deployment\" rollout to finish: 1 out of 3 new                                                                                             replicas have been updated...\n</code></pre></p> <p><code>ubuntu@ubuntu-VM:~$ kubectl rollout status deployment/nginx-deployment</code> <pre><code>Waiting for deployment \"nginx-deployment\" rollout to finish: 1 out of 3 new                                                                                             replicas have been updated...\n^C\n</code></pre></p> <p><code>ubuntu@ubuntu-VM:~$ kubectl rollout status deployment/nginx-deployment</code> <pre><code>Waiting for deployment \"nginx-deployment\" rollout to finish: 1 out of 3 new                                                                                             replicas have been updated...\n</code></pre></p> <p><code>ubuntu@ubuntu-VM:~$ $ kubectget rs</code> <pre><code>NAME                          DESIRED   CURRENT   READY   AGE\nfrontend                      2         2         2       24h\nhello-node-cdcf64657          1         1         1       66m\nmy-dep-6d55d579d5             1         1         1       23h\nnginx-deployment-5b4685b9bd   1         1         0       5m30s\nnginx-deployment-9456bbbf9    0         0         0       12m\nnginx-deployment-ff6655784    3         3         3       9m34s\n</code></pre></p>"},{"location":"Kubernetes/kubernetes-day6/","title":"Kubernetes Day 6","text":"<p><code>ubuntu@ubuntu-VM:~$ kubectl get ns</code></p> <pre><code>NAME                   STATUS   AGE\ndefault                Active   224d\nkube-node-lease        Active   224d\nkube-public            Active   224d\nkube-system            Active   224d\nkubernetes-dashboard   Active   3d\nnovgems                Active   5d\ntest                   Active   6d\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl get pods - test</code></p> <pre><code>Error from server (NotFound): pods \"-\" not found\nError from server (NotFound): pods \"test\" not found\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl get pods -n test</code></p> <pre><code>No resources found in test namespace.\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl svc -n test</code></p> <pre><code>error: unknown command \"svc\" for \"kubectl\"\nDid you mean this?set\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl get svc -n test</code></p> <pre><code>No resources found in test namespace.\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl create ns training-2</code></p> <pre><code>namespace/training-2 created\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl create deploy nginxcip --image=nginx -n training-2</code></p> <pre><code>deployment.apps/nginxcip created\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl expose deploy nginxcip --port=80 -n  training-2</code></p> <pre><code>service/nginxcip exposed\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl get service nginxcip  -n  training-2 --output yaml</code></p> <pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  creationTimestamp: \"2023-11-06T05:54:20Z\"\n  labels:\n    app: nginxcip\n  name: nginxcip\n  namespace: training-2\n  resourceVersion: \"436296\"\n  uid: 544c3cf4-c62a-4930-a0a8-5de17027a78b\nspec:\n  clusterIP: 10.103.225.181\n  clusterIPs:\n  - 10.103.225.181\n  internalTrafficPolicy: Cluster\n  ipFamilies:\n  - IPv4\n  ipFamilyPolicy: SingleStack\n  ports:\n  - port: 80\n    protocol: TCP\n    targetPort: 80\n  selector:\n    app: nginxcip\n  sessionAffinity: None\n  type: ClusterIP\nstatus:\n  loadBalancer: {}\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ curl localhost:80</code></p> <pre><code>curl: (7) Failed to connect to localhost port 80 after 0 ms: Connect                                         ion refused\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ Node port</code></p> <pre><code>Command 'Node' not found, did you mean:\n  command 'code' from snap code (d037ac07)\n  command 'ode' from deb plotutils (2.6-11)\n  command 'node' from deb nodejs (12.22.9~dfsg-1ubuntu3.1)\nSee 'snap info &lt;snapname&gt;' for additional versions.\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl get deployment  -n  training-2</code></p> <pre><code>NAME       READY   UP-TO-DATE   AVAILABLE   AGE\nnginxcip   1/1     1            1           10m\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl expose deploy nginx --port=80 --type=NodePort  -n  training-2</code></p> <pre><code>Error from server (NotFound): deployments.apps \"nginx\" not found\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl expose deploy nginxcip --port=80 --type=NodePort  -n  training-2</code></p> <pre><code>Error from server (AlreadyExists): services \"nginxcip\" already exists\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl get svc -n  training-2</code></p> <pre><code>NAME       TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)   AGE\nnginxcip   ClusterIP   10.103.225.181   &lt;none&gt;        80/TCP    13m\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ curl localhost:32066</code></p> <pre><code>curl: (7) Failed to connect to localhost port 32066 after 0 ms: Conn                                         ection refused\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ curl localhost:80</code></p> <pre><code>curl: (7) Failed to connect to localhost port 80 after 0 ms: Connect                                         ion refused\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ curl 10.103.225.181:80</code></p> <pre><code>curl: (7) Failed to connect to 10.103.225.181 port 80 after 2 ms: No                                          route to host\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl get nodes --output wide</code></p> <pre><code>NAME       STATUS   ROLES                  AGE    VERSION    INTERNA                                         L-IP    EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION     CONTAI                                         NER-RUNTIME\nminikube   Ready    control-plane,master   224d   v1.23.12   192.168                                         .49.2   &lt;none&gt;        Ubuntu 20.04.5 LTS   6.2.0-34-generic   docker                                         ://20.10.23\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ curl localhost</code></p> <pre><code>curl: (7) Failed to connect to localhost port 80 after 0 ms: Connec                                          tion refused\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ curl 192.16.49.2:80</code></p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"iso-8859-1\"?&gt;\n&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n         \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\"&gt;\n        &lt;head&gt;\n                &lt;title&gt;404 - Not Found&lt;/title&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n                &lt;h1&gt;404 - Not Found&lt;/h1&gt;\n        &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl get pods -o wide</code></p> <pre><code>NAME                                READY   STATUS             REST                                          ARTS       AGE    IP            NODE       NOMINATED NODE   READINE                                          SS GATES\nhello-node-cdcf64657-9chvx          1/1     Running            0                                                        3d1h   172.17.0.9    minikube   &lt;none&gt;           &lt;none&gt;\nmy-dep-6d55d579d5-9xrx9             1/1     Running            2 (3                                          d1h ago)   4d     172.17.0.2    minikube   &lt;none&gt;           &lt;none&gt;\nnginx-deployment-5b4685b9bd-hhrrr   0/1     ImagePullBackOff   0                                                        3d     172.17.0.11   minikube   &lt;none&gt;           &lt;none&gt;\nnginx-deployment-ff6655784-4dk7k    1/1     Running            0                                                        3d     172.17.0.10   minikube   &lt;none&gt;           &lt;none&gt;\nnginx-deployment-ff6655784-thfjl    1/1     Running            0                                                        3d     172.17.0.12   minikube   &lt;none&gt;           &lt;none&gt;\nnginx-deployment-ff6655784-zg86c    1/1     Running            0                                                        3d     172.17.0.13   minikube   &lt;none&gt;           &lt;none&gt;\npod1                                1/1     Running            2 (3                                          d1h ago)   4d     172.17.0.4    minikube   &lt;none&gt;           &lt;none&gt;\npod2                                1/1     Running            2 (3                                          d1h ago)   4d     172.17.0.5    minikube   &lt;none&gt;           &lt;none&gt;\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl get pods -o wide -n test-2</code></p> <pre><code>No resources found in test-2 namespace.\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl get pods -o wide</code></p> <pre><code>NAME                                READY   STATUS             RESTARTS       AGE    IP            NODE       NOMINATED NODE   READINESS GATES\nhello-node-cdcf64657-9chvx          1/1     Running            0              3d1h   172.17.0.9    minikube   &lt;none&gt;           &lt;none&gt;\nmy-dep-6d55d579d5-9xrx9             1/1     Running            2 (3d1h ago)   4d     172.17.0.2    minikube   &lt;none&gt;           &lt;none&gt;\nnginx-deployment-5b4685b9bd-hhrrr   0/1     ImagePullBackOff   0              3d     172.17.0.11   minikube   &lt;none&gt;           &lt;none&gt;\nnginx-deployment-ff6655784-4dk7k    1/1     Running            0              3d     172.17.0.10   minikube   &lt;none&gt;           &lt;none&gt;\nnginx-deployment-ff6655784-thfjl    1/1     Running            0              3d     172.17.0.12   minikube   &lt;none&gt;           &lt;none&gt;\nnginx-deployment-ff6655784-zg86c    1/1     Running            0              3d     172.17.0.13   minikube   &lt;none&gt;           &lt;none&gt;\npod1                                1/1     Running            2 (3d1h ago)   4d     172.17.0.4    minikube   &lt;none&gt;           &lt;none&gt;\npod2                                1/1     Running            2 (3d1h ago)   4d     172.17.0.5    minikube   &lt;none&gt;           &lt;none&gt;\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl describe svc nginx</code></p> <pre><code>Error from server (NotFound): services \"nginx\" not found\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl describe svc nginx -n test-2</code></p> <pre><code>Error from server (NotFound): namespaces \"test-2\" not found\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl scale deploy nginx --replicas=3</code></p> <pre><code>Error from server (NotFound): deployments.apps \"nginx\" not found\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl get deployments</code></p> <pre><code>NAME               READY   UP-TO-DATE   AVAILABLE   AGE\nhello-node         1/1     1            1           3d1h\nmy-dep             1/1     1            1           4d\nnginx-deployment   3/3     1            3           3d\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl scale deploy nginx-deployment --replicas=3</code></p> <pre><code>deployment.apps/nginx-deployment scaled\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl create deploy nginx-deployment --image=nginx -n  training-2</code></p> <pre><code>deployment.apps/nginx-deployment created\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl get deployment  -n  training-2</code></p> <pre><code>NAME               READY   UP-TO-DATE   AVAILABLE   AGE\nnginx-deployment   1/1     1            1           11s\nnginxcip           1/1     1            1   \n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl expose deploy nginx-deployment --port=80 --type=NodePort  -n  training-2</code></p> <pre><code>service/nginx-deployment exposed\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl get svc -n  training-2</code></p> <pre><code>NAME               TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE\nnginx-deployment   NodePort    10.106.153.204   &lt;none&gt;        80:32397/TCP   10s\nnginxcip           ClusterIP   10.103.225.181   &lt;none&gt;        80/TCP         34m\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ curl localhost:32397</code></p> <pre><code>curl: (7) Failed to connect to localhost port 32397 after 0 ms: Connection refused\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl get nodes --output wide</code></p> <pre><code>NAME       STATUS   ROLES                  AGE    VERSION    INTERNAL-IP    EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION     CONTAINER-RUNTIME\nminikube   Ready    control-plane,master   224d   v1.23.12   192.168.49.2   &lt;none&gt;        Ubuntu 20.04.5 LTS   6.2.0-34-generic   docker://20.10.23\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ curl 192.168.49.2:32397</code></p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Welcome to nginx!&lt;/title&gt;\n&lt;style&gt;\nhtml { color-scheme: light dark; }\nbody { width: 35em; margin: 0 auto;\nfont-family: Tahoma, Verdana, Arial, sans-serif; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;\n&lt;p&gt;If you see this page, the nginx web server is successfully installed and\nworking. Further configuration is required.&lt;/p&gt;\n\n&lt;p&gt;For online documentation and support please refer to\n&lt;a href=\"http://nginx.org/\"&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;\nCommercial support is available at\n&lt;a href=\"http://nginx.com/\"&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"Kubernetes/kubernetes-day7/","title":"Kubernetes Day 7","text":"<p><code>ubuntu@ubuntu-VM:~$ /opt/autonet.sh</code></p> <pre><code>----------------------------------\nScript for Internet access\n----------------------------------\n\nPlease enter your credentials:\n\nUsername (Name_Surname): rahul_vishwakarma1\nPassword:\nFor HJ,PT,NG and BR locations select 1\nFor BG,GOA,BLR,HYD locations select 2\n\nPlease enter the number: 1\n\n1) For Hinjawdi Location press 1\n2) For Pune Location press 2\n3) For Nagpur Location press 3\n4) For Blue Ridge Location press 4\n\nPlease enter Work location : 1\n----------------------------------\nHinjawdi Location\n\n.\n--2023-11-07 10:17:33--  http://www.google.com/\nResolving www.google.com (www.google.com)... 172.217.166.36, 2404:6800:4009:80c::2004\nConnecting to www.google.com (www.google.com)|172.217.166.36|:80... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: unspecified [text/html]\nSaving to: \u2018index.html.58\u2019\n\nindex.html.58           [ &lt;=&gt;                ]  20.33K  --.-KB/s    in 0.06s\n\n2023-11-07 10:17:34 (313 KB/s) - \u2018index.html.58\u2019 saved [20813]\n\nConnected to Internet.\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ minikube start</code></p> <pre><code>* minikube v1.29.0 on Ubuntu 22.04\n* Kubernetes 1.26.1 is now available. If you would like to upgrade, specify: --kubernetes-version=v1.26.1\n* Using the docker driver based on existing profile\n* Starting control plane node minikube in cluster minikube\n* Pulling base image ...\n* Updating the running docker \"minikube\" container ...\n* minikube 1.31.2 is available! Download it: https://github.com/kubernetes/minikube/releases/tag/v1.31.2\n* To disable this notice, run: 'minikube config set WantUpdateNotification false'\n\n* Preparing Kubernetes v1.23.12 on Docker 20.10.23 ...\n* Verifying Kubernetes components...\n  - Using image gcr.io/k8s-minikube/storage-provisioner:v5\n  - Using image docker.io/kubernetesui/dashboard:v2.7.0\n  - Using image docker.io/kubernetesui/metrics-scraper:v1.0.8\n* Some dashboard features require the metrics-server addon. To enable all features please run:\n\n        minikube addons enable metrics-server\n\n\n* Enabled addons: storage-provisioner, default-storageclass, dashboard\n\n! /usr/bin/kubectl is version 1.26.3, which may have incompatibilities with Kubernetes 1.23.12.\n  - Want kubectl v1.23.12? Try 'minikube kubectl -- get pods -A'\n* Done! kubectl is now configured to use \"minikube\" cluster and \"default\" namespace by default\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl get ns</code></p> <pre><code>NAME                   STATUS   AGE\ndefault                Active   225d\nkube-node-lease        Active   225d\nkube-public            Active   225d\nkube-system            Active   225d\nkubernetes-dashboard   Active   4d\nnovgems                Active   6d\ntest                   Active   6d23h\ntraining-2             Active   22h\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl create ns test2</code></p> <pre><code>namespace/test2 created\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl create deploy nginx-dep --image=nginx</code></p> <pre><code>deployment.apps/nginx-dep created\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl get deployment -n test2</code></p> <pre><code>No resources found in test2 namespace.\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl get deployment</code></p> <pre><code>NAME               READY   UP-TO-DATE   AVAILABLE   AGE\nhello-node         1/1     1            1           4d\nmy-dep             1/1     1            1           4d22h\nnginx-dep          1/1     1            1           48s\nnginx-deployment   3/3     1            3           3d23h\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl create deploy nginx-dep --image=nginx -n test2</code></p> <pre><code>deployment.apps/nginx-dep created\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl get deployment -n test2</code></p> <pre><code>NAME        READY   UP-TO-DATE   AVAILABLE   AGE\nnginx-dep   1/1     1            1           17s\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl delete ns test2</code></p> <pre><code>namespace \"test2\" deleted\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl get deployment -n test2</code></p> <pre><code>No resources found in test2 namespace.\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl create ns test2</code></p> <pre><code>namespace/test2 created\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl get svc</code></p> <pre><code>NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE\nkubernetes   ClusterIP   10.96.0.1    &lt;none&gt;        443/TCP   225d\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl get svc -n test2</code></p> <pre><code>No resources found in test2 namespace.\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl create deploy nginx-dep --image=nginx -n test2</code></p> <pre><code>deployment.apps/nginx-dep created\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl create expose nginx-dep --port=80 --type=NodePort -n test2</code></p> <pre><code>error: unknown flag: --port\nSee 'kubectl create --help' for usage.\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl expose nginx-dep --port=80 --type=NodePort -n test2</code></p> <pre><code>error: the server doesn't have a resource type \"nginx-dep\"\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl get deployment -n test2</code></p> <pre><code>NAME        READY   UP-TO-DATE   AVAILABLE   AGE\nnginx-dep   1/1     1            1           87s\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl expose deploy nginx-dep --port=80 --type=NodePort -n test2</code></p> <pre><code>service/nginx-dep exposed\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl get svc -n test2</code></p> <pre><code>NAME        TYPE       CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE\nnginx-dep   NodePort   10.107.178.192   &lt;none&gt;        80:30776/TCP   47s\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl get node -n test2</code></p> <pre><code>NAME       STATUS   ROLES                  AGE    VERSION\nminikube   Ready    control-plane,master   225d   v1.23.12\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl delete ns test2</code></p> <pre><code>namespace \"test2\" deleted\n</code></pre> <p><code>ubuntu@ubuntu-VM:~$ kubectl get svc -n test2</code></p> <pre><code>No resources found in test2 namespace.\n</code></pre>"},{"location":"Kubernetes/kubernetes/","title":"Kubernetes","text":"<p>Kubernetes, often abbreviated as K8s, is an open-source container orchestration platform. It was originally developed by Google and is now maintained by the Cloud Native Computing Foundation (CNCF). Kubernetes automates the deployment, scaling, and management of containerized applications.</p> <p>Containers are lightweight, portable units that package software and its dependencies, ensuring consistency across different environments. Kubernetes provides a platform for automating the deployment and scaling of these containers, making it easier to manage and scale applications in a dynamic and efficient way.</p> <p>Key features of Kubernetes include:</p> <ol> <li> <p>Container Orchestration: Kubernetes automates the deployment, scaling, and management of containerized applications, allowing developers to focus on writing code without worrying about the underlying infrastructure.</p> </li> <li> <p>Scaling and Load Balancing: Kubernetes can automatically scale applications based on resource usage or other custom metrics. It also provides load balancing to distribute traffic across multiple instances of an application.</p> </li> <li> <p>Service Discovery and Load Balancing: Kubernetes has built-in mechanisms for service discovery, allowing containers to find and communicate with each other. Load balancing ensures that traffic is distributed evenly among application instances.</p> </li> <li> <p>Self-healing: If a container or node fails, Kubernetes can automatically restart the failed components on healthy nodes, ensuring that the application remains available.</p> </li> <li> <p>Rolling Updates and Rollbacks: Kubernetes supports rolling updates, allowing applications to be updated without downtime. If an update causes issues, rollbacks can be performed easily.</p> </li> <li> <p>Declarative Configuration: Kubernetes allows users to define the desired state of their applications through YAML or JSON configuration files. The platform then works to ensure that the current state matches the desired state.</p> </li> <li> <p>Resource Management: Kubernetes manages the allocation of resources (CPU, memory, storage) to containers, optimizing the performance of applications.</p> </li> <li> <p>Multi-Cloud and Hybrid Cloud Support: Kubernetes is designed to work across various cloud providers and on-premises data centers, providing flexibility and avoiding vendor lock-in.</p> </li> </ol> <p>Overall, Kubernetes has become a fundamental tool in the world of containerized applications, providing a powerful and standardized way to deploy, scale, and manage container-based workloads.</p>"},{"location":"Porting/porting/","title":"Porting Open Source Packages to Linux on Power","text":""},{"location":"Porting/porting/#to-install-docker-on-linux-ppc64le","title":"To install docker on linux ppc64le","text":""},{"location":"Porting/porting/#setup","title":"Setup","text":"<pre><code>curl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh ./get-docker.sh --dry-run\n\nsudo chmod 666 /var/run/docker.sock\n</code></pre>"},{"location":"Porting/porting/#pull-the-base-image","title":"Pull the base image. \u200b","text":"<pre><code> docker pull registry.access.redhat.com/ubi8/ubi:8.4\u200b\n</code></pre>"},{"location":"Porting/porting/#create-container","title":"Create container. \u200b","text":"<pre><code>docker run -it --name cordova-plugin-firebase registry.access.redhat.com/ubi8/ubi:8.4 /bin/bash\u200b\n</code></pre>"},{"location":"Porting/porting/#porting","title":"Porting","text":"<p>Build-Scripts</p>"},{"location":"Porting/porting/#loopback-connector","title":"loopback-connector","text":"<pre><code>#!/bin/bash -e\n\nPACKAGE_NAME=loopback-connector\nPACKAGE_URL=https://github.com/loopbackio/loopback-connector\n\nexport NODE_VERSION=${NODE_VERSION:-16}\nyum install -y python38 python38-devel git gcc gcc-c++ libffi make\n\n#Installing nvm\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash\nsource \"$HOME\"/.bashrc\necho \"installing nodejs $NODE_VERSION\"\nnvm install \"$NODE_VERSION\" &gt;/dev/null\nnvm use $NODE_VERSION\n\n\n\ngit clone $PACKAGE_URL $PACKAGE_NAME\ncd  $PACKAGE_NAME\n\nnpm install &amp;&amp; npm audit fix --force &gt; loopback_install.log\nnpm test &gt; loopback_test.log\n</code></pre>"},{"location":"Porting/porting/#markdown","title":"markdown","text":"<pre><code>#!/bin/bash -e\n\nset -e\n\n\n# Variables\nexport PACKAGE_NAME=markdown\nexport PACKAGE_URL=https://github.com/Python-Markdown/markdown\n\n# Install dependencies\nyum install -y wget gcc git gcc-c++\nyum install -y python38-devel.ppc64le\npython3 -m pip install build tox coverage codecov\n\n# Clone the repository\ngit clone $PACKAGE_URL\ncd $PACKAGE_NAME\n\npython3 -m build &gt; markdown_build.log\npython3 -m tox -e py3 &gt; markdown_test.log\n</code></pre>"},{"location":"Porting/porting/#onnxruntime","title":"onnxruntime","text":"<pre><code>#!/bin/bash -e\n\nPACKAGE_NAME=onnxruntime\nPACKAGE_VERSION=1.10.0\nPACKAGE_URL=https://github.com/microsoft/onnxruntime.git\n\nset -e\nyum install -y python3 git cmake gcc-c++ java-1.8.0-openjdk-devel\ncd /home\n\ngit clone $PACKAGE_URL\ncd $PACKAGE_NAME\ngit checkout v$PACKAGE_VERSION\n./build.sh &gt; onnxruntime_build.log\n\nexit 0\n</code></pre>"},{"location":"Porting/porting/#passport","title":"passport","text":"<pre><code>#!/bin/bash -e\n\nPACKAGE_NAME=passport\nPACKAGE_URL=https://github.com/jaredhanson/passport.git\n\nexport NODE_VERSION=${NODE_VERSION:-16}\nyum install -y python38 python38-devel git gcc gcc-c++ libffi make\n\n#Installing nvm\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash\nsource \"$HOME\"/.bashrc\necho \"installing nodejs $NODE_VERSION\"\nnvm install \"$NODE_VERSION\" &gt;/dev/null\nnvm use $NODE_VERSION\n\n\n\ngit clone $PACKAGE_URL\ncd  $PACKAGE_NAME\n\nnpm install &amp;&amp; npm audit fix --force &gt; passport_install.log\nnpm test &gt; passport_test.log\n</code></pre>"},{"location":"Porting/porting/#strftime","title":"strftime","text":"<pre><code>#!/bin/bash -e\n\nPACKAGE_NAME=strftime\nPACKAGE_URL=https://github.com/samsonjs/strftime/\n\nexport NODE_VERSION=${NODE_VERSION:-16}\nyum install git make -y\n\n#Installing nvm\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash\nsource \"$HOME\"/.bashrc\necho \"installing nodejs $NODE_VERSION\"\nnvm install \"$NODE_VERSION\" &gt;/dev/null\nnvm use $NODE_VERSION\n\ngit clone $PACKAGE_URL $PACKAGE_NAME\ncd  $PACKAGE_NAME\n\nnpm install &amp;&amp; npm audit fix --force &gt; strftime_install.log\nmake test &gt; strftime_test.log\n</code></pre>"},{"location":"Sonarqube/Sonarqube/","title":"Sonarqube","text":"<ul> <li>Sonarqube image comes with a temporary h2 database engine which is not recommended for production and doesn't persist across container restarts.</li> <li>We need to setup a database of our own and point it to Sonarqube at the time of starting the container.</li> <li>Sonarqube docker images exposes two volumes <code>\"$SONARQUBE_HOME/data\"</code>, <code>\"$SONARQUBE_HOME/extensions\"</code> as seen from Sonarqube Dockerfile.</li> <li> <p>Since we wanted to persist the data across invocations, we need to make sure that a production grade database is setup and is linked to Sonarqube and the extensions directory is created and mounted as volume on the host machine so that all the downloaded plugins are available across container invocations and can be used by multiple containers (if required).</p> </li> <li> <p>Database Setup:</p> </li> </ul> <pre><code>create database sonar;\ngrant all on sonar.* to `sonar`@`%` identified by \"SOME_PASSWORD\";\nflush privileges;\n</code></pre> <ul> <li> <p>since we do not know the containers IP before hand, we use '%' for sonarqube host IP. It is not necessary to create tables, Sonarqube creates them if it doesn't find them.</p> </li> <li> <p>Starting up Sonarqube container:</p> </li> <li> <p>create a directory on host <pre><code>mkdir /server_data/sonarqube/extensions\nmkdir /server_data/sonarqube/data # this will be useful in saving startup time\n</code></pre></p> </li> <li> <p>Start the container <pre><code>docker run -d \\\n    --name sonarqube \\\n    -p 9000:9000 \\\n    -e SONARQUBE_JDBC_USERNAME=sonar \\\n    -e SONARQUBE_JDBC_PASSWORD=SOME_PASSWORD \\\n    -e SONARQUBE_JDBC_URL=\"jdbc:mysql://HOST_IP_OF_DB_SERVER:PORT/sonar?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true&amp;useConfigs=maxPerformance\" \\\n    -v /server_data/sonarqube/data:/opt/sonarqube/data \\\n    -v /server_data/sonarqube/extensions:/opt/sonarqube/extensions \\\n    sonarqube\n</code></pre></p> </li> </ul>"},{"location":"Sonarqube/Sonarqube/#to-use-sonarqube-for-spring-boot-application","title":"To use sonarQube for spring boot application.","text":"<p><pre><code>mvn sonar:sonar -Dsonar.projectKey=springboot -Dsonar.host.url=http://1033.10.203:9000 -Dsonar.login=squ_ac10315fvfvfvdfvdvfdvfd118992\n</code></pre> Install the plugins in pom.xml <pre><code>&lt;plugins&gt;\n        &lt;plugin&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n            &lt;configuration&gt;\n                &lt;excludes&gt;\n                    &lt;exclude&gt;\n                        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n                        &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n                    &lt;/exclude&gt;\n                &lt;/excludes&gt;\n            &lt;/configuration&gt;\n        &lt;/plugin&gt;\n                &lt;plugin&gt;\n                &lt;groupId&gt;org.jacoco&lt;/groupId&gt;\n                &lt;artifactId&gt;jacoco-maven-plugin&lt;/artifactId&gt;\n                &lt;version&gt;0.8.8&lt;/version&gt;\n                &lt;executions&gt;\n                    &lt;execution&gt;\n                        &lt;id&gt;prepare-agent&lt;/id&gt;\n                        &lt;goals&gt;\n                            &lt;goal&gt;prepare-agent&lt;/goal&gt;\n                        &lt;/goals&gt;\n                    &lt;/execution&gt;\n                    &lt;execution&gt;\n                        &lt;id&gt;\n                            report&lt;/id&gt;\n                            &lt;phase&gt;test&lt;/phase&gt;\n                        &lt;goals&gt;\n                            &lt;goal&gt;report&lt;/goal&gt;\n                        &lt;/goals&gt;\n                    &lt;/execution&gt;\n                &lt;/executions&gt;\n            &lt;/plugin&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\n                &lt;version&gt;3.8.1&lt;/version&gt;\n            &lt;/plugin&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.sonarsource.scanner.maven&lt;/groupId&gt;\n                &lt;artifactId&gt;sonar-maven-plugin&lt;/artifactId&gt;\n                &lt;version&gt;3.6.0.1398&lt;/version&gt;\n            &lt;/plugin&gt;\n&lt;/plugins&gt;\n</code></pre></p>"},{"location":"Spring%20Boot/CovidApplication/","title":"Covid Application","text":"CovidApplication.java<pre><code>package com.covid.jpa;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class CovidApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(CovidApplication.class, args);\n    }\n\n}\n</code></pre>"},{"location":"Spring%20Boot/CovidApplication/#controller","title":"Controller","text":"WeatherController.java<pre><code>package com.covid.jpa.controller;\n\n\nimport java.util.List;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.PutMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport com.covid.jpa.domain.CovidCases;\nimport com.covid.jpa.service.CovidService;\n\n\n//Fill your code here\n@RestController\n@RequestMapping(\"/covid\")\npublic class CovidController\n{\n\n    //Fill your code here\n    @Autowired\n    CovidService covid;\n\n    @GetMapping(\"/cases\")\n    public List&lt;CovidCases&gt; fetchAll() {\n        //Fill your code here\n        return this.covid.findAll();\n\n    }\n\n    //Fill your code here\n    @PostMapping(\"/cases\")\n    public CovidCases addCases(@RequestBody CovidCases cases) {\n        //Fill your code here\n        return this.covid.addCases(cases);\n\n    }\n\n    //Fill your code here\n    @PutMapping(\"/cases\")\n    public CovidCases updateCases(@RequestBody CovidCases cases) {\n        //Fill your code here\n        return this.covid.save(cases);\n\n    }\n\n    //Fill your code here\n    @GetMapping(\"/cases/{id}\")\n    public CovidCases findById(@PathVariable Long id) {\n        //Fill your code here\n        return this.covid.findById(id);\n\n    }\n\n    //Fill your code here\n    @DeleteMapping(\"/cases/{id}\")\n    public Boolean deleteCases(@PathVariable Long id) {\n         //Fill your code here\n        return this.covid.deleteById(id);\n    }\n\n}\n</code></pre>"},{"location":"Spring%20Boot/CovidApplication/#service","title":"Service","text":"WeatherService.java<pre><code>package com.covid.jpa.service;\n\n\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport com.covid.jpa.domain.CovidCases;\nimport com.covid.jpa.repository.CovidRepository;\n\n\n//Fill your code here\n@Service\npublic class CovidService\n{\n    //Fill your code here\n    @Autowired\n    CovidRepository covidRepo;\n\n    public List&lt;CovidCases&gt; findAll() {\n        //Fill your code here\n        return this.covidRepo.findAll();\n\n    }\n\n    public CovidCases addCases(CovidCases cases) {\n        //Fill your code here\n        return this.covidRepo.save(cases);\n    }\n\n    public CovidCases save(CovidCases cases) {\n        //Fill your code here\n        return this.covidRepo.save(cases);\n    }\n\n    public CovidCases findById(Long id) {\n        //Fill your code here\n        return this.covidRepo.getById(id);\n    }\n\n    public Boolean deleteById(Long id) {\n\n        //Fill your code here\n         this.covidRepo.deleteById(id);\n         return true;\n\n    }\n\n\n}\n</code></pre>"},{"location":"Spring%20Boot/CovidApplication/#repository","title":"Repository","text":"WeatherRepository.java<pre><code>package com.covid.jpa.repository;\n\nimport java.util.List;\nimport org.springframework.stereotype.Repository;\nimport com.covid.jpa.domain.CovidCases;\n\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.CrudRepository;\n\n//Fill your code here\npublic interface CovidRepository extends CrudRepository&lt;CovidCases, Long&gt;{\n    public List&lt;CovidCases&gt; findAll();\n\n    @Query(\"select w from CovidCases w where w.id=?1\")\n    CovidCases getById(Long id);\n\n}\n</code></pre>"},{"location":"Spring%20Boot/CovidApplication/#domain","title":"Domain","text":"WeatherReport.java<pre><code>package com.covid.jpa.domain;\n\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\n\n//Fill your code here\n@Entity\n@Table(name=\"covid_cases\")\npublic class CovidCases {\n\n    //Fill your code here\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY) \n    private Long id;\n\n    //Fill your code here\n    @Column(name=\"country\")\n    private String country;\n\n    //Fill your code here\n    @Column(name=\"active_count\")\n    private Long activeCount;\n\n    //Fill your code here\n    @Column(name=\"discharged_cases\")\n    private Long dischargedCases;\n\n    public CovidCases() {}\n\n    public CovidCases(Long id,String country, Long activeCount, Long dischargedCases) {\n        super();\n        this.id = id;\n        this.country = country;\n        this.activeCount = activeCount;\n        this.dischargedCases = dischargedCases;\n    }\n\n        public CovidCases(String country, Long activeCount, Long dischargedCases) {\n        this.country = country;\n        this.activeCount = activeCount;\n        this.dischargedCases = dischargedCases;\n    }\n\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getCountry() {\n        return country;\n    }\n\n    public void setCountry(String country) {\n        this.country = country;\n    }\n\n    public Long getActiveCount() {\n        return activeCount;\n    }\n\n    public void setActiveCount(Long activeCount) {\n        this.activeCount = activeCount;\n    }\n\n    public Long getDischargedCases() {\n        return dischargedCases;\n    }\n\n    public void setDischargedCases(Long dischargedCases) {\n        this.dischargedCases = dischargedCases;\n    }\n\n\n}\n</code></pre>"},{"location":"Spring%20Boot/CovidApplication/#resorces","title":"Resorces","text":"application.properties<pre><code>#Don't remove the content below\n#####DB_CONFIG_START#####\nspring.datasource.url = jdbc:mysql://localhost:3306/empDatabase\nspring.datasource.username = springuser\nspring.datasource.password = password\n#####DB_CONFIG_END#####\n#Don't remove the content above\nspring.datasource.driver-class-name = com.mysql.jdbc.Driver\nspring.jpa.database-platform = org.hibernate.dialect.MySQL5Dialect\nspring.jpa.generate-ddl = true\nspring.jpa.hibernate.ddl-auto = update\nserver.port = 8090\n</code></pre>"},{"location":"Spring%20Boot/EmployeeApplication/","title":"Employee Application","text":"Application.java<pre><code>package com.psl;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class Application {\n\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n\n}\n</code></pre>"},{"location":"Spring%20Boot/EmployeeApplication/#controller","title":"Controller","text":"springController.java<pre><code>package com.psl.controller;\n\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.PutMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport com.psl.entity.Employee;\nimport com.psl.service.EmployeeServiceImpl;\n\nimport io.swagger.v3.oas.annotations.Hidden;\n\n@RestController\npublic class springController {\n    @Autowired\n    EmployeeServiceImpl empService;\n    public springController() {\n        // TODO Auto-generated constructor stub\n\n    }\n    @PostMapping(\"/employee\")\n    @Hidden\n    public Employee addEmployee(@RequestBody Employee e) {\n        return empService.addEmployee(e);\n    }\n    @GetMapping(\"/employee/{id}\")\n    public Employee getEmployeeById(@PathVariable int id) {\n        return empService.getEmployeeById(id);\n    }\n    @GetMapping(\"/employee\")\n    public List&lt;Employee&gt; getAllEmployee(@RequestBody Employee e) {\n        return empService.getAllEmployee(e);\n    }\n    @PutMapping(\"/employee\")\n    public Employee updateEmployee(@RequestBody Employee e) {\n        return empService.updateEmployee(e);\n    }\n    @DeleteMapping(\"/employee/{id}\")\n    public void deleteEmployee(@PathVariable int id) {\n        empService.deleteEmployee(id);\n    }\n    @GetMapping(\"/employee/name/{name}\")\n    public List&lt;Employee&gt; getEmployeeByName(@PathVariable String name) {\n        // TODO Auto-generated method stub\n        return empService.getEmployeeByName(name);\n    }\n\n    @GetMapping(\"/employee/tech/{name}\")\n    public List&lt;Employee&gt; getEmployeeByNameAndTech(@PathVariable String name, @RequestParam String tech) {\n        // TODO Auto-generated method stub\n        return empService.getEmployeeByNameAndTech(name, tech);\n    }\n}\n</code></pre>"},{"location":"Spring%20Boot/EmployeeApplication/#service","title":"Service","text":"<p>EmployeeService.java<pre><code>package com.psl.service;\n\nimport java.util.List;\n\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestBody;\n\nimport com.psl.entity.Employee;\n\npublic interface EmployeeService {\n     public Employee addEmployee(Employee e);\n     public Employee getEmployeeById(int id);\n     public List&lt;Employee&gt; getEmployeeByName(String name);\n     public List&lt;Employee&gt; getEmployeeByNameAndTech(String name, String Tech);\n     public List&lt;Employee&gt; getAllEmployee(Employee e);\n     public Employee updateEmployee(Employee e);\n     public void deleteEmployee(int id);\n}\n</code></pre> EmployeeServiceImpl.java<pre><code>package com.psl.service;\n\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport com.psl.entity.Employee;\nimport com.psl.repository.EmployeeRepository;\n\n@Service\npublic class EmployeeServiceImpl implements EmployeeService {\n    @Autowired\n    EmployeeRepository repo;\n    public EmployeeServiceImpl() {\n        // TODO Auto-generated constructor stub\n    }\n\n    @Override\n    public Employee addEmployee(Employee e) {\n        // TODO Auto-generated method stub\n        return repo.save(e);\n    }\n\n    @Override\n    public Employee getEmployeeById(int id) {\n        // TODO Auto-generated method stub\n        return repo.findById(id).get();\n    }\n\n    @Override\n    public List&lt;Employee&gt; getAllEmployee(Employee e) {\n        // TODO Auto-generated method stub\n        return (List&lt;Employee&gt;) repo.findAll();\n    }\n\n    @Override\n    public Employee updateEmployee(Employee e) {\n        // TODO Auto-generated method stub\n        return repo.save(e);\n    }\n\n    @Override\n    public void deleteEmployee(int id) {\n        // TODO Auto-generated method stub\n        repo.deleteById(id);        \n    }\n\n    @Override\n    public List&lt;Employee&gt; getEmployeeByName(String name) {\n        // TODO Auto-generated method stub\n        return repo.findEmployeeByName(name);\n    }\n\n    @Override\n    public List&lt;Employee&gt; getEmployeeByNameAndTech(String name, String tech) {\n        // TODO Auto-generated method stub\n        return repo.findEmployeeByNameAndTechJpql(name, tech);\n    }\n\n}\n</code></pre></p>"},{"location":"Spring%20Boot/EmployeeApplication/#repository","title":"Repository","text":"EmployeeRepository.java<pre><code>package com.psl.repository;\n\nimport java.util.List;\n\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.data.repository.query.Param;\n\nimport com.psl.entity.Employee;\n\npublic interface EmployeeRepository extends CrudRepository&lt;Employee, Integer&gt; {\n    @Query(\"Select e from Employee e where e.name=?1\")\n    List&lt;Employee&gt; findEmployeeByNameJpql(String name);\n    @Query(value=\"Select * from employee where name=?1\", nativeQuery=true )\n    List&lt;Employee&gt; findEmployeeByName(String name);\n    @Query(\"Select e from Employee e where e.name=:name\" )\n    List&lt;Employee&gt; findEmployeeByNameParam(@Param(\"name\")String name);\n\n    @Query(\"Select e from Employee e where e.name=?1 and e.tech=?2\")\n    List&lt;Employee&gt; findEmployeeByNameAndTechJpql(String name, String tech);\n    @Query(value=\"Select * from employee where name=?1 and tech=?2\", nativeQuery=true )\n    List&lt;Employee&gt; findEmployeeByNameAndTech(String name, String tech);\n    @Query(value=\"Select * from employee where name=:name and tech=:tech\", nativeQuery=true )\n    List&lt;Employee&gt; findEmployeeByNameAndTechParam(@Param(\"name\")String name,@Param(\"tech\") String tech);\n\n}\n</code></pre>"},{"location":"Spring%20Boot/EmployeeApplication/#domain","title":"Domain","text":"Employee.java<pre><code>package com.psl.entity;\n\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\n\n@Entity\npublic class Employee {\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private int id;\n    private String name;\n    public int getId() {\n        return id;\n    }\n    public void setId(int id) {\n        this.id = id;\n    }\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n    public String getTech() {\n        return tech;\n    }\n    public void setTech(String tech) {\n        this.tech = tech;\n    }\n    public Employee(int id, String name, String tech) {\n        super();\n        this.id = id;\n        this.name = name;\n        this.tech = tech;\n    }\n    private String tech;\n    public Employee() {\n        // TODO Auto-generated constructor stub\n    }\n\n}\n</code></pre>"},{"location":"Spring%20Boot/EmployeeApplication/#resorces","title":"Resorces","text":"application.properties<pre><code>#Don't remove the content below\n#####DB_CONFIG_START#####\nspring.datasource.url = jdbc:mysql://localhost:3306/empDatabase\nspring.datasource.username = springuser\nspring.datasource.password = password\n#####DB_CONFIG_END#####\n#Don't remove the content above\nspring.datasource.driver-class-name = com.mysql.jdbc.Driver\nspring.jpa.database-platform = org.hibernate.dialect.MySQL5Dialect\nspring.jpa.generate-ddl = true\nspring.jpa.hibernate.ddl-auto = update\nserver.port = 8090\n</code></pre>"},{"location":"Spring%20Boot/WeatherApplication/","title":"Weather Application","text":"WeatherJpaApplication.java<pre><code>package com.weather.jpa;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n//Fill your code here\n@SpringBootApplication\npublic class WeatherJpaApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(WeatherJpaApplication.class, args);\n    }\n\n}\n</code></pre>"},{"location":"Spring%20Boot/WeatherApplication/#controller","title":"Controller","text":"WeatherController.java<pre><code>package com.weather.jpa.controller;\n\n\nimport java.util.List;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.PutMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RestController;\nimport com.weather.jpa.domain.WeatherReport;\nimport com.weather.jpa.service.WeatherService;\n\n//Fill your code here\n@RestController\npublic class WeatherController {\n\n    //Fill your code here\n    @Autowired\n    WeatherService weather;\n    @GetMapping(\"/weatherReport\")\n    public List&lt;WeatherReport&gt; getData() {\n        //Fill your code here\n        return this.weather.getData();\n    }\n\n    //Fill your code here\n    @PostMapping(\"/weatherReport\")\n    public WeatherReport addCases(@RequestBody WeatherReport cases) {\n        //Fill your code here\n        return this.weather.addCases(cases);\n    }\n\n    //Fill your code here\n    @PutMapping(\"/weatherReport\")\n    public WeatherReport updateCases(@RequestBody WeatherReport cases) {\n        //Fill your code here\n        return this.weather.updateCases(cases);\n    }\n\n    //Fill your code here\n    @GetMapping(\"/weatherReport/{id}\")\n    public WeatherReport view(@PathVariable Long id) {\n        //Fill your code here\n        return this.weather.view(id);\n    }\n\n    //Fill your code here\n    @DeleteMapping(\"/weatherReport/{id}\")\n    public Boolean deleteCases(@PathVariable Long id) {\n        //Fill your code here\n        return this.weather.deleteCases(id);\n    }\n\n}\n</code></pre>"},{"location":"Spring%20Boot/WeatherApplication/#service","title":"Service","text":"WeatherService.java<pre><code>package com.weather.jpa.service;\n\nimport java.util.List;\nimport java.util.Optional;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport com.weather.jpa.domain.WeatherReport;\nimport com.weather.jpa.repository.WeatherRepository;\n\n//Fill your code here\n@Service\npublic class WeatherService {\n//Fill your code here\n    @Autowired\n    WeatherRepository weather;\n\n    public List&lt;WeatherReport&gt; getData() {\n        // Fill your code here\n        return  this.weather.findAll();\n\n    }\n\n    public WeatherReport addCases(WeatherReport cases) {\n\n        return this.weather.save(cases);\n\n    }\n\n    public WeatherReport updateCases(WeatherReport cases) {\n        // Fill your code here\n        return this.weather.save(cases);\n\n    }\n\n    public WeatherReport view(Long id) {\n        // Fill your code here\n        return this.weather.getById(id);\n\n    }\n\n    public Boolean deleteCases(Long id) {\n        // Fill your code here\n        this.weather.deleteById(id);\n        return true;\n\n    }\n\n}\n</code></pre>"},{"location":"Spring%20Boot/WeatherApplication/#repository","title":"Repository","text":"WeatherRepository.java<pre><code>package com.weather.jpa.repository;\n\nimport java.util.List;\nimport org.springframework.stereotype.Repository;\nimport com.weather.jpa.domain.WeatherReport;\n\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.CrudRepository;\n\n//Fill your code here\npublic interface WeatherRepository extends CrudRepository&lt;WeatherReport, Long&gt;{\n    public List&lt;WeatherReport&gt; findAll();\n\n    @Query(\"select w from WeatherReport w where w.id=?1\")\n    WeatherReport getById(Long id);\n}\n</code></pre>"},{"location":"Spring%20Boot/WeatherApplication/#domain","title":"Domain","text":"WeatherReport.java<pre><code>package com.weather.jpa.domain;\n\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\n//Fill your code here\n@Entity\n@Table(name=\"weather_report\")\npublic class WeatherReport {\n\n    //Fill your code here\n    @Id\n    @GeneratedValue(strategy= GenerationType.AUTO)\n    private Long id;\n    //Fill your code here\n    @Column(name=\"city\")\n    private String city;\n    //Fill your code here\n    @Column(name=\"min_temperature\")\n    private Double minTemperature;\n    //Fill your code here\n    @Column(name=\"max_temperature\")\n    private Double maxTemperature;\n\n    public WeatherReport() {}\n\n    public WeatherReport(Long id, String city, Double minTemperature, Double maxTemperature) {\n        super();\n        this.id = id;\n        this.city = city;\n        this.minTemperature = minTemperature;\n        this.maxTemperature = maxTemperature;\n    }\n\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getCity() {\n        return city;\n    }\n\n    public void setCity(String city) {\n        this.city = city;\n    }\n\n    public Double getMinTemperature() {\n        return minTemperature;\n    }\n\n    public void setMinTemperature(Double minTemperature) {\n        this.minTemperature = minTemperature;\n    }\n\n    public Double getMaxTemperature() {\n        return maxTemperature;\n    }\n\n    public void setMaxTemperature(Double maxTemperature) {\n        this.maxTemperature = maxTemperature;\n    }\n\n}\n</code></pre>"},{"location":"Spring%20Boot/WeatherApplication/#resorces","title":"Resorces","text":"application.properties<pre><code>#Don't remove the content below\n#####DB_CONFIG_START#####\nspring.datasource.url = jdbc:mysql://localhost:3306/empDatabase\nspring.datasource.username = springuser\nspring.datasource.password = password\n#####DB_CONFIG_END#####\n#Don't remove the content above\nspring.datasource.driver-class-name = com.mysql.jdbc.Driver\nspring.jpa.database-platform = org.hibernate.dialect.MySQL5Dialect\nspring.jpa.generate-ddl = true\nspring.jpa.hibernate.ddl-auto = update\nserver.port = 8090\n</code></pre>"},{"location":"Spring%20Boot/JT%20Adventure%20Tour/pom/","title":"POM","text":"pom.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;3.1.5&lt;/version&gt;\n        &lt;relativePath /&gt; &lt;!-- lookup parent from repository --&gt;\n    &lt;/parent&gt;\n    &lt;groupId&gt;com.psl&lt;/groupId&gt;\n    &lt;artifactId&gt;jttours&lt;/artifactId&gt;\n    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;\n    &lt;name&gt;jttours&lt;/name&gt;\n    &lt;description&gt;Johny Travellers&lt;/description&gt;\n    &lt;properties&gt;\n        &lt;java.version&gt;17&lt;/java.version&gt;\n        &lt;maven-jar-plugin.version&gt;3.1.1&lt;/maven-jar-plugin.version&gt;\n        &lt;sonar.exclusions&gt;\n            src/main/java/com/jt/model/**,\n            src/main/java/com/jt/config/**,\n            src/main/java/com/jt/service/JwtService.java,\n            src/main/java/com/jt/service/MetadataService.java,\n            src/main/java/com/jt/controller/MetadataController.java,\n            src/main/java/com/jt/controller/UserController.java,\n            src/main/java/com/jt/JttoursApplication.java,\n            src/main/java/com/jt/initializer/DummyDataLoader.java,\n            src/main/java/com/jt/controller/BookingController.java,\n            src/main/java/com/jt/auth/**\n        &lt;/sonar.exclusions&gt;\n    &lt;/properties&gt;\n    &lt;dependencies&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.mysql&lt;/groupId&gt;\n            &lt;artifactId&gt;mysql-connector-j&lt;/artifactId&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;\n            &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;\n\n        &lt;/dependency&gt;\n\n        &lt;!-- support for \"Java 8 Dates\" --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.fasterxml.jackson.datatype&lt;/groupId&gt;\n            &lt;artifactId&gt;jackson-datatype-jsr310&lt;/artifactId&gt;\n\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;\n            &lt;artifactId&gt;jjwt-api&lt;/artifactId&gt;\n            &lt;version&gt;0.11.5&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;\n            &lt;artifactId&gt;jjwt-impl&lt;/artifactId&gt;\n            &lt;version&gt;0.11.5&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;\n            &lt;artifactId&gt;jjwt-jackson&lt;/artifactId&gt;\n            &lt;version&gt;0.11.5&lt;/version&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n                &lt;configuration&gt;\n                    &lt;excludes&gt;\n                        &lt;exclude&gt;\n                            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n                            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n                        &lt;/exclude&gt;\n                    &lt;/excludes&gt;\n                &lt;/configuration&gt;\n            &lt;/plugin&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.jacoco&lt;/groupId&gt;\n                &lt;artifactId&gt;jacoco-maven-plugin&lt;/artifactId&gt;\n                &lt;version&gt;0.8.8&lt;/version&gt;\n                &lt;executions&gt;\n                    &lt;execution&gt;\n                        &lt;id&gt;prepare-agent&lt;/id&gt;\n                        &lt;goals&gt;\n                            &lt;goal&gt;prepare-agent&lt;/goal&gt;\n                        &lt;/goals&gt;\n                    &lt;/execution&gt;\n                    &lt;execution&gt;\n                        &lt;id&gt;\n                            report&lt;/id&gt;\n                        &lt;phase&gt;test&lt;/phase&gt;\n                        &lt;goals&gt;\n                            &lt;goal&gt;report&lt;/goal&gt;\n                        &lt;/goals&gt;\n                    &lt;/execution&gt;\n                &lt;/executions&gt;\n            &lt;/plugin&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\n            &lt;/plugin&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.sonarsource.scanner.maven&lt;/groupId&gt;\n                &lt;artifactId&gt;sonar-maven-plugin&lt;/artifactId&gt;\n                &lt;version&gt;3.6.0.1398&lt;/version&gt;\n\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n\n&lt;/project&gt;\n</code></pre>"},{"location":"Spring%20Boot/JT%20Adventure%20Tour/main/auth/","title":"Auth","text":"AuthRequest.java<pre><code>package com.jt.auth;\n\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n\npublic class AuthRequest {\n    private String userName;\n    private String password;\n\n}\n</code></pre> AuthResponse.java<pre><code>package com.jt.auth;\n\nimport lombok.Data;\n\n@Data\npublic class AuthResponse {\n    private String token ;\n    private String role ;\n    private String username ;\n}\n</code></pre> JwtAuthFilter.java<pre><code>package com.jt.auth;\n\nimport java.io.IOException;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.web.authentication.WebAuthenticationDetailsSource;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.filter.OncePerRequestFilter;\n\nimport com.jt.config.UserInfoUserDetailsService;\nimport com.jt.service.JwtService;\n\nimport jakarta.servlet.FilterChain;\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\n\n@Component\npublic class JwtAuthFilter extends OncePerRequestFilter {\n\n    @Autowired\n    private JwtService jwtService ;\n\n    @Autowired\n    private UserInfoUserDetailsService userDetailsService ;\n\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n            throws ServletException, IOException {\n\n        String authHeader = request.getHeader(\"Authorization\");\n        System.out.println(\"authHeader:\"+authHeader);\n        String token = null ;\n        String username = null ;\n        if(authHeader!=null &amp;&amp; authHeader.startsWith(\"Bearer\")) {\n            token = authHeader.substring(7) ;\n            username = jwtService.extractUsername(token) ;\n\n        }\n\n        if(username!=null &amp;&amp; SecurityContextHolder.getContext().getAuthentication()==null) {\n            UserDetails userDetails = userDetailsService.loadUserByUsername(username) ;\n\n            if(jwtService.validateToken(token, userDetails)) {\n                UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(userDetails,null,userDetails.getAuthorities()) ;\n                authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));\n                SecurityContextHolder.getContext().setAuthentication(authToken);\n            }\n        }\n        filterChain.doFilter(request, response);\n    }\n\n}\n</code></pre>"},{"location":"Spring%20Boot/JT%20Adventure%20Tour/main/config/","title":"Config","text":"SecurityConfig.java<pre><code>package com.jt.config;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.authentication.AuthenticationProvider;\nimport org.springframework.security.authentication.dao.DaoAuthenticationProvider;\nimport org.springframework.security.config.Customizer;\nimport org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;\nimport org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.http.SessionCreationPolicy;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.web.SecurityFilterChain;\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\n\n\nimport com.jt.auth.JwtAuthFilter;\n\n@Configuration\n@EnableWebSecurity\n@EnableMethodSecurity\npublic class SecurityConfig {\n    @Autowired\n    private JwtAuthFilter authFilter ;\n\n    @Bean\n    public UserDetailsService userDetailsService() {\n        return new UserInfoUserDetailsService() ;\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder() ;\n    }\n\n    @Bean\n    public SecurityFilterChain securityFilterChain(HttpSecurity http)throws Exception {\n        return http.csrf().disable()\n        .cors(Customizer.withDefaults())\n        .authorizeHttpRequests()\n        .requestMatchers(HttpMethod.GET,\"/tours\").permitAll()\n        .requestMatchers(HttpMethod.GET,\"/tours/{tourId}/batches\").permitAll()\n        .requestMatchers(HttpMethod.GET,\"/tours/{id}\").permitAll()\n        .requestMatchers(\"/tours/day\").permitAll()\n        .requestMatchers(HttpMethod.GET,\"/batches\").permitAll()\n        .requestMatchers(\"/batches/startDate\").permitAll()\n        .requestMatchers(HttpMethod.GET,\"/batches/{id}\").permitAll()\n        .requestMatchers(\"/auth/login\").permitAll()\n        .requestMatchers(\"/auth/register\").permitAll()\n        .requestMatchers(\"/metadata/**\").permitAll()\n        .and()\n        .authorizeHttpRequests().requestMatchers(\"/auth/**\")\n        .authenticated().and()\n        .authorizeHttpRequests().requestMatchers(\"/tours/**\")\n        .authenticated().and()\n        .authorizeHttpRequests().requestMatchers(\"/batches/**\")\n        .authenticated().and()\n        .authorizeHttpRequests().requestMatchers(\"/bookings/**\")\n        .authenticated().and()\n        .sessionManagement()\n        .sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n        .and()\n        .authenticationProvider(authenticationProvider())\n        .addFilterBefore(authFilter, UsernamePasswordAuthenticationFilter.class).build() ;\n    }\n\n    @Bean\n    public AuthenticationProvider authenticationProvider() {\n        DaoAuthenticationProvider authenticationProvider = new DaoAuthenticationProvider() ;\n        authenticationProvider.setUserDetailsService(userDetailsService());\n        authenticationProvider.setPasswordEncoder(passwordEncoder());\n        return authenticationProvider ;\n    }\n\n    @Bean\n    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {\n        return config.getAuthenticationManager() ;\n    }\n\n}\n</code></pre> UserInfoUserDetails.java<pre><code>package com.jt.config;\n\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\nimport org.springframework.security.core.userdetails.UserDetails;\n\nimport com.jt.model.auth.User;\n\npublic class UserInfoUserDetails implements UserDetails {\n\n    private String email ;\n    private String password ;\n    private List&lt;GrantedAuthority&gt; authorities ;\n\n    public UserInfoUserDetails(User user) {\n        email = user.getUserName() ;\n        password = user.getPassword() ;\n        authorities = Arrays.stream(user.getRole().toString().split(\",\"))\n                .map(SimpleGrantedAuthority::new)\n                .collect(Collectors.toList()) ;\n    }\n\n    @Override\n    public Collection&lt;? extends GrantedAuthority&gt; getAuthorities() {\n        return authorities;\n    }\n    @Override\n    public String getPassword() {\n        return password;\n    }\n    @Override\n    public String getUsername() {\n        return email;\n    }\n    @Override\n    public boolean isAccountNonExpired() {\n        return true;\n    }\n    @Override\n    public boolean isAccountNonLocked() {\n        return true;\n    }\n    @Override\n    public boolean isCredentialsNonExpired() {\n        return true;\n    }\n    @Override\n    public boolean isEnabled() {\n        return true;\n    }\n\n}\n</code></pre> UserInfoUserDetailsService.java<pre><code>package com.jt.config;\n\nimport java.util.Optional;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.stereotype.Component;\n\nimport com.jt.model.auth.User;\nimport com.jt.repository.UserRepository;\n\n@Component\npublic class UserInfoUserDetailsService implements UserDetailsService {\n\n    @Autowired\n    private UserRepository repository ;\n\n\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n\n        Optional&lt;User&gt; userInfo =  repository.findByUserName(username) ;\n        return userInfo.map(UserInfoUserDetails::new)\n        .orElseThrow(()-&gt;new UsernameNotFoundException(\"user not found\")) ;\n\n    }\n\n}\n</code></pre>"},{"location":"Spring%20Boot/JT%20Adventure%20Tour/main/controller/","title":"Controller","text":""},{"location":"Spring%20Boot/JT%20Adventure%20Tour/main/controller/#controllerjava","title":"Controller.java","text":"<p>AuthController.java<pre><code>package com.jt.controller;\nimport java.util.Optional;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.web.bind.annotation.CrossOrigin;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport com.jt.auth.AuthRequest;\nimport com.jt.auth.AuthResponse;\nimport com.jt.model.auth.User;\nimport com.jt.repository.UserRepository;\nimport com.jt.service.JwtService;\nimport com.jt.service.UserService;\n\n@RestController\n@CrossOrigin(origins = \"*\")\n@RequestMapping(\"/auth\")\npublic class AuthController {\n    @Autowired\n    private UserService service ;\n\n    @Autowired\n    private JwtService jwtService ;\n\n    @Autowired\n    private UserRepository userRepo ;\n\n    @Autowired\n    private AuthenticationManager authenticationManager ;\n\n\n    @PostMapping(\"/login\")\n    public AuthResponse authenticateAndGetToken(@RequestBody AuthRequest authRequest) {\n        Authentication authentication = authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(authRequest.getUserName(), authRequest.getPassword()));\n        if(authentication.isAuthenticated()) {\n            Optional&lt;User&gt; fetchedUser = userRepo.findByUserName(authRequest.getUserName());\n            if(fetchedUser.isPresent()) {\n                String role = fetchedUser.get().getRole().toString() ;\n                String token = jwtService.generateToken(authRequest.getUserName()) ;\n                AuthResponse authResponse = new AuthResponse() ;\n                authResponse.setToken(token) ;\n                authResponse.setRole(role) ;\n                authResponse.setUsername(authRequest.getUserName()) ;\n                return authResponse ;\n            }\n            throw new UsernameNotFoundException(\"invalid user request !\") ;\n        }\n        else {\n            throw new UsernameNotFoundException(\"invalid user request !\") ;\n        }\n\n    }\n\n    @PostMapping(\"/register\")\n    public ResponseEntity&lt;HttpStatus&gt; createUser(@RequestBody User user) {\n            User u = service.createTheUser(user) ;\n            if(u!=null)\n                return new ResponseEntity&lt;HttpStatus&gt;(HttpStatus.CREATED) ;\n            else\n                return new ResponseEntity&lt;HttpStatus&gt;(HttpStatus.NOT_ACCEPTABLE) ; \n    }\n\n}\n</code></pre> BatchController.java<pre><code>package com.jt.controller;\n\n\nimport java.util.Date;\nimport java.util.List;\n\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.format.annotation.DateTimeFormat;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.access.prepost.PreAuthorize;\nimport org.springframework.security.core.annotation.AuthenticationPrincipal;\nimport org.springframework.web.bind.annotation.CrossOrigin;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.PutMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport com.jt.config.UserInfoUserDetails;\nimport com.jt.model.batch.Booking;\nimport com.jt.model.batch.Status;\nimport com.jt.model.batch.TourBatch;\nimport com.jt.service.BatchService;\n\n@RequestMapping(\"/batches\")\n@RestController\n@CrossOrigin(origins = \"*\")\npublic class BatchController {\n\n    @Autowired\n    private BatchService batchService;\n\n    @PostMapping(\"/book\")\n    @PreAuthorize(\"hasAuthority('CUSTOMER')\")\n    public ResponseEntity&lt;Booking&gt; bookTraveller(@RequestBody Booking booking) {\n        Booking newbooking = batchService.bookTraveller(booking);\n        if (newbooking != null) {\n            return new ResponseEntity&lt;Booking&gt;(newbooking, HttpStatus.CREATED);\n        }\n        return new ResponseEntity&lt;Booking&gt;(newbooking, HttpStatus.NOT_ACCEPTABLE);\n    }\n\n\n    @PostMapping(\"/tours/{tourId}\")\n    @PreAuthorize(\"hasAuthority('ADMIN')\")\n    public ResponseEntity&lt;TourBatch&gt; createBatch(@PathVariable Long tourId, @RequestBody TourBatch batch) {\n        if(this.batchService.addBatch(tourId, batch)!=null) {\n            return new ResponseEntity&lt;TourBatch&gt;(batch,HttpStatus.CREATED);\n        }\n        return new ResponseEntity&lt;TourBatch&gt;(HttpStatus.NOT_FOUND);\n    }\n\n\n    @GetMapping()\n    public ResponseEntity&lt; List&lt;TourBatch&gt;&gt; getAllBatches(@AuthenticationPrincipal UserInfoUserDetails userDetails){\n        // checking whether someone is logged in or not based on that showing the batches\n        System.out.println(\"inside get batches\");\n        if(userDetails!=null &amp;&amp; userDetails.getAuthorities().stream()\n                .anyMatch(a-&gt;a.getAuthority().equals(\"ADMIN\"))) {\n            List&lt;TourBatch&gt; batches = batchService.getBatches();\n            if(batches != null)\n                return new ResponseEntity&lt;List&lt;TourBatch&gt;&gt;(batches,HttpStatus.OK);\n            return new ResponseEntity&lt;List&lt;TourBatch&gt;&gt;(HttpStatus.NOT_FOUND);\n        }else {\n            List&lt;TourBatch&gt; batches = batchService.getBatchesByUser();\n            if(batches != null)\n                return new ResponseEntity&lt;List&lt;TourBatch&gt;&gt;(batches,HttpStatus.OK);\n            return new ResponseEntity&lt;List&lt;TourBatch&gt;&gt;(HttpStatus.NOT_FOUND);\n        }\n\n    }\n\n\n    @PutMapping()\n    @PreAuthorize(\"hasAuthority('ADMIN')\")\n    public ResponseEntity&lt;TourBatch&gt; updateBatch(@RequestBody TourBatch tourBatch) {\n        TourBatch updatedBatch = batchService.updateBatch(tourBatch);\n        if(updatedBatch!=null) {\n            return new ResponseEntity&lt;TourBatch&gt;(updatedBatch,HttpStatus.OK);\n        }\n        return new ResponseEntity&lt;TourBatch&gt;(tourBatch,HttpStatus.NOT_MODIFIED);\n    }\n\n\n    @GetMapping(\"/{batchId}\")\n    public ResponseEntity&lt;TourBatch&gt; getBatchById(@PathVariable Long batchId) {\n        TourBatch batch =  batchService.getBatchById(batchId);\n        if(batch!=null) \n             return new ResponseEntity&lt;TourBatch&gt;(batch,HttpStatus.FOUND);\n        return new ResponseEntity&lt;TourBatch&gt;(HttpStatus.NOT_FOUND);\n    }\n\n    @DeleteMapping(\"/{batchId}\")\n    @PreAuthorize(\"hasAuthority('ADMIN')\")\n    public ResponseEntity&lt;HttpStatus&gt; deleteBatchById(@PathVariable Long batchId) {\n        if( batchService.deleteBatchById(batchId) == true) {\n            return new ResponseEntity&lt;HttpStatus&gt;(HttpStatus.OK);\n        }\n        return new ResponseEntity&lt;HttpStatus&gt;(HttpStatus.NOT_ACCEPTABLE); \n    }\n\n    @GetMapping(\"/startDate\")\n    public ResponseEntity&lt; List&lt;TourBatch&gt;&gt; getFilteredBatches(\n            @RequestParam(value = \"minDate\", required = false) @DateTimeFormat(pattern = \"yyyy-MM-dd\") Date minDate,\n            @RequestParam(value = \"maxDate\", required = false) @DateTimeFormat(pattern = \"yyyy-MM-dd\") Date maxDate) {\n        List&lt;TourBatch&gt; batches = batchService.getFilteredBatches(minDate, maxDate);\n        return new ResponseEntity&lt;List&lt;TourBatch&gt;&gt;(batches,HttpStatus.OK);\n    }\n\n    @GetMapping(\"/status\")\n    public ResponseEntity&lt;List&lt;TourBatch&gt;&gt; getFilteredStatus(\n            @RequestParam(value = \"status\") Status status) {\n        List&lt;TourBatch&gt; tourBatch=batchService.getFilteredStatus(status);\n        if(tourBatch!=null &amp;&amp; !tourBatch.isEmpty()) {\n            return new ResponseEntity&lt;List&lt;TourBatch&gt;&gt;(tourBatch,HttpStatus.OK);\n        }\n        return new ResponseEntity&lt;List&lt;TourBatch&gt;&gt;(HttpStatus.NOT_FOUND);\n    }\n\n    @GetMapping(\"/availableSeats\")\n    public ResponseEntity&lt;List&lt;TourBatch&gt;&gt; getFilteredAvailableSeats(\n            @RequestParam(value = \"minAvailableSeats\", required = false, defaultValue=\"-1\") int minAvailableSeats,\n            @RequestParam(value = \"maxAvailableSeats\", required = false, defaultValue=\"-1\") int maxAvailableSeats) {\n        List&lt;TourBatch&gt; tourBatch=batchService.getFilteredAvailableSeats(minAvailableSeats, maxAvailableSeats);\n        if(tourBatch!=null &amp;&amp; !tourBatch.isEmpty() ) {\n            return new ResponseEntity&lt;List&lt;TourBatch&gt;&gt;(tourBatch,HttpStatus.OK);\n        }\n        return new ResponseEntity&lt;List&lt;TourBatch&gt;&gt;(HttpStatus.NOT_FOUND);\n    }\n\n    @GetMapping(\"/perParticipantCost\")\n    public ResponseEntity&lt;List&lt;TourBatch&gt;&gt; getFilteredPrice(\n            @RequestParam(value = \"budget\") double budget) {\n        List&lt;TourBatch&gt; tourBatch=batchService.getFilteredPrice(budget);\n        if(tourBatch!=null &amp;&amp; !tourBatch.isEmpty()) {\n            return new ResponseEntity&lt;List&lt;TourBatch&gt;&gt;(tourBatch,HttpStatus.OK);\n        }\n        return new ResponseEntity&lt;List&lt;TourBatch&gt;&gt;(HttpStatus.NOT_FOUND);\n    }\n}\n</code></pre> BookingController.java<pre><code>package com.jt.controller;\n\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.core.annotation.AuthenticationPrincipal;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport com.jt.config.UserInfoUserDetails;\nimport com.jt.model.batch.Booking;\nimport com.jt.service.BookingService;\n\n@RequestMapping(\"/bookings\")\n@RestController\npublic class BookingController {\n    @Autowired\n    private BookingService service;\n\n    @GetMapping()\n    public ResponseEntity&lt;List&lt;Booking&gt;&gt; getBookings(@AuthenticationPrincipal UserInfoUserDetails userDetails) {\n        List&lt;Booking&gt; bookings = null ;\n        Boolean isAdmin=userDetails.getAuthorities().stream().anyMatch(a-&gt;a.getAuthority().equals(\"ADMIN\"));\n        if(userDetails!=null &amp;&amp; isAdmin)\n                bookings = service.getAllBookings();            \n        else\n            bookings = service.getAllBookingsUser(userDetails.getUsername());\n\n        if(bookings!=null) {\n            return new ResponseEntity&lt;List&lt;Booking&gt;&gt;(bookings,HttpStatus.OK);\n        }\n        return new ResponseEntity&lt;List&lt;Booking&gt;&gt;(bookings, HttpStatus.NOT_FOUND);\n\n    }\n}\n</code></pre> MetadataController.java<pre><code>package com.jt.controller;\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.CrossOrigin;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport com.jt.model.DisplayPair;\nimport com.jt.service.MetadataService;\n\n@RestController\n@RequestMapping(\"/metadata\")\n@CrossOrigin(origins = \"*\")\npublic class MetadataController {\n    @Autowired\n    private MetadataService service;\n\n    @GetMapping(\"/difficulties\")\n    public ResponseEntity&lt;List&lt;DisplayPair&lt;String, String&gt;&gt;&gt; getDifficultyLevels(){\n        List&lt;DisplayPair&lt;String, String&gt;&gt;difficultyLevels =service.allDifficultyLevels();\n        if(difficultyLevels!=null) {\n            return new ResponseEntity&lt;List&lt;DisplayPair&lt;String,String&gt;&gt;&gt;(difficultyLevels,HttpStatus.OK);\n        }\n        return new ResponseEntity&lt;List&lt;DisplayPair&lt;String,String&gt;&gt;&gt;(HttpStatus.NOT_FOUND);\n    }\n    @GetMapping(\"/modes\")\n    public ResponseEntity&lt;List&lt;DisplayPair&lt;String, String&gt;&gt;&gt; getModes(){ \n        List&lt;DisplayPair&lt;String, String&gt;&gt;modes =service.allModes();\n        if(modes!=null) {\n            return new ResponseEntity&lt;List&lt;DisplayPair&lt;String,String&gt;&gt;&gt;(modes,HttpStatus.OK);\n        }\n        return new ResponseEntity&lt;List&lt;DisplayPair&lt;String,String&gt;&gt;&gt;(HttpStatus.NOT_FOUND);\n    }\n    @GetMapping(\"/roomtypes\")\n    public ResponseEntity&lt;List&lt;DisplayPair&lt;String, String&gt;&gt;&gt; getRoomTypes(){\n\n        List&lt;DisplayPair&lt;String, String&gt;&gt;roomTypes =service.allRoomTypes();\n        if(roomTypes!=null) {\n            return new ResponseEntity&lt;List&lt;DisplayPair&lt;String,String&gt;&gt;&gt;(roomTypes,HttpStatus.OK);\n        }\n        return new ResponseEntity&lt;List&lt;DisplayPair&lt;String,String&gt;&gt;&gt;(HttpStatus.NOT_FOUND);\n    }\n    @GetMapping(\"/roles\")\n    public ResponseEntity&lt;List&lt;DisplayPair&lt;String, String&gt;&gt;&gt; getRoles(){\n        List&lt;DisplayPair&lt;String, String&gt;&gt;roles =service.allRoles();\n        if(roles!=null) {\n            return new ResponseEntity&lt;List&lt;DisplayPair&lt;String,String&gt;&gt;&gt;(roles,HttpStatus.OK);\n        }\n        return new ResponseEntity&lt;List&lt;DisplayPair&lt;String,String&gt;&gt;&gt;(HttpStatus.NOT_FOUND);\n    }\n    @GetMapping(\"/batchstatuses\")\n    public ResponseEntity&lt;List&lt;DisplayPair&lt;String, String&gt;&gt;&gt; getStatus(){\n        List&lt;DisplayPair&lt;String, String&gt;&gt;status =service.allStatus();\n        if(status!=null) {\n            return new ResponseEntity&lt;List&lt;DisplayPair&lt;String,String&gt;&gt;&gt;(status,HttpStatus.OK);\n        }\n        return new ResponseEntity&lt;List&lt;DisplayPair&lt;String,String&gt;&gt;&gt;(HttpStatus.NOT_FOUND);\n    }\n\n}\n</code></pre> TourController.java<pre><code>package com.jt.controller;\n\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.access.prepost.PreAuthorize;\nimport org.springframework.security.core.annotation.AuthenticationPrincipal;\nimport org.springframework.web.bind.annotation.CrossOrigin;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.PutMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport com.jt.config.UserInfoUserDetails;\nimport com.jt.model.batch.TourBatch;\nimport com.jt.model.tour.DifficultyLevel;\nimport com.jt.model.tour.GuidedTour;\nimport com.jt.model.tour.Mode;\nimport com.jt.service.BatchService;\nimport com.jt.service.TourService;\n\n@RequestMapping(\"/tours\")\n@CrossOrigin(origins = \"*\")\n@RestController\npublic class TourController {\n    @Autowired\n    private TourService tourService;\n    @Autowired\n    private BatchService batchService;\n\n    @GetMapping(\"/day\")\n    public ResponseEntity&lt;List&lt;GuidedTour&gt;&gt; filterTourByDuration(\n            @RequestParam(value = \"minDays\", required=false, defaultValue=\"-1\" ) int minDays,\n            @RequestParam(value = \"maxDays\", required=false, defaultValue=\"\"+Integer.MAX_VALUE) int maxDays) {\n\n        List&lt;GuidedTour&gt; guidedTour=tourService.filterTourByDuration(minDays,maxDays);\n        if(!guidedTour.isEmpty()) {\n            return new ResponseEntity&lt;List&lt;GuidedTour&gt;&gt;(guidedTour,HttpStatus.OK);\n        }\n        return new ResponseEntity&lt;List&lt;GuidedTour&gt;&gt;(HttpStatus.NOT_FOUND);\n    }\n\n\n\n    @GetMapping(\"/place\")\n    public ResponseEntity&lt;List&lt;GuidedTour&gt;&gt; filteredToursByPlace(\n            @RequestParam(value = \"source\", required = false) String source,\n            @RequestParam(value = \"destination\", required = false) String destination) {\n        List&lt;GuidedTour&gt; tours = tourService.filteredToursByPlace(source, destination);\n        if(!tours.isEmpty()) {\n            return new ResponseEntity&lt;List&lt;GuidedTour&gt;&gt;(tours,HttpStatus.OK);\n        }\n        return new ResponseEntity&lt;List&lt;GuidedTour&gt;&gt;(HttpStatus.NOT_FOUND);\n    }\n\n    @GetMapping(\"/mode\")\n    public ResponseEntity&lt;List&lt;GuidedTour&gt;&gt; filteredToursByMode(\n            @RequestParam(value = \"mode\", required = false) String mode) {\n        List&lt;GuidedTour&gt; tours = tourService.filteredToursByMode(Mode.fromString(mode));\n        if(!tours.isEmpty()) {\n            return new ResponseEntity&lt;List&lt;GuidedTour&gt;&gt;(tours,HttpStatus.OK);\n        }\n        return new ResponseEntity&lt;List&lt;GuidedTour&gt;&gt;(HttpStatus.NOT_FOUND);\n    }\n\n    @GetMapping(\"/difficultyLevel\")\n    public ResponseEntity&lt;List&lt;GuidedTour&gt;&gt; filteredToursByDifficultyLevel(\n            @RequestParam(value = \"difficultyLevel\", required = false) String difficultyLevel) {\n        List&lt;GuidedTour&gt; tours = tourService.filteredToursByDifficultyLevel(DifficultyLevel.fromString(difficultyLevel));\n        if(!tours.isEmpty()) {\n            return new ResponseEntity&lt;List&lt;GuidedTour&gt;&gt;(tours,HttpStatus.OK);\n        }\n        return new ResponseEntity&lt;List&lt;GuidedTour&gt;&gt;(HttpStatus.NOT_FOUND);\n    }\n\n\n    @GetMapping(\"/popular\")\n    public ResponseEntity&lt;List&lt;GuidedTour&gt;&gt; getMostPopularTours() {\n        List&lt;GuidedTour&gt; tours = tourService.getMostPopularTours();\n        if (tours != null) {\n            return new ResponseEntity&lt;&gt;(tours, HttpStatus.OK);\n        }\n        return new ResponseEntity&lt;&gt;(HttpStatus.NOT_FOUND);\n    }\n\n\n\n    @PostMapping()\n    @PreAuthorize(\"hasAuthority('ADMIN')\")\n    public ResponseEntity&lt;GuidedTour&gt; saveTour(@RequestBody GuidedTour tour) {\n\n        System.out.println(\"inside tour save tour\");\n        if (tourService.addTour(tour) != null) {\n            return new ResponseEntity&lt;GuidedTour&gt;(tour, HttpStatus.CREATED);\n        }\n        return new ResponseEntity&lt;GuidedTour&gt;(HttpStatus.NOT_ACCEPTABLE);\n    }\n    @GetMapping()\n    public ResponseEntity&lt;List&lt;GuidedTour&gt;&gt; getTours() {\n        List&lt;GuidedTour&gt; tours = tourService.getTours();\n        if (tours != null)\n            return new ResponseEntity&lt;List&lt;GuidedTour&gt;&gt;(tours, HttpStatus.OK);\n        return new ResponseEntity&lt;&gt;(HttpStatus.NOT_FOUND);\n    }\n\n    @GetMapping(\"/{id}\")\n    public ResponseEntity&lt;GuidedTour&gt; getTourById(@PathVariable Long id) {\n        GuidedTour tour = tourService.getTourById(id);\n        if (tour != null)\n            return new ResponseEntity&lt;GuidedTour&gt;(tour, HttpStatus.OK);\n        return new ResponseEntity&lt;&gt;(HttpStatus.NOT_FOUND);\n    }\n\n    @GetMapping(\"/{tourId}/batches\")\n    public ResponseEntity&lt;List&lt;TourBatch&gt;&gt; getBatchesByTourId(@PathVariable Long tourId , @AuthenticationPrincipal UserInfoUserDetails userDetails) {\n\n        if(userDetails!=null &amp;&amp; userDetails.getAuthorities().stream()\n                .anyMatch(a -&gt; a.getAuthority().equals(\"ADMIN\"))) {\n\n            List&lt;TourBatch&gt; tourBatches = batchService.getBatchesByTourId(tourId);\n            if (tourBatches != null)\n                return new ResponseEntity&lt;List&lt;TourBatch&gt;&gt;(tourBatches, HttpStatus.OK);\n            return new ResponseEntity&lt;List&lt;TourBatch&gt;&gt;(HttpStatus.NOT_FOUND);\n        }\n        else {\n            List&lt;TourBatch&gt; tourBatches = batchService.getBatchesByTourIdByUser(tourId);\n            if (tourBatches != null)\n                return new ResponseEntity&lt;List&lt;TourBatch&gt;&gt;(tourBatches, HttpStatus.OK);\n            return new ResponseEntity&lt;List&lt;TourBatch&gt;&gt;(HttpStatus.NOT_FOUND);\n        }\n    }\n\n\n\n    @PutMapping()\n    @PreAuthorize(\"hasAuthority('ADMIN')\")\n    public ResponseEntity&lt;GuidedTour&gt; updateTour(@RequestBody GuidedTour tour) {\n        GuidedTour guidedTour=this.tourService.updateTour(tour);\n        if(guidedTour!=null) {\n            return new ResponseEntity&lt;GuidedTour&gt;(guidedTour,HttpStatus.OK);\n        }\n        return new ResponseEntity&lt;GuidedTour&gt;(HttpStatus.NOT_MODIFIED);\n\n    }\n\n    @DeleteMapping(\"/{id}\")\n    @PreAuthorize(\"hasAuthority('ADMIN')\")\n    public ResponseEntity&lt;HttpStatus&gt; deleteTour(@PathVariable Long id) {\n        if (tourService.deleteTourById(id) == true) {\n            return new ResponseEntity&lt;HttpStatus&gt;(HttpStatus.OK);\n        }\n        return new ResponseEntity&lt;HttpStatus&gt;(HttpStatus.NOT_ACCEPTABLE); \n    }\n\n\n}\n</code></pre></p> UserController.java<pre><code>package com.jt.controller;\n\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport com.jt.model.auth.User;\nimport com.jt.service.UserService;\n\n@RequestMapping(\"/users\")\n@RestController\npublic class UserController {\n    @Autowired\n    private UserService service;\n\n    @PostMapping()\n    public ResponseEntity&lt;User&gt; addUser(@RequestBody User user) throws Exception {\n        User addUser=this.service.createTheUser(user);\n        if(addUser!=null) {\n            return new ResponseEntity&lt;User&gt;(addUser,HttpStatus.CREATED);\n        }\n        return new ResponseEntity&lt;User&gt;(addUser,HttpStatus.NOT_ACCEPTABLE);\n    }\n    @GetMapping()\n    public ResponseEntity&lt;List&lt;User&gt;&gt; getUsers() {\n        List&lt;User&gt; users=this.service.getAllTheUsers();\n        if(users!=null) {\n            return new ResponseEntity&lt;List&lt;User&gt;&gt;(users,HttpStatus.OK);\n        }\n        return new ResponseEntity&lt;List&lt;User&gt;&gt;(users,HttpStatus.NOT_FOUND);\n\n    }\n\n\n}\n</code></pre>"},{"location":"Spring%20Boot/JT%20Adventure%20Tour/main/initializer/","title":"Initializer","text":"DummyDataLoader.java<pre><code>package com.jt.initializer;\n\nimport java.time.LocalDate;\nimport java.util.Arrays;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.stereotype.Component;\n\nimport com.jt.model.batch.TourBatch;\nimport com.jt.model.tour.Accomodation;\nimport com.jt.model.tour.DayPlan;\nimport com.jt.model.tour.GuidedTour;\nimport com.jt.model.tour.Itinerary;\nimport com.jt.model.tour.RoomType;\nimport com.jt.model.user.MobileNumber;\nimport com.jt.model.user.Name;\nimport com.jt.model.user.Traveller;\nimport com.jt.repository.BatchRepository;\nimport com.jt.repository.TourRepository;\nimport jakarta.annotation.PostConstruct;\n\n@Component\npublic class DummyDataLoader {\n\n    @Autowired\n    private TourRepository tourRepository;\n\n    @Autowired\n    BatchRepository batchRepository;\n\n    @PostConstruct\n    public void loadDummyTourData() {\n        // Tour 1\n        GuidedTour guidedTour1 = new GuidedTour();\n        guidedTour1.setName(\"Mumbai-Nasik\");\n        guidedTour1.setMode(\"Bicycle\");\n        guidedTour1.setDifficultyLevel(\"Easy\");\n        guidedTour1.setStartAt(\"Mumbai\");\n        guidedTour1.setEndAt(\"Nasik\");\n        Itinerary itinerary1 = new Itinerary();\n        itinerary1.setDayPlans(Arrays.asList(\n                new DayPlan(1, \"Mumbai\", 0,\n                        \"reporting between 5 pm to 7 pm. Introduction, tour briefing and ice breaker\",\n                        new Accomodation(\"Hotel Mayur\", \"SB road, Pune\", RoomType.DOUBLE_BED)),\n                new DayPlan(2, \"Nasik\", 150, \"Ride on Mumbai Agra road\",\n                        new Accomodation(\"Hotel Dwaraka\", \"Dwaraka, Nashik\", RoomType.TWIN_BED)),\n                new DayPlan(3, \"Nasik\", 0,\n                        \"Breakfast, Certificate distribution and tour ends. Participants return home\",\n                        new Accomodation(\"Hotel Dwaraka\", \"Dwaraka, Nashik\", RoomType.TWIN_BED))));\n        guidedTour1.setItinerary(itinerary1);\n        tourRepository.save(guidedTour1);\n\n        TourBatch batch1Tour1 = new TourBatch();\n        batch1Tour1.setTour(guidedTour1);\n        batch1Tour1.setStartDate(LocalDate.now());\n        batch1Tour1.setEndDate(guidedTour1.getDays());\n        batch1Tour1.setCapacity(5);\n        batch1Tour1.setPerParticipantCost(3000.0);\n        batch1Tour1.setStatus(\"Completed\");\n        batch1Tour1.setGuide(new Traveller(0, new Name(\"Rahul\", \"Sharma\"), new MobileNumber(\"+91866388475\")));\n        batchRepository.save(batch1Tour1);\n\n        TourBatch batch2Tour1 = new TourBatch();\n        batch2Tour1.setTour(guidedTour1);\n        batch2Tour1.setStartDate(LocalDate.of(2023, 10, 5));\n        batch2Tour1.setEndDate(guidedTour1.getDays());\n        batch2Tour1.setCapacity(10);\n        batch2Tour1.setPerParticipantCost(1000.0);\n        batch2Tour1.setStatus(\"Completed\");\n        batch2Tour1.setGuide(new Traveller(0, new Name(\"Ram\", \"Thakur\"), new MobileNumber(\"+917856765643\")));\n        batchRepository.save(batch2Tour1);\n\n        TourBatch batch3Tour1 = new TourBatch();\n        batch3Tour1.setTour(guidedTour1);\n        batch3Tour1.setStartDate(LocalDate.of(2023, 11, 6));\n        batch3Tour1.setEndDate(guidedTour1.getDays());\n        batch3Tour1.setCapacity(5);\n        batch3Tour1.setPerParticipantCost(3000.0);\n        batch3Tour1.setStatus(\"Active\");\n        batch3Tour1.setGuide(new Traveller(0, new Name(\"Raj\", \"Nikam\"), new MobileNumber(\"+91866388475\")));\n        batchRepository.save(batch3Tour1);\n\n        TourBatch batch4Tour1 = new TourBatch();\n        batch4Tour1.setTour(guidedTour1);\n        batch4Tour1.setStartDate(LocalDate.of(2023,10,23));\n        batch4Tour1.setEndDate(guidedTour1.getDays());\n        batch4Tour1.setCapacity(10);\n        batch4Tour1.setPerParticipantCost(3000.0);\n        batch4Tour1.setStatus(\"Completed\");\n        batch4Tour1.setGuide(new Traveller(0, new Name(\"Rahul\", \"Sharma\"), new MobileNumber(\"+91866388475\")));\n        batchRepository.save(batch4Tour1);\n\n        // Tour 2\n        GuidedTour guidedTour2 = new GuidedTour();\n        guidedTour2.setName(\"Jaipur-Udaipur\");\n        guidedTour2.setMode(\"Motorbike\");\n        guidedTour2.setDifficultyLevel(\"Moderate\");\n        guidedTour2.setStartAt(\"Jaipur\");\n        guidedTour2.setEndAt(\"Udaipur\");\n        Itinerary itinerary2 = new Itinerary();\n        itinerary2.setDayPlans(Arrays.asList(\n                new DayPlan(1, \"Jaipur\", 0, \"Check-in and tour briefing\",\n                        new Accomodation(\"Hotel Royal\", \"City Center, Jaipur\", RoomType.DOUBLE_BED)),\n                new DayPlan(2, \"Jaipur\", 120, \"Explore Amber Fort and local markets\",\n                        new Accomodation(\"Heritage Palace\", \"Old City, Jaipur\", RoomType.DOUBLE_BED)),\n                new DayPlan(3, \"Udaipur\", 300, \"Drive to Udaipur and visit City Palace\",\n                        new Accomodation(\"Lake View Resort\", \"Pichola, Udaipur\", RoomType.TWIN_BED))));\n        guidedTour2.setItinerary(itinerary2);\n        tourRepository.save(guidedTour2);\n\n\n        TourBatch batch1Tour2 = new TourBatch();\n        batch1Tour2.setTour(guidedTour2);\n        batch1Tour2.setStartDate(LocalDate.of(2023,10,23));\n        batch1Tour2.setEndDate(guidedTour2.getDays());\n        batch1Tour2.setCapacity(10);\n        batch1Tour2.setPerParticipantCost(3000.0);\n        batch1Tour2.setStatus(\"Completed\");\n        batch1Tour2.setGuide(new Traveller(0, new Name(\"Rahul\", \"Sharma\"), new MobileNumber(\"+91866388475\")));\n        batchRepository.save(batch1Tour2);\n\n        TourBatch batch2Tour2 = new TourBatch();\n        batch2Tour2.setTour(guidedTour2);\n        batch2Tour2.setStartDate(LocalDate.of(2023, 11, 6));\n        batch2Tour2.setEndDate(guidedTour2.getDays());\n        batch2Tour2.setCapacity(5);\n        batch2Tour2.setPerParticipantCost(3000.0);\n        batch2Tour2.setStatus(\"Active\");\n        batch2Tour2.setGuide(new Traveller(0, new Name(\"Raj\", \"Nikam\"), new MobileNumber(\"+91866388475\")));\n        batchRepository.save(batch2Tour2);\n\n        TourBatch batch3Tour2 = new TourBatch();\n        batch3Tour2.setTour(guidedTour2);\n        batch3Tour2.setStartDate(LocalDate.of(2023,10,23));\n        batch3Tour2.setEndDate(guidedTour2.getDays());\n        batch3Tour2.setCapacity(10);\n        batch3Tour2.setPerParticipantCost(3000.0);\n        batch3Tour2.setStatus(\"Active\");\n        batch3Tour2.setGuide(new Traveller(0, new Name(\"Rahul\", \"Sharma\"), new MobileNumber(\"+91866388475\")));\n        batchRepository.save(batch3Tour2);\n\n        // Tour 3\n        GuidedTour guidedTour3 = new GuidedTour();\n        guidedTour3.setName(\"Himalayan Trek\");\n        guidedTour3.setMode(\"Bicycle\");\n        guidedTour3.setDifficultyLevel(\"High\");\n        guidedTour3.setStartAt(\"Manali\");\n        guidedTour3.setEndAt(\"Leh\");\n        Itinerary itinerary3 = new Itinerary();\n        itinerary3\n                .setDayPlans(\n                        Arrays.asList(\n                                new DayPlan(1, \"Manali\", 0, \"Check-in and trek briefing\",\n                                        new Accomodation(\"Mountain Lodge\", \"Himalayan Base, Manali\",\n                                                RoomType.TWIN_BED)),\n                                new DayPlan(2, \"Himalayas\", 180, \"Hike through scenic trails\",\n                                        new Accomodation(\"Alpine Camp\", \"High Altitude Campsite\", RoomType.DOUBLE_BED)),\n                                new DayPlan(3, \"Leh\", 240, \"Reach Leh and explore local markets\",\n                                        new Accomodation(\"Valley View Hotel\", \"Downtown Leh\", RoomType.DOUBLE_BED))));\n        guidedTour3.setItinerary(itinerary3);\n        tourRepository.save(guidedTour3);\n\n\n        TourBatch batch1Tour3 = new TourBatch();\n        batch1Tour3.setTour(guidedTour3);\n        batch1Tour3.setStartDate(LocalDate.of(2023,10,23));\n        batch1Tour3.setEndDate(guidedTour3.getDays());\n        batch1Tour3.setCapacity(10);\n        batch1Tour3.setPerParticipantCost(3000.0);\n        batch1Tour3.setStatus(\"Completed\");\n        batch1Tour3.setGuide(new Traveller(0, new Name(\"Makarand\", \"Sharma\"), new MobileNumber(\"+91866388475\")));\n        batchRepository.save(batch1Tour3);\n\n        TourBatch batch2Tour3 = new TourBatch();\n        batch2Tour3.setTour(guidedTour3);\n        batch2Tour3.setStartDate(LocalDate.of(2023,10,23));\n        batch2Tour3.setEndDate(guidedTour3.getDays());\n        batch2Tour3.setCapacity(10);\n        batch2Tour3.setPerParticipantCost(1000.0);\n        batch2Tour3.setStatus(\"Active\");\n        batch2Tour3.setGuide(new Traveller(0, new Name(\"Rahul\", \"Vishwakarama\"), new MobileNumber(\"+91866388475\")));\n        batchRepository.save(batch2Tour3);\n\n        TourBatch batch3Tour3 = new TourBatch();\n        batch3Tour3.setTour(guidedTour3);\n        batch3Tour3.setStartDate(LocalDate.of(2023,11,11));\n        batch3Tour3.setEndDate(guidedTour3.getDays());\n        batch3Tour3.setCapacity(5);\n        batch3Tour3.setPerParticipantCost(3000.0);\n        batch3Tour3.setStatus(\"Completed\");\n        batch3Tour3.setGuide(new Traveller(0, new Name(\"Rahul\", \"Sharma\"), new MobileNumber(\"+91866388475\")));\n        batchRepository.save(batch3Tour3);\n\n        TourBatch batch4Tour3 = new TourBatch();\n        batch3Tour2.setTour(guidedTour3);\n        batch3Tour2.setStartDate(LocalDate.of(2023,11,23));\n        batch3Tour2.setEndDate(guidedTour3.getDays());\n        batch3Tour2.setCapacity(3);\n        batch3Tour2.setPerParticipantCost(5000.0);\n        batch3Tour2.setStatus(\"Completed\");\n        batch3Tour2.setGuide(new Traveller(0, new Name(\"Rajni\", \"Kamath\"), new MobileNumber(\"+91866388475\")));\n        batchRepository.save(batch3Tour2);\n\n        TourBatch batch5Tour3 = new TourBatch();\n        batch5Tour3.setTour(guidedTour3);\n        batch5Tour3.setStartDate(LocalDate.of(2023,9,23));\n        batch5Tour3.setEndDate(guidedTour3.getDays());\n        batch5Tour3.setCapacity(10);\n        batch5Tour3.setPerParticipantCost(2000.0);\n        batch5Tour3.setStatus(\"Completed\");\n        batch5Tour3.setGuide(new Traveller(0, new Name(\"Rahul\", \"Sharma\"), new MobileNumber(\"+91866388475\")));\n        batchRepository.save(batch5Tour3);\n\n\n        // Tour 4\n        GuidedTour guidedTour4 = new GuidedTour();\n        guidedTour4.setName(\"Amazon Rainforest Exploration\");\n        guidedTour4.setMode(\"Motorbike\");\n        guidedTour4.setDifficultyLevel(\"Moderate\");\n        guidedTour4.setStartAt(\"Manaus\");\n        guidedTour4.setEndAt(\"Iquitos\");\n        Itinerary itinerary4 = new Itinerary();\n        itinerary4.setDayPlans(Arrays.asList(\n                new DayPlan(1, \"Manaus\", 0, \"Board boat and start the journey\",\n                        new Accomodation(\"River Cruise Ship\", \"Amazon River\", RoomType.TWIN_BED)),\n                new DayPlan(2, \"Amazon River\", 240, \"Explore the diverse wildlife\",\n                        new Accomodation(\"Jungle Lodge\", \"Deep in the Rainforest\", RoomType.DOUBLE_BED)),\n                new DayPlan(3, \"Iquitos\", 120, \"Reach Iquitos and visit local communities\",\n                        new Accomodation(\"Riverside Resort\", \"Iquitos\", RoomType.DOUBLE_BED))));\n        guidedTour4.setItinerary(itinerary4);\n        tourRepository.save(guidedTour4);\n\n        TourBatch batch1Tour4 = new TourBatch();\n        batch1Tour4.setTour(guidedTour4);\n        batch1Tour4.setStartDate(LocalDate.of(2023,9,03));\n        batch1Tour4.setEndDate(guidedTour4.getDays());\n        batch1Tour4.setCapacity(5);\n        batch1Tour4.setPerParticipantCost(2500.0);\n        batch1Tour4.setStatus(\"Active\");\n        batch1Tour4.setGuide(new Traveller(0, new Name(\"Aniket\", \"Kadam\"), new MobileNumber(\"+91866388475\")));\n        batchRepository.save(batch1Tour4);\n\n        // Tour 5\n        GuidedTour guidedTour5 = new GuidedTour();\n        guidedTour5.setName(\"Cultural Delights of Kyoto\");\n        guidedTour5.setMode(\"Walk\");\n        guidedTour5.setDifficultyLevel(\"Easy\");\n        guidedTour5.setStartAt(\"Kyoto\");\n        guidedTour5.setEndAt(\"Osaka\");\n        Itinerary itinerary5 = new Itinerary();\n        itinerary5\n                .setDayPlans(\n                        Arrays.asList(\n                                new DayPlan(1, \"Kyoto\", 0, \"Check-in and explore local temples\",\n                                        new Accomodation(\"Traditional Inn\", \"Gion District, Kyoto\",\n                                                RoomType.DOUBLE_BED)),\n                                new DayPlan(2, \"Kyoto\", 180, \"Visit historic shrines and traditional tea ceremony\",\n                                        new Accomodation(\"Ryokan Kumo\", \"Higashiyama, Kyoto\", RoomType.TWIN_BED)),\n                                new DayPlan(3, \"Osaka\", 60, \"Travel to Osaka and enjoy street food\",\n                                        new Accomodation(\"City View Hotel\", \"Dotonbori, Osaka\", RoomType.DOUBLE_BED))));\n        guidedTour5.setItinerary(itinerary5);\n        tourRepository.save(guidedTour5);\n\n        TourBatch batch1Tour5 = new TourBatch();\n        batch1Tour5.setTour(guidedTour5);\n        batch1Tour5.setStartDate(LocalDate.of(2023,6,2));\n        batch1Tour5.setEndDate(guidedTour5.getDays());\n        batch1Tour5.setCapacity(20);\n        batch1Tour5.setPerParticipantCost(1000.0);\n        batch1Tour5.setStatus(\"Completed\");\n        batch1Tour5.setGuide(new Traveller(0, new Name(\"Rahul\", \"Aaand\"), new MobileNumber(\"+91866388475\")));\n        batchRepository.save(batch1Tour5);\n\n        TourBatch batch2Tour5 = new TourBatch();\n        batch2Tour5.setTour(guidedTour5);\n        batch2Tour5.setStartDate(LocalDate.of(2023,8,21));\n        batch2Tour5.setEndDate(guidedTour5.getDays());\n        batch2Tour5.setCapacity(10);\n        batch2Tour5.setPerParticipantCost(5000.0);\n        batch2Tour5.setStatus(\"Active\");\n        batch2Tour5.setGuide(new Traveller(0, new Name(\"Harshit\", \"Tiware\"), new MobileNumber(\"+91866388475\")));\n        batchRepository.save(batch2Tour5);\n\n        // Tour 6\n//      GuidedTour guidedTour6 = new GuidedTour();\n//      guidedTour6.setName(\"Safari Adventure in Serengeti\");\n//      guidedTour6.setMode(\"Motorbike\");\n//      guidedTour6.setDifficultyLevel(\"High\");\n//      guidedTour6.setStartAt(\"Arusha\");\n//      guidedTour6.setEndAt(\"Ngorongoro\");\n//      Itinerary itinerary6 = new Itinerary();\n//      itinerary6.setDayPlans(Arrays.asList(\n//              new DayPlan(1, \"Arusha\", 0, \"Arrival and safari orientation\",\n//                      new Accomodation(\"Safari Lodge\", \"Arusha\", RoomType.DOUBLE_BED)),\n//              new DayPlan(2, \"Serengeti\", 360, \"Full-day safari adventure\",\n//                      new Accomodation(\"Tented Camp\", \"Serengeti National Park\", RoomType.TWIN_BED)),\n//              new DayPlan(3, \"Ngorongoro\", 180, \"Visit Ngorongoro Crater and wildlife observation\",\n//                      new Accomodation(\"Crater View Resort\", \"Ngorongoro Conservation Area\", RoomType.DOUBLE_BED))));\n//      guidedTour6.setItinerary(itinerary6);\n//      tourRepository.save(guidedTour6);\n    }\n}\n</code></pre>"},{"location":"Spring%20Boot/JT%20Adventure%20Tour/main/jt/","title":"JT Tours Application","text":"JttoursApplication.java<pre><code>package com.jt;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.scheduling.annotation.EnableScheduling;\n\n\n@SpringBootApplication\n@EnableScheduling\npublic class JttoursApplication {\n    public static void main(String[] args) {\n     SpringApplication.run(JttoursApplication.class, args);\n\n    }\n}\n</code></pre>"},{"location":"Spring%20Boot/JT%20Adventure%20Tour/main/model/","title":"Model","text":""},{"location":"Spring%20Boot/JT%20Adventure%20Tour/main/model/#auth","title":"Auth","text":"<p>Role.java<pre><code>package com.jt.model.auth;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport com.jt.model.DisplayPair;\n\npublic enum Role {\n\n    ADMIN(\"ADMIN\"), CUSTOMER(\"CUSTOMER\");\n    private final String role;\n    private static List&lt;DisplayPair&lt;String, String&gt;&gt; DisplayPairList = new ArrayList&lt;DisplayPair&lt;String, String&gt;&gt;();\n\n    public static List&lt;DisplayPair&lt;String, String&gt;&gt; getDisplayPairs() {\n        for (Role s : Role.values()) {\n            DisplayPairList.add(new DisplayPair&lt;String, String&gt;(s.name(), s.role));\n        }\n        return DisplayPairList;\n    }\n\n    private Role(String role) {\n        this.role = role;\n    }\n\n    private Role() {\n        this.role = \"\";\n    }\n\n    public String getRole() {\n        return role;\n    }\n\n    public static Role fromString(String role) {\n\n        try {\n            return Role.valueOf(role.toUpperCase());\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"No enum constant for \" + role);\n        }\n    }\n\n    @Override\n    public String toString() {\n        return this.getRole();\n    }\n\n}\n</code></pre> User.java<pre><code>package com.jt.model.auth;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.EnumType;\nimport jakarta.persistence.Enumerated;\nimport jakarta.persistence.Id;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Entity\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class User{\n\n    private String password ;\n    @Id\n    private String userName ;\n\n    @Enumerated(EnumType.STRING)\n    private Role role;\n\n}\n</code></pre></p>"},{"location":"Spring%20Boot/JT%20Adventure%20Tour/main/model/#batch","title":"Batch","text":"<p>Booking.java<pre><code>package com.jt.model.batch;\n\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport com.jt.model.user.Traveller;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport jakarta.persistence.CollectionTable;\nimport jakarta.persistence.ElementCollection;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.Table;\n@Entity\n@Table(name=\"booking\")\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Booking {\n    @Id\n    @GeneratedValue(strategy= GenerationType.AUTO )\n    private Long id;\n\n    @JsonFormat(shape=JsonFormat.Shape.STRING, pattern=\"dd-MM-yyyy\")\n    private Date date;\n\n    private double amount;\n\n    private Long batchId;\n    private String username;\n\n    @ElementCollection\n    @CollectionTable(name = \"traveller\", joinColumns = @JoinColumn(name=\"bookingId\"))\n    private List&lt;Traveller&gt; travellers= new ArrayList&lt;Traveller&gt;();\n\n}\n</code></pre> Status.java<pre><code>package com.jt.model.batch;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport com.jt.model.DisplayPair;\n\npublic enum Status {\n    ACTIVE(\"Active\"),\n    FULL(\"Full\"),\n    IN_PROGRESS(\"In Progress\"),\n    CANCELLED(\"Cancelled\"),\n    COMPLETED(\"Completed\");\n    private final String status;\n\n    public static List&lt;DisplayPair&lt;String, String&gt;&gt; getDisplayPairs() {\n        List&lt;DisplayPair&lt;String, String&gt;&gt; DisplayPairList = new ArrayList&lt;DisplayPair&lt;String, String&gt;&gt;();\n        for (Status status : Status.values()) {\n            DisplayPairList.add(new DisplayPair&lt;String, String&gt;(status.name(), status.getStatus()));\n        }\n        return DisplayPairList;\n    }\n\n    private Status(String status) {\n        this.status = status;\n    }\n\n    private Status() {\n        this.status=\"\";\n    }\n\n    public String getStatus() {\n        return status;\n    }\n\n    public static Status fromString(String status) {\n\n        try {\n             return Status.valueOf(status.toUpperCase());\n        }catch(IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"No enum constant for \"+status);\n        }\n    }\n\n\n\n}\n</code></pre> TourBatch.java<pre><code>package com.jt.model.batch;\n\nimport java.time.LocalDate;\n\nimport jakarta.persistence.Embedded;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.EnumType;\nimport jakarta.persistence.Enumerated;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.ManyToOne;\nimport jakarta.persistence.Table;\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport com.jt.model.tour.GuidedTour;\nimport com.jt.model.user.Traveller;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Entity\n@Table(name=\"tour_batch\")\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class TourBatch {\n    @Id\n    @GeneratedValue(strategy= GenerationType.IDENTITY )\n    private Long id;\n\n    @JsonFormat(shape=JsonFormat.Shape.STRING, pattern=\"yyyy-MM-dd\")\n    private LocalDate startDate;\n\n    private LocalDate endDate;\n\n    @Enumerated(EnumType.STRING)\n    private Status status;\n    private int capacity;\n    private Double perParticipantCost;\n    private int availableSeats;\n\n    @Embedded\n    private Traveller guide;\n\n    @ManyToOne(targetEntity = GuidedTour.class)\n    @JoinColumn(name = \"tourId\")\n    private GuidedTour tour;\n\n    public void setEndDate(int duration) {\n        this.endDate=getStartDate().plusDays(duration); \n    }\n    @JsonFormat(shape=JsonFormat.Shape.STRING, pattern=\"yyyy-MM-dd\")\n    public void setEndDate(LocalDate endDate) {\n        this.endDate=endDate;\n\n    }\n\n    public void setAvailableSeats(int bookedSeats ) {\n        this.availableSeats=this.capacity-bookedSeats;\n        if(this.availableSeats&lt;=0) {\n            this.status=Status.FULL;\n        }\n    }\n    public void setStatus(String status) {\n        this.status=Status.fromString(status);\n    }\n\n\n}\n</code></pre></p>"},{"location":"Spring%20Boot/JT%20Adventure%20Tour/main/model/#tour","title":"Tour","text":"<p>Accomodation.java<pre><code>package com.jt.model.tour;\n\nimport jakarta.persistence.Embeddable;\nimport jakarta.persistence.EnumType;\nimport jakarta.persistence.Enumerated;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Embeddable\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Accomodation {\n\n    private String hotelName;\n    private String address;\n\n    @Enumerated(EnumType.STRING)\n    private RoomType roomType;\n\n    public void setRoomType(String roomType) {\n        this.roomType = RoomType.fromString(roomType);\n    }\n\n\n\n}\n</code></pre> DayPlan.java<pre><code>package com.jt.model.tour;\n\nimport jakarta.persistence.Embeddable;\nimport jakarta.persistence.Embedded;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Embeddable\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class DayPlan {\n\n    private int dayCount;\n    private String place;\n    private double distance;\n    private String activity;\n\n    @Embedded\n    private Accomodation accomodation;\n\n\n}\n</code></pre> DifficultyLevel.java<pre><code>package com.jt.model.tour;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport com.jt.model.DisplayPair;\n\npublic enum DifficultyLevel {\n    HIGH(\"High\"),\n    MODERATE(\"Moderate\"),\n    EASY(\"Easy\");\n    private final String DifficultyLevelType;\n\n    public static List&lt;DisplayPair&lt;String, String&gt;&gt; getDisplayPairs() {\n        List&lt;DisplayPair&lt;String,String&gt;&gt; displayPairList = new ArrayList&lt;&gt;() ;\n        for (DifficultyLevel difficulty : DifficultyLevel.values()) {\n            displayPairList.add(new DisplayPair&lt;String, String&gt;(difficulty.name(), difficulty.DifficultyLevelType));\n        }\n        return displayPairList;\n    }\n\n    private DifficultyLevel(String difficultyLevelType) {\n        this.DifficultyLevelType = difficultyLevelType;\n    }\n\n    public String getDifficultyLevelType() {\n        return this.DifficultyLevelType;\n    }\n\n    public static DifficultyLevel fromString(String difficultyLevel) {\n\n        try {\n            return DifficultyLevel.valueOf(difficultyLevel.toUpperCase());\n        }catch(IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"No enum constant for \"+difficultyLevel);\n        }\n    }\n\n}\n</code></pre> GuidedTour.java<pre><code>package com.jt.model.tour;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Embedded;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.EnumType;\nimport jakarta.persistence.Enumerated;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.PrePersist;\nimport jakarta.persistence.PreUpdate;\nimport jakarta.persistence.Table;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Entity\n@Table(name = \"guided_tour\")\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class GuidedTour {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(unique = true)\n    private String name;\n\n    @Enumerated(EnumType.STRING)\n    private Mode mode;\n\n    @Enumerated(EnumType.STRING)\n    private DifficultyLevel difficultyLevel;\n\n    @Embedded\n    private Itinerary itinerary;\n\n    private String startAt;\n    private String endAt;\n\n    private int days;\n    private int nights;\n\n\n    public void setMode(String mode) {\n        this.mode = Mode.fromString(mode);\n    }\n    public void setDifficultyLevel(String difficultyLevel) {\n        this.difficultyLevel = DifficultyLevel.fromString(difficultyLevel);\n    }\n\n    @PreUpdate\n     @PrePersist\n     public void setDaysAndNights() {\n         days = itinerary.getDayPlans().size();\n         nights = days - 1;\n    }\n\n}\n</code></pre> Itinerary.java<pre><code>package com.jt.model.tour;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport jakarta.persistence.CollectionTable;\nimport jakarta.persistence.ElementCollection;\nimport jakarta.persistence.Embeddable;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Embeddable\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Itinerary {\n\n    @ElementCollection\n    @CollectionTable(name = \"daily_plan\")\n    private List&lt;DayPlan&gt; dayPlans= new ArrayList&lt;DayPlan&gt;();\n\n}\n</code></pre> Mode.java<pre><code>package com.jt.model.tour;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport com.jt.model.DisplayPair;\n\npublic enum Mode {\n    WALK(\"Walk\"), BICYCLE(\"Bicycle\"), MOTORBIKE(\"Motorbike\");\n    private final String ModeType;\n\n    public static List&lt;DisplayPair&lt;String, String&gt;&gt; getDisplayPairs() {\n        List&lt;DisplayPair&lt;String, String&gt;&gt; DisplayPairList = new ArrayList&lt;DisplayPair&lt;String, String&gt;&gt;();\n        for (Mode mode : Mode.values()) {\n            DisplayPairList.add(new DisplayPair&lt;String, String&gt;(mode.name(), mode.ModeType));\n        }\n        return DisplayPairList;\n    }\n\n    private Mode(String modeType) {\n        this.ModeType = modeType;\n    }\n\n    public String getModeType() {\n        return this.ModeType;\n    }\n\n    public static Mode fromString(String modeType) {\n\n        try {\n            return Mode.valueOf(modeType.toUpperCase());\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"No enum constant for \" + modeType);\n        }\n    }\n\n}\n</code></pre> RoomType.java<pre><code>package com.jt.model.tour;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport com.jt.model.DisplayPair;\n\npublic enum RoomType {\n    TWIN_BED(\"Twin Bed\"), DOUBLE_BED(\"Double Bed\");\n\n    private final String roomType;\n\n    RoomType(String roomType) {\n        this.roomType = roomType;\n    }\n\n    public String getRoomType() {\n        return roomType;\n    }\n\n    public static RoomType fromString(String roomType) {\n        try {\n            return RoomType.valueOf(roomType.toUpperCase());\n        }\n        catch(Exception e) {\n            for (RoomType room : RoomType.values()) {\n                System.out.println(room.getRoomType());\n                if (room.getRoomType().toUpperCase().equals(roomType.toUpperCase()))\n                    return room;\n            }\n        }\n        throw new IllegalArgumentException(\"No enum constant for \" + roomType);\n    }\n\n    public static List&lt;DisplayPair&lt;String, String&gt;&gt; getDisplayPairs() {\n        List&lt;DisplayPair&lt;String, String&gt;&gt; DisplayPairList = new ArrayList&lt;DisplayPair&lt;String, String&gt;&gt;();\n        for (RoomType room : RoomType.values()) {\n            DisplayPairList.add(new DisplayPair&lt;String, String&gt;(room.name(), room.roomType));\n        }\n        return DisplayPairList;\n    }\n}\n</code></pre></p>"},{"location":"Spring%20Boot/JT%20Adventure%20Tour/main/model/#user","title":"User","text":"<p>MobileNumber.java<pre><code>package com.jt.model.user;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Embeddable\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class MobileNumber {\n\n    private String number;\n\n}\n</code></pre> Name.java<pre><code>package com.jt.model.user;\n\nimport jakarta.persistence.Embeddable;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Embeddable\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Name{\n\n    private String first;\n    private String last;\n}\n</code></pre> Traveller.java<pre><code>package com.jt.model.user;\n\nimport jakarta.persistence.Embeddable;\nimport jakarta.persistence.Embedded;\n//import jakarta.persistence.GeneratedValue;\n//import jakarta.persistence.GenerationType;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Embeddable\npublic class Traveller {\n\n//  @GeneratedValue(strategy = GenerationType.AUTO)\n    private int bookingSequence;\n    @Embedded\n    Name name;\n\n    @Embedded\n    MobileNumber mobile;\n\n\n}\n</code></pre> DisplayPair.java<pre><code>package com.jt.model;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class DisplayPair&lt;U,V&gt; {\n    private U optionValue;\n    private V optionDisplayString;\n}\n</code></pre></p>"},{"location":"Spring%20Boot/JT%20Adventure%20Tour/main/repository/","title":"Repository","text":"<p>BatchRepository.java<pre><code>package com.jt.repository;\n\nimport java.util.Date;\nimport java.util.List;\n\nimport org.springframework.data.jpa.repository.Modifying;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.data.repository.query.Param;\n\nimport com.jt.model.batch.Status;\nimport com.jt.model.batch.TourBatch;\n\nimport jakarta.transaction.Transactional;\n\npublic interface BatchRepository extends CrudRepository&lt;TourBatch, Long&gt; {\n\n    List&lt;TourBatch&gt; findAllByTourId(Long tourId);\n    @Query(value = \"select * from Tour_Batch where TOUR_BATCH.START_DATE &gt;=:minDate AND TOUR_BATCH.START_DATE &lt;=:maxDate\", nativeQuery = true)\n    List&lt;TourBatch&gt; findBatchesBetween(@Param(\"minDate\") Date minDate, @Param(\"maxDate\") Date maxDate);\n\n    @Query(value = \"select * from Tour_Batch  where TOUR_BATCH.START_DATE &gt;=:minDate\", nativeQuery = true)\n    List&lt;TourBatch&gt; findBatchesAfter(@Param(\"minDate\") Date minDate);\n\n    @Query(value = \"select * from Tour_Batch  where TOUR_BATCH.START_DATE &lt;=:maxDate\", nativeQuery = true)\n    List&lt;TourBatch&gt; findBatchesBefore(@Param(\"maxDate\") Date maxDate);\n\n    List&lt;TourBatch&gt; findAllByTourIdAndStatus(Long tourId,Status status) ;\n\n    List&lt;TourBatch&gt; findAllByStatus(Status status) ;\n\n    @Transactional\n    @Modifying\n    @Query(\"UPDATE TourBatch t \"\n            + \"SET t.status = \"\n            + \"CASE \"\n            + \"WHEN t.availableSeats = t.capacity THEN 'CANCELLED' \"\n            + \"WHEN CURRENT_DATE() &gt; t.endDate THEN 'COMPLETED' \"\n            + \"WHEN t.availableSeats &lt; t.capacity THEN 'IN_PROGRESS' \"\n            + \"END \"\n            + \"WHERE CURRENT_DATE() &gt; t.startDate\")\n    void updateStatus();\n\n    @Query(\"SELECT r from TourBatch r WHERE r.status = :status\")\n    List&lt;TourBatch&gt; findBatchByStatus(@Param(\"status\") Status status);\n\n    @Query(\"SELECT r from TourBatch r WHERE r.availableSeats &gt;= :minAvailableSeats AND r.availableSeats &lt;= :maxAvailableSeats\")\n    List&lt;TourBatch&gt; findFilteredAvailableSeats(@Param(\"minAvailableSeats\") int minAvailableSeats, @Param(\"maxAvailableSeats\") int maxAvailableSeats);\n\n    @Query(\"SELECT r from TourBatch r WHERE r.availableSeats &gt;= :minAvailableSeats\")\n    List&lt;TourBatch&gt; findMinAvailableSeats(@Param(\"minAvailableSeats\") int minAvailableSeats);\n\n    @Query(\"SELECT r from TourBatch r WHERE r.availableSeats &lt;= :maxAvailableSeats\")\n    List&lt;TourBatch&gt; findMaxAvailableSeats(@Param(\"maxAvailableSeats\") int maxAvailableSeats);\n\n    @Query(\"SELECT r from TourBatch r WHERE r.perParticipantCost &lt;= :budget\")\n    List&lt;TourBatch&gt; findFilteredPrice(@Param(\"budget\") double budget);\n}\n</code></pre> BookingRepository.java<pre><code>package com.jt.repository;\n\nimport java.util.List;\n\nimport org.springframework.data.repository.CrudRepository;\n\nimport com.jt.model.batch.Booking;\n\npublic interface BookingRepository extends CrudRepository&lt;Booking, Long&gt;{\n\n    List&lt;Booking&gt; findAllByUsername(String username);\n\n    List&lt;Booking&gt; findAllByBatchId(Long id);\n\n}\n</code></pre> MetadataRepository.java<pre><code>package com.jt.repository;\n\npublic interface MetadataRepository {\n\n}\n</code></pre> TourRepository.java<pre><code>package com.jt.repository;\n\nimport java.util.List;\n\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.data.repository.query.Param;\nimport org.springframework.stereotype.Repository;\n\nimport com.jt.model.tour.DifficultyLevel;\nimport com.jt.model.tour.GuidedTour;\nimport com.jt.model.tour.Mode;\n\n@Repository\npublic interface TourRepository extends CrudRepository&lt;GuidedTour, Long&gt; {\n    @Query(\"SELECT r from GuidedTour r WHERE r.days &gt;= :minDays AND r.days &lt;= :maxDays\")\n    List&lt;GuidedTour&gt; filterTourByDuration(@Param(\"minDays\") int minDays, @Param(\"maxDays\") int maxDays);\n\n    @Query(\"SELECT r from GuidedTour r WHERE r.startAt = :source AND r.endAt = :destination\")\n    List&lt;GuidedTour&gt; filterToursByPlaceBetween(@Param(\"source\") String source,\n            @Param(\"destination\") String destination);\n\n    @Query(\"SELECT r from GuidedTour r WHERE r.startAt = :source\")\n    List&lt;GuidedTour&gt; filterToursByPlaceSource(@Param(\"source\") String source);\n\n    @Query(\"SELECT r from GuidedTour r WHERE r.endAt = :destination\")\n    List&lt;GuidedTour&gt; filterToursByPlaceDestination(@Param(\"destination\") String destination);\n\n    @Query(\"SELECT r from GuidedTour r WHERE r.mode = :mode\")\n    List&lt;GuidedTour&gt; filterToursByMode(@Param(\"mode\") Mode mode);\n\n    @Query(\"SELECT r from GuidedTour r WHERE r.difficultyLevel = :difficultyLevel\")\n    List&lt;GuidedTour&gt; filteredToursByDifficultyLevel(@Param(\"difficultyLevel\") DifficultyLevel difficultyLevel);\n\n    @Query(value = \"SELECT t.* FROM guided_tour t \" + \"JOIN (SELECT tour_id, MAX(batch_completed) AS max_completed \"\n            + \"FROM (SELECT tb.tour_id, COUNT(*) AS batch_completed \"\n            + \"FROM tour_batch tb WHERE tb.status = 'COMPLETED' GROUP BY tb.tour_id) AS batches \"\n            + \"GROUP BY tour_id) AS max_batches \" + \"ON t.id = max_batches.tour_id \"\n            + \"ORDER BY max_batches.max_completed DESC \" + \"LIMIT 3\", nativeQuery = true)\n    List&lt;GuidedTour&gt; findMostPopularTours();\n}\n</code></pre> UserRepository.java<pre><code>package com.jt.repository;\n\nimport java.util.Optional;\n\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.stereotype.Repository;\n\nimport com.jt.model.auth.Role;\nimport com.jt.model.auth.User;\n\n@Repository\npublic interface UserRepository extends CrudRepository&lt;User, String&gt; {\n    User findByRole(Role role) ;\n    Optional&lt;User&gt; findByUserName(String email) ;\n}\n</code></pre></p>"},{"location":"Spring%20Boot/JT%20Adventure%20Tour/main/resources/","title":"Resources","text":"application.properties<pre><code>spring.datasource.url=jdbc:mysql://localhost:3306/jttoursdb\nspring.datasource.username=root\nspring.datasource.password = admin\nspring.jpa.hibernate.ddl-auto=create-drop\nspring.jpa.show-sql=true\n\n\n#server.port=8080\n#spring.h2.console.enabled = true\n#spring.h2.console.path = /h2\n#spring.datasource.url = jdbc:h2:mem:memDb;DB_CLOSE_DELAY=-1\n#spring.datasource.driverClassName = org.h2.Driver\n#spring.datasource.username=sa\n#spring.datasource.password = \n</code></pre>"},{"location":"Spring%20Boot/JT%20Adventure%20Tour/main/service/","title":"Service","text":"<p>BatchService.java<pre><code>package com.jt.service;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Optional;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.scheduling.annotation.Scheduled;\nimport org.springframework.stereotype.Service;\n\nimport com.jt.model.batch.Status;\nimport com.jt.model.batch.Booking;\nimport com.jt.model.batch.TourBatch;\nimport com.jt.model.tour.GuidedTour;\nimport com.jt.model.user.Traveller;\nimport com.jt.repository.TourRepository;\nimport com.jt.repository.BatchRepository;\nimport com.jt.repository.BookingRepository;\n\n@Service\npublic class BatchService {\n\n    @Autowired\n    private BatchRepository tourBatchRepository;\n    private TourBatch batch;\n    @Autowired\n    private TourRepository guidedTourRepository;\n    private GuidedTour tour;\n\n    @Autowired\n    private BookingRepository bookingRepository;\n    private List&lt;Booking&gt; bookings;\n\n    public Booking bookTraveller(Booking booking) {\n\n        try {\n\n            Optional&lt;TourBatch&gt; fetchedBatch = this.tourBatchRepository.findById(booking.getBatchId());\n            if(fetchedBatch.isPresent()) {\n                this.batch = fetchedBatch.get();\n                if (this.batch.getAvailableSeats() - booking.getTravellers().size() &gt;= 0) {\n                    this.bookingRepository.save(booking);\n                    bookings = this.bookingRepository.findAllByBatchId(booking.getBatchId());\n                    int bookedSeats = 0;\n                    int sequence = this.batch.getCapacity() - this.batch.getAvailableSeats();\n                    for (Booking booked : bookings) {\n                        bookedSeats += booked.getTravellers().size();\n                    }\n                    List&lt;Traveller&gt; travellers = booking.getTravellers();\n                    for (Traveller traveller : travellers) {\n                        traveller.setBookingSequence(++sequence);\n                    }\n                    this.batch.setAvailableSeats(bookedSeats);\n                    this.tourBatchRepository.save(this.batch);\n                    return booking;\n            }\n            return null;\n            } else {\n                return null;\n            }\n        } catch (Exception e) {\n            return null;\n        }\n\n    }\n\n    public TourBatch addBatch(Long tour_id, TourBatch batch) {\n        try {\n            Optional&lt;GuidedTour&gt; fetchedTour = this.guidedTourRepository.findById(tour_id);\n            if(fetchedTour.isPresent()) {               \n                this.tour = fetchedTour.get();\n                batch.setTour(this.tour);\n                batch.setEndDate(this.tour.getDays());\n                batch.setStatus(\"Active\");\n                batch.getGuide().setBookingSequence(0);\n                int bookedSeats = 0;\n                batch.setAvailableSeats(bookedSeats);\n                this.tourBatchRepository.save(batch);\n                return batch;\n            }\n            return null;\n        } catch (Exception e) {\n            System.out.println(e.getMessage());\n            return null;\n        }\n\n    }\n\n    public List&lt;TourBatch&gt; getBatchesByUser() {\n        return tourBatchRepository.findAllByStatus(Status.ACTIVE);\n    }\n\n    public List&lt;TourBatch&gt; getBatchesByTourId(Long tourId) {\n        GuidedTour tour = guidedTourRepository.findById(tourId).orElse(null);\n        if (tour != null)\n            return tourBatchRepository.findAllByTourId(tourId);\n        return null;\n\n    }\n\n    public List&lt;TourBatch&gt; getBatchesByTourIdByUser(Long tourId) {\n        GuidedTour tour = guidedTourRepository.findById(tourId).orElse(null);\n        if (tour != null) {\n            return tourBatchRepository.findAllByTourIdAndStatus(tourId, Status.ACTIVE);\n        }\n        return null;\n\n    }\n\n    public List&lt;TourBatch&gt; getBatches() {\n        try {\n            return (List&lt;TourBatch&gt;) this.tourBatchRepository.findAll();\n        } catch (Exception e) {\n            return null;\n        }\n    }\n\n    public TourBatch getBatchById(Long batch_id) {\n        try {\n            Optional&lt;TourBatch&gt; fetchedBatch = this.tourBatchRepository.findById(batch_id);\n            if(fetchedBatch.isPresent()) {\n                return fetchedBatch.get();\n            }\n            return null;\n        } catch (Exception e) {\n            return null;\n        }\n\n    }\n\n    public boolean deleteBatchById(Long batch_id) {\n        try {\n            Optional&lt;TourBatch&gt; fetchedBatch = this.tourBatchRepository.findById(batch_id);\n            if (fetchedBatch.isPresent()) {\n                this.batch = fetchedBatch.get();\n                this.batch.setStatus(\"Cancelled\");\n                this.tourBatchRepository.save(this.batch);\n                return true;\n            }\n            else {\n                return false;\n            }       \n        } catch (Exception e) {\n            return false;\n        }\n\n    }\n\n    public TourBatch updateBatch(TourBatch batch) {\n        if (this.getBatchById(batch.getId()) != null) {\n            return tourBatchRepository.save(batch);\n        }\n        return null;\n    }\n\n    public List&lt;TourBatch&gt; getFilteredBatches(Date minDate, Date maxDate) {\n\n        if (maxDate == null &amp;&amp; minDate == null)\n            return null;\n\n        if (minDate != null) {\n            if (maxDate != null) {\n                if (minDate.after(maxDate))\n                    return null;\n                return tourBatchRepository.findBatchesBetween(minDate, maxDate);\n            }\n            return tourBatchRepository.findBatchesAfter(minDate);\n        }\n        return tourBatchRepository.findBatchesBefore(maxDate);\n    }\n\n    @Scheduled(cron = \"0 2 0 * * *\")\n    public void updateStatus() {\n        System.out.println(\"Updating Status of TourBatch on date-change\");\n        tourBatchRepository.updateStatus();\n    }\n\n    public List&lt;TourBatch&gt; getFilteredStatus(Status status) {\n        return tourBatchRepository.findBatchByStatus(status);\n    }\n\n    public List&lt;TourBatch&gt; getFilteredAvailableSeats(int minAvailableSeats, int maxAvailableSeats) {\n        if (minAvailableSeats == -1 &amp;&amp; maxAvailableSeats == -1) {\n            return null;\n        }\n        if (minAvailableSeats == -1) {\n            return tourBatchRepository.findMaxAvailableSeats(maxAvailableSeats);\n        } else if (maxAvailableSeats == -1) {\n            return tourBatchRepository.findMinAvailableSeats(minAvailableSeats);\n        } else if (minAvailableSeats &lt;= maxAvailableSeats) {\n            return tourBatchRepository.findFilteredAvailableSeats(minAvailableSeats, maxAvailableSeats);\n        }\n        return null;\n    }\n\n    public List&lt;TourBatch&gt; getFilteredPrice(double budget) {\n        if (budget &lt; 0 || budget &gt; 10000000)\n            return null;\n        return tourBatchRepository.findFilteredPrice(budget);\n    }\n\n}\n</code></pre> BookingService.java<pre><code>package com.jt.service;\n\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport com.jt.model.batch.Booking;\nimport com.jt.repository.BookingRepository;\n\n@Service\npublic class BookingService {\n\n    @Autowired\n    private BookingRepository bookingRepository;\n\n    public List&lt;Booking&gt; getAllBookings() {\n\n        try {\n            return (List&lt;Booking&gt;) this.bookingRepository.findAll();\n        } catch (Exception e) {\n            return null;\n        }\n\n    }\n\n    public List&lt;Booking&gt; getAllBookingsUser(String username){\n        try {\n            return (List&lt;Booking&gt;) this.bookingRepository.findAllByUsername(username) ;\n        }catch(Exception e) {\n            return null ;\n        }\n    }\n}\n</code></pre> JwtService.java<pre><code>package com.jt.service;\n\nimport java.security.Key;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.function.Function;\n\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.stereotype.Component;\n\nimport io.jsonwebtoken.Claims;\nimport io.jsonwebtoken.Jwts;\nimport io.jsonwebtoken.SignatureAlgorithm;\nimport io.jsonwebtoken.io.Decoders;\nimport io.jsonwebtoken.security.Keys;\n\n@Component\npublic class JwtService {\n    public static final String SECRET = \"5367566B59703373367639792F423F4528482B4D6251655468576D5A71347437\";\n\n\n    public String extractUsername(String token) {\n        return extractClaim(token, Claims::getSubject);\n    }\n\n    public Date extractExpiration(String token) {\n        return extractClaim(token, Claims::getExpiration);\n    }\n\n    public &lt;T&gt; T extractClaim(String token, Function&lt;Claims, T&gt; claimsResolver) {\n        final Claims claims = extractAllClaims(token);\n        return claimsResolver.apply(claims);\n    }\n\n    private Claims extractAllClaims(String token) {\n        return Jwts\n                .parserBuilder()\n                .setSigningKey(getSignKey())\n                .build()\n                .parseClaimsJws(token)\n                .getBody();\n    }\n\n    private Boolean isTokenExpired(String token) {\n        return extractExpiration(token).before(new Date());\n    }\n\n    public Boolean validateToken(String token, UserDetails userDetails) {\n        final String username = extractUsername(token);\n        return (username.equals(userDetails.getUsername()) &amp;&amp; !isTokenExpired(token));\n    }\n\n\n    public String generateToken(String userName) {\n        Map&lt;String,Object&gt; claims = new HashMap&lt;&gt;() ;\n        return createToken(claims,userName);\n    }\n\n    private String createToken(Map&lt;String, Object&gt; claims, String userName) {\n\n        return Jwts.builder()\n                .setClaims(claims)\n                .setSubject(userName)\n                .setIssuedAt(new Date(System.currentTimeMillis()))\n                .setExpiration(new Date(System.currentTimeMillis()+1000*60*30))\n                .signWith(getSignKey(),SignatureAlgorithm.HS256).compact();\n\n    }\n\n    private Key getSignKey() {\n        byte[] keyBytes = Decoders.BASE64.decode(SECRET);\n        return Keys.hmacShaKeyFor(keyBytes);\n    }\n}\n</code></pre> MetadataService.java<pre><code>package com.jt.service;\n\nimport java.util.List;\n\nimport org.springframework.stereotype.Service;\n\nimport com.jt.model.DisplayPair;\nimport com.jt.model.batch.Status;\nimport com.jt.model.tour.DifficultyLevel;\nimport com.jt.model.tour.Mode;\nimport com.jt.model.tour.RoomType;\nimport com.jt.model.auth.Role;\n\n@Service\npublic class MetadataService {\n\n    public List&lt;DisplayPair&lt;String, String&gt;&gt; allDifficultyLevels() {\n        try {\n            return DifficultyLevel.getDisplayPairs();\n        } catch (Exception e) {\n            return null;\n        }\n\n    }\n\n    public List&lt;DisplayPair&lt;String, String&gt;&gt; allModes() {\n        try {\n            return Mode.getDisplayPairs();\n        } catch (Exception e) {\n            return null;\n        }\n\n    }\n\n    public List&lt;DisplayPair&lt;String, String&gt;&gt; allRoomTypes() {\n        try {\n            return RoomType.getDisplayPairs();\n        } catch (Exception e) {\n            return null;\n        }\n\n    }\n\n    public List&lt;DisplayPair&lt;String, String&gt;&gt; allRoles() {\n        try {\n            return Role.getDisplayPairs();\n        } catch (Exception e) {\n            return null;\n        }\n\n    }\n\n    public List&lt;DisplayPair&lt;String, String&gt;&gt; allStatus() {\n        try {\n            return Status.getDisplayPairs();\n        } catch (Exception e) {\n            return null;\n        }\n\n    }\n\n}\n</code></pre> TourService.java<pre><code>package com.jt.service;\n\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Optional;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport com.jt.model.batch.TourBatch;\nimport com.jt.model.tour.DifficultyLevel;\nimport com.jt.model.tour.GuidedTour;\nimport com.jt.model.tour.Mode;\nimport com.jt.repository.TourRepository;\nimport com.jt.repository.BatchRepository;\n\n@Service\npublic class TourService {\n    @Autowired\n    private TourRepository guidedTourRepository;\n    GuidedTour tour;\n    @Autowired\n    private BatchRepository tourBatchRepository;\n\n    public List&lt;GuidedTour&gt; filterTourByDuration(int minDays, int maxDays) {\n        if ((minDays == -1 &amp;&amp; maxDays == Integer.MAX_VALUE) || (minDays &gt; maxDays))\n            return Collections.emptyList();\n        return guidedTourRepository.filterTourByDuration(minDays, maxDays);\n    }\n\n    public GuidedTour addTour(GuidedTour tour) {\n        try {\n            tour.setDays(tour.getItinerary().getDayPlans().size());\n            guidedTourRepository.save(tour);\n\n        } catch (Exception e) {\n            return null;\n        }\n        return tour;\n    }\n\n    public List&lt;GuidedTour&gt; getTours() {\n        try {\n            return (List&lt;GuidedTour&gt;) guidedTourRepository.findAll();\n        } catch (Exception e) {\n            return null;\n        }\n    }\n\n    public GuidedTour getTourById(Long id) {\n        try {\n            Optional&lt;GuidedTour&gt; fetchedTour = this.guidedTourRepository.findById(id);\n            if(fetchedTour.isPresent()) {\n                return fetchedTour.get();\n            }\n            return null;\n        } catch (Exception e) {\n            return null;\n        }\n    }\n\n    public Boolean deleteTourById(Long id) {\n        try {\n            this.guidedTourRepository.deleteById(id);\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n    public GuidedTour updateTour(GuidedTour updateTour) {\n\n        try {\n            this.guidedTourRepository.save(updateTour);\n            return getTourById(updateTour.getId());\n        } catch (Exception e) {\n            return null;\n        }\n\n    }\n\n    public List&lt;TourBatch&gt; getTourBatches(Long tourId) {\n\n        try {\n            return this.tourBatchRepository.findAllByTourId(tourId);\n\n        } catch (Exception e) {\n            return null;\n        }\n\n    }\n\n    public List&lt;GuidedTour&gt; filteredToursByPlace(String source, String destination) {\n\n        if (source == null &amp;&amp; destination == null)\n            return (List&lt;GuidedTour&gt;) guidedTourRepository.findAll();\n        if (source != null) {\n            if (destination != null) {\n                if (source.equals(destination))\n                    return null;\n                return guidedTourRepository.filterToursByPlaceBetween(source, destination);\n            }\n            return guidedTourRepository.filterToursByPlaceSource(source);\n        }\n        return guidedTourRepository.filterToursByPlaceDestination(destination);\n    }\n\n    public List&lt;GuidedTour&gt; filteredToursByMode(Mode mode) {\n\n        if (mode == null)\n            return (List&lt;GuidedTour&gt;) guidedTourRepository.findAll();\n\n        return guidedTourRepository.filterToursByMode(mode);\n    }\n\n    public List&lt;GuidedTour&gt; filteredToursByDifficultyLevel(DifficultyLevel difficultyLevel) {\n\n        if (difficultyLevel == null)\n            return (List&lt;GuidedTour&gt;) guidedTourRepository.findAll();\n\n        return guidedTourRepository.filteredToursByDifficultyLevel(difficultyLevel);\n    }\n\n    public List&lt;GuidedTour&gt; getMostPopularTours() {\n        try {\n            return guidedTourRepository.findMostPopularTours();\n        }\n        catch(Exception e) {\n            return null;\n        }\n    }\n}\n</code></pre> UserService.java<pre><code>package com.jt.service;\n\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.stereotype.Service;\n\nimport com.jt.model.auth.Role;\nimport com.jt.model.auth.User;\nimport com.jt.repository.UserRepository;\n\n@Service\npublic class UserService {\n    @Autowired\n    private UserRepository userRepo ;\n\n    @Autowired\n    private PasswordEncoder passwordEncoder ;\n\n    public User createTheUser(User user) {\n        String role = user.getRole().toString() ;\n\n            if(role.equals(\"ADMIN\")) {\n                User u = userRepo.findByRole(Role.valueOf(\"ADMIN\")) ;\n                if(u==null) {\n                    user.setPassword(passwordEncoder.encode(user.getPassword()));\n                    return userRepo.save(user) ;\n                }\n                else {\n                    return null ;\n                }\n            }\n            else {\n                User u = userRepo.findByUserName(user.getUserName()).orElse(null) ;\n                System.out.println(\"user\"+u) ;\n                if(u==null) {\n                    user.setPassword(passwordEncoder.encode(user.getPassword()));\n                    return userRepo.save(user) ;\n                }\n                return null ;\n            }\n\n\n    }\n\n    public  List&lt;User&gt; getAllTheUsers() {\n        try {\n            return (List&lt;User&gt;) this.userRepo.findAll();\n        }catch(Exception e) {\n            return null;\n        }\n    }\n\n}\n</code></pre></p>"},{"location":"Spring%20Boot/JT%20Adventure%20Tour/test/controller/","title":"Controller Test","text":"<p>AuthControllerTest.java<pre><code>package com.jt.controller;\n\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.mockito.Mockito.when;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\nimport java.util.Optional;\nimport org.springframework.security.core.Authentication;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport org.springframework.http.MediaType;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;\nimport org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.ObjectWriter;\nimport com.jt.auth.AuthRequest;\nimport com.jt.auth.AuthResponse;\nimport com.jt.model.auth.Role;\nimport com.jt.model.auth.User;\nimport com.jt.repository.UserRepository;\nimport com.jt.service.JwtService;\nimport com.jt.service.UserService;\n\n@ExtendWith(MockitoExtension.class)\n@DisplayName(\"AuthController Testing\")\npublic class AuthControllerTest {\n\nprivate MockMvc mockMvc;\n\n    ObjectMapper objectMapper = new ObjectMapper();\n    ObjectWriter objectIdWriter = objectMapper.writer();\n\n    @Mock\n    private UserService userService;\n\n    @Mock\n    private JwtService jwtService;\n\n    @Mock\n    private UserRepository userRepository;\n\n    @Mock\n    private AuthenticationManager authenticationManager;\n\n    @InjectMocks\n    private AuthController authController;\n\n    @BeforeEach\n    public void setUp() {\n        this.mockMvc = MockMvcBuilders.standaloneSetup(authController).build();\n    }\n\n    public static User dummuyUser() {\n        User user = new User();\n        user.setUserName(\"harsh@gmail.com\");\n        user.setPassword(\"harsh\");\n        user.setRole(Role.CUSTOMER);\n        return user;\n    }\n    public static AuthRequest dummyAuthRequest() {\n        AuthRequest authRequest = new AuthRequest();\n        authRequest.setUserName(\"harsh@gmail.com\");\n        authRequest.setPassword(\"harsh\");\n        return authRequest;\n    }\n    @Test\n    @DisplayName(\"Testing register\")\n    public void createUserTest() throws Exception {\n        User user = this.dummuyUser();\n//      Mockito.when(userService.addUser(user)).thenReturn(this.dummuyUser());\n        when(userService.createTheUser(user)).thenReturn(user);\n\n        String content  = objectIdWriter.writeValueAsString(user);\n        MockHttpServletRequestBuilder mockRequestBuilder = MockMvcRequestBuilders.post(\"/auth/register\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .accept(MediaType.APPLICATION_JSON)\n                .content(content);\n\n        mockMvc.perform(mockRequestBuilder)\n                .andExpect(status().isCreated());\n\n    }\n    @Test\n    @DisplayName(\"Testing register of empty user\")\n    public void createUserTestForIvalid() throws Exception {\n        User user = null;\n        String contentInput  = objectIdWriter.writeValueAsString(user);\n        MockHttpServletRequestBuilder mockRequestBuilder = MockMvcRequestBuilders.post(\"/auth/register\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .accept(MediaType.APPLICATION_JSON)\n                .content(contentInput);\n\n        mockMvc.perform(mockRequestBuilder)\n                .andExpect(status().isBadRequest());\n\n    }\n\n    @Test\n    @DisplayName(\"Testing login test\")\n    public void authenticateAndGetTokenTest() throws Exception {\n        AuthRequest authRequest = this.dummyAuthRequest();\n        User user = this.dummuyUser();\n\n        AuthResponse authResponse = new AuthResponse();\n        authResponse.setToken(\"jwtToken\");\n\n        Authentication authentication = Mockito.mock(Authentication.class);\n\n        when(authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(authRequest.getUserName(), authRequest.getPassword())))\n        .thenReturn(authentication);\n\n        when(jwtService.generateToken(authRequest.getUserName())).thenReturn(\"MockedJwtString\");\n\n        when(authentication.isAuthenticated()).thenReturn(true);\n        String content = objectIdWriter.writeValueAsString(authRequest);\n\n        when(userRepository.findByUserName(user.getUserName())).thenReturn(Optional.of(user));\n        MockHttpServletRequestBuilder mockRequestBuilder = MockMvcRequestBuilders.post(\"/auth/login\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .accept(MediaType.APPLICATION_JSON)\n                .content(content);\n\n        mockMvc.perform(mockRequestBuilder)\n                .andExpect(jsonPath(\"$.token\", is(\"MockedJwtString\")));\n\n    }\n\n    @Test\n    @DisplayName(\"Testing login test for invalid credentials\")\n    public void authenticateAndGetTokenTestForInvalid() throws Exception {\n        AuthRequest authRequest = this.dummyAuthRequest();\n\n        Authentication authentication = Mockito.mock(Authentication.class);\n\n        when(authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(authRequest.getUserName(), authRequest.getPassword())))\n                .thenReturn(authentication);\n\n        when(authentication.isAuthenticated()).thenReturn(false);\n\n        String content = objectIdWriter.writeValueAsString(authRequest);\n        try {\n             mockMvc.perform(MockMvcRequestBuilders.post(\"/auth/login\")\n                     .contentType(MediaType.APPLICATION_JSON)\n                     .content(content))\n                     .andExpect(status().isOk())\n                     .andExpect(jsonPath(\"$.error\").value(\"UsernameNotFoundException\"))\n                     .andExpect(jsonPath(\"$.message\").value(\"invalid user request\"));\n\n        }catch(Exception e) {\n            e.printStackTrace();\n        }\n\n    }\n}\n</code></pre> BatchControllerTest.java<pre><code>package com.jt.controller;\n\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.hamcrest.Matchers.hasSize;\nimport static org.hamcrest.Matchers.notNullValue;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\nimport java.io.UnsupportedEncodingException;\nimport java.time.LocalDate;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Date;\nimport java.util.List;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Disabled;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport org.springframework.http.MediaType;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;\nimport org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;\n\nimport com.fasterxml.jackson.databind.ObjectWriter;\nimport com.fasterxml.jackson.databind.json.JsonMapper;\nimport com.jt.model.batch.Booking;\nimport com.jt.model.batch.Status;\nimport com.jt.model.batch.TourBatch;\nimport com.jt.model.tour.GuidedTour;\nimport com.jt.model.user.MobileNumber;\nimport com.jt.model.user.Name;\nimport com.jt.model.user.Traveller;\nimport com.jt.service.BatchService;\n\n@ExtendWith(MockitoExtension.class)\n@DisplayName(\"BatchController Testing\")\npublic class BatchControllerTest {\n\n    private MockMvc mockMvc;\n\n    ObjectMapper objectMapper = JsonMapper.builder()\n            .addModule(new JavaTimeModule())\n            .build();;\n    ObjectWriter objectIdWriter = objectMapper.writer();\n\n    @Mock\n    private BatchService tourBatchService;\n\n    @InjectMocks\n    private BatchController tourBatchController;\n\n    public static TourBatch getDummyDataTourBatch() {\n        LocalDate date=LocalDate.now();\n        TourBatch tb = new TourBatch();\n        GuidedTour gt = new GuidedTour();\n        Traveller tv=new Traveller();\n        MobileNumber mn=new MobileNumber();\n        mn.setNumber(\"9234567899\");\n        Name name=new Name();\n        name.setFirst(\"harsh\");\n        name.setLast(\"last\");\n\n        tv.setMobile(mn);\n        tv.setName(name);\n        tv.setBookingSequence(0);\n\n        gt.setId(1L);\n\n        tb.setId(33L);\n        tb.setStartDate(date);\n        tb.setCapacity(55);\n        tb.setPerParticipantCost(300d);\n        tb.setEndDate(5);\n        tb.setStatus(Status.ACTIVE.toString());\n        tb.setGuide(tv);\n        tb.setTour(TourControllerTest.dummyDataForTour());\n        tb.setAvailableSeats(20);\n        return tb;\n    }\n\n    public static Booking dummyBookingData() {\n        Booking booking = new Booking();\n        Date date = new Date();\n//      Traveller traveller = new Traveller(1, new Name(\"harsh\", \"fulzele\"), new MobileNumber(\"1234567890\"));\n        Traveller traveller = new Traveller();\n        traveller.setBookingSequence(1);\n        traveller.setMobile(new MobileNumber(\"9022018440\"));\n        traveller.setName(new Name(\"harsh\" ,\"fulzele\"));\n\n        booking.setId(1l);\n        booking.setBatchId(1l);\n        booking.setDate(date);\n        booking.setAmount(12000.0);\n        booking.setUsername(\"harsh@gmail.com\");\n        booking.setTravellers(Arrays.asList(traveller));\n        return booking;\n    }\n\n    @BeforeEach\n    public void setUp() {\n        this.mockMvc = MockMvcBuilders.standaloneSetup(tourBatchController).build();\n    }\n    @Test\n    @DisplayName(\"Testing Add book test\")\n    public void AddBookingTest() throws UnsupportedEncodingException, Exception {\n\n        Booking book = this.dummyBookingData();\n        System.out.println(book);\n        Mockito.when(tourBatchService.bookTraveller(Mockito.any(Booking.class))).thenReturn(book);\n\n        String content = objectIdWriter.writeValueAsString(this.dummyBookingData());\n\n        MockHttpServletRequestBuilder mockRequestBuilder = MockMvcRequestBuilders.post(\"/batches/book\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .accept(MediaType.APPLICATION_JSON)\n                .content(content);\n\n        mockMvc.perform(mockRequestBuilder)\n        .andExpect(status().isCreated())\n        .andExpect(jsonPath(\"$\", notNullValue()))\n        .andReturn().getResponse().getContentAsString();\n\n    }\n\n    @Test\n    @DisplayName(\"Testing Add book test for not Acceptable test\")\n    public void AddBookingTestForInvalidTest() throws UnsupportedEncodingException, Exception {\n\n        Mockito.when(tourBatchService.bookTraveller(Mockito.any(Booking.class))).thenReturn(null);\n\n        String content = objectIdWriter.writeValueAsString(this.dummyBookingData());\n\n        MockHttpServletRequestBuilder mockRequestBuilder = MockMvcRequestBuilders.post(\"/batches/book\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .accept(MediaType.APPLICATION_JSON)\n                .content(content);\n\n        mockMvc.perform(mockRequestBuilder)\n        .andExpect(status().isNotAcceptable());\n\n    }\n    @Disabled\n    @Test\n    @DisplayName(\"Test for getting all tour batches\")\n    public void getAllTourBatchesTest() throws UnsupportedEncodingException, Exception {\n\n        List&lt;TourBatch&gt; tbList = new ArrayList&lt;&gt;();\n        tbList.add(BatchControllerTest.getDummyDataTourBatch());\n\n        Mockito.when(tourBatchService.getBatches()).thenReturn(tbList);\n\n        mockMvc.perform(MockMvcRequestBuilders.get(\"/batches\").contentType(MediaType.APPLICATION_JSON))\n                .andExpect(status().isOk())\n                .andExpect(jsonPath(\"$\", notNullValue()))\n                .andExpect(jsonPath(\"$\", hasSize(1)))\n                .andExpect(jsonPath(\"$[0].id\", is(33)))\n                .andReturn().getResponse().getContentAsString();\n    }\n    @Disabled\n    @Test\n    @DisplayName(\"Test for getting all tour batches\")\n    public void getAllTourBatchesTestForEmptyList() throws UnsupportedEncodingException, Exception {\n\n        List&lt;TourBatch&gt; tbList = new ArrayList&lt;&gt;();\n        tbList.add(BatchControllerTest.getDummyDataTourBatch());\n\n        Mockito.when(tourBatchService.getBatches()).thenReturn(null);\n\n        mockMvc.perform(MockMvcRequestBuilders.get(\"/batches\")\n                .contentType(MediaType.APPLICATION_JSON))\n                .andExpect(status().isNotFound())\n                .andExpect(jsonPath(\"$\").doesNotExist());\n    }\n\n    @Test\n    @DisplayName(\"Test for getting batch by id\")\n    public void getTourBatchByIdTest() throws Exception {\n        Mockito.when(tourBatchService.getBatchById(33L)).thenReturn(BatchControllerTest.getDummyDataTourBatch());\n\n        mockMvc.perform(MockMvcRequestBuilders.get(\"/batches/33\").contentType(MediaType.APPLICATION_JSON))\n                .andExpect(status().isFound())\n                .andExpect(jsonPath(\"$\", notNullValue()))\n                .andExpect(jsonPath(\"$.id\", is(33)))\n                .andReturn().getResponse().getContentAsString();\n    }\n\n    @Test\n    @DisplayName(\"Test for getting batch by id for Invalid Id\")\n    public void getTourBatchByIdTestForInvalidId() throws Exception {\n        Mockito.when(tourBatchService.getBatchById(33L)).thenReturn(null);\n\n        mockMvc.perform(MockMvcRequestBuilders.get(\"/batches/33\").contentType(MediaType.APPLICATION_JSON))\n                .andExpect(status().isNotFound())\n                .andExpect(jsonPath(\"$\").doesNotExist());\n    }\n\n    @Test\n    @DisplayName(\"Test for updating tour batch\")\n    public void updateTourBatchTest() throws Exception {\n        TourBatch tb = BatchControllerTest.getDummyDataTourBatch();\n        tb.setCapacity(99);\n        Mockito.when(tourBatchService.updateBatch(Mockito.any(TourBatch.class))).thenReturn(tb);\n        String content = objectIdWriter.writeValueAsString(tb);\n        MockHttpServletRequestBuilder mockRequestBuilder = MockMvcRequestBuilders.put(\"/batches\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .accept(MediaType.APPLICATION_JSON)\n                .content(content);\n        mockMvc.perform(mockRequestBuilder)\n                .andExpect(status().isOk())\n                .andExpect(jsonPath(\"$.capacity\", is(99)))\n                .andReturn().getResponse().getContentAsString();\n    }\n    @Test\n    @DisplayName(\"Test for updating tour batch\")\n    public void updateTourBatchTestForInvalidStatus() throws Exception {\n        TourBatch tb = BatchControllerTest.getDummyDataTourBatch();\n        tb.setCapacity(99);\n        Mockito.when(tourBatchService.updateBatch(Mockito.any(TourBatch.class))).thenReturn(null);\n        String content = objectIdWriter.writeValueAsString(tb);\n        MockHttpServletRequestBuilder mockRequestBuilder = MockMvcRequestBuilders.put(\"/batches\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .accept(MediaType.APPLICATION_JSON)\n                .content(content);\n        mockMvc.perform(mockRequestBuilder)\n                .andExpect(status().isNotModified());\n    }\n\n    @Test\n    @DisplayName(\"Test for deleting tour batch\")\n    public void deleteTourBatchTest() throws Exception {\n        Mockito.when(tourBatchService.deleteBatchById(1L)).thenReturn(true);\n        mockMvc.perform(MockMvcRequestBuilders.delete(\"/batches/1\").contentType(MediaType.APPLICATION_JSON))\n                .andExpect(status().isOk());\n\n    }\n\n    @Test\n    @DisplayName(\"Test for deleting tour batch for Invalid Id\")\n    public void deleteTourBatchTestForInvalidId() throws Exception {\n        Mockito.when(tourBatchService.deleteBatchById(1L)).thenReturn(false);\n        mockMvc.perform(MockMvcRequestBuilders.delete(\"/batches/1\").contentType(MediaType.APPLICATION_JSON))\n                .andExpect(status().isNotAcceptable());\n\n    }\n\n    @Test\n    @DisplayName(\"Test for getting tour batch by start date\")\n    public void getTourBatchByStartDateTest() throws Exception {\n        List &lt;TourBatch&gt; tbList = new ArrayList&lt;&gt;();\n        Mockito.when(tourBatchService.getFilteredBatches(null, null)).thenReturn(tbList);\n\n        String content = objectIdWriter.writeValueAsString(tbList);\n\n        MockHttpServletRequestBuilder mockRequestBuilder = MockMvcRequestBuilders.get(\"/batches/startDate\")\n                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON).content(content);\n\n         mockMvc.perform(mockRequestBuilder)\n         .andExpect(status().isOk())\n         .andExpect(jsonPath(\"$\", hasSize(0)))\n         .andReturn().getResponse().getContentAsString();\n    }\n    @Test\n    @DisplayName(\"Testing create batch\")\n    public void createBatchTest() throws Exception {\n\n        TourBatch tbd = BatchControllerTest.getDummyDataTourBatch();\n        Mockito.when(tourBatchService.addBatch(Mockito.anyLong() ,Mockito.any(TourBatch.class))).thenReturn(tbd);\n\n        String content = objectIdWriter.writeValueAsString(tbd);\n\n        MockHttpServletRequestBuilder mockRequestBuilder = MockMvcRequestBuilders.post(\"/batches/tours/1\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .accept(MediaType.APPLICATION_JSON)\n                .content(content);\n\n        mockMvc.perform(mockRequestBuilder)\n        .andExpect(status().isCreated())\n        .andReturn().getResponse().getContentAsString();\n    }\n    @Test\n    @DisplayName(\"Testing create batch for Empty Batch\")\n    public void createBatchTestForEmptyBatch() throws Exception {\n\n        TourBatch tbd = BatchControllerTest.getDummyDataTourBatch();\n        Mockito.when(tourBatchService.addBatch(Mockito.anyLong() ,Mockito.any(TourBatch.class))).thenReturn(null);\n\n        String content = objectIdWriter.writeValueAsString(tbd);\n\n        MockHttpServletRequestBuilder mockRequestBuilder = MockMvcRequestBuilders.post(\"/batches/tours/1\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .accept(MediaType.APPLICATION_JSON)\n                .content(content);\n\n        mockMvc.perform(mockRequestBuilder)\n        .andExpect(status().isNotFound())\n        .andReturn().getResponse().getContentAsString();\n    }\n\n}\n</code></pre> BookingControllerTest.java<pre><code>package com.jt.controller;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\nimport java.util.Arrays;\nimport java.util.Date;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Disabled;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport org.springframework.http.MediaType;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.ObjectWriter;\nimport com.jt.model.batch.Booking;\nimport com.jt.model.user.MobileNumber;\nimport com.jt.model.user.Name;\nimport com.jt.model.user.Traveller;\nimport com.jt.service.BatchService;\nimport com.jt.service.BookingService;\n\n@ExtendWith(MockitoExtension.class)\n@DisplayName(\"TourController Testing\")\npublic class BookingControllerTest {\n\n    private MockMvc mockMvc;\n\n    ObjectMapper objectMapper = new ObjectMapper();\n    ObjectWriter objectIdWriter = objectMapper.writer();\n\n    @Mock\n    private BookingService bookingService;\n\n    @Mock\n    private BatchService batchService;\n\n\n\n    @InjectMocks\n    private BookingController bookingController;\n\n\n    @BeforeEach\n    public void setUp() {\n        this.mockMvc = MockMvcBuilders.standaloneSetup(bookingController).build();\n    }\n\n\n    public static Booking dummyBookingData() {\n        Booking booking = new Booking();\n        Date date = new Date();\n//      Traveller traveller = new Traveller(1, new Name(\"harsh\", \"fulzele\"), new MobileNumber(\"1234567890\"));\n        Traveller traveller = new Traveller();\n        traveller.setBookingSequence(1);\n        traveller.setMobile(new MobileNumber(\"9022018440\"));\n        traveller.setName(new Name(\"harsh\" ,\"fulzele\"));\n\n        booking.setId(1l);\n        booking.setBatchId(1l);\n        booking.setDate(date);\n        booking.setAmount(12000.0);\n        booking.setUsername(\"harsh@gmail.com\");\n        booking.setTravellers(Arrays.asList(traveller));\n        return booking;\n    }\n\n\n    @Disabled\n    @Test\n    @DisplayName(\"Testing get Bookings\")\n    public void getBookings() throws Exception {\n\n        Mockito.when(bookingService.getAllBookings()).thenReturn(Arrays.asList(dummyBookingData()));\n\n        mockMvc.perform(MockMvcRequestBuilders\n        .get(\"/bookings\")\n        .contentType(MediaType.APPLICATION_JSON))\n        .andExpect(status().isOk());\n\n    }\n    @Disabled\n    @Test\n    @DisplayName(\"Testing get Bookings not not found status code\")\n    public void getBookingsNotFound() throws Exception {\n\n        Mockito.when(bookingService.getAllBookings()).thenReturn(null);\n\n        mockMvc.perform(MockMvcRequestBuilders\n        .get(\"/bookings\")\n        .contentType(MediaType.APPLICATION_JSON))\n        .andExpect(status().isNotFound());\n\n    }\n}\n</code></pre> MetadataControllerTest.java<pre><code>package com.jt.controller;\n\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\nimport java.io.UnsupportedEncodingException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport org.springframework.http.MediaType;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.ObjectWriter;\nimport com.jt.model.DisplayPair;\nimport com.jt.service.MetadataService;\n\n@ExtendWith(MockitoExtension.class)\n@DisplayName(\"TourController Testing\")\npublic class MetadataControllerTest {\n\n\n    private MockMvc mockMvc;\n\n\n    @Mock\n    private MetadataService metadataService;\n\n    @InjectMocks\n    private MetadataController metadataController;\n\n    ObjectMapper objectMapper = new ObjectMapper();\n    ObjectWriter objectIdWriter = objectMapper.writer();\n\n    public static DisplayPair&lt;String, String&gt; getDummyDisplaiPair() {\n        DisplayPair&lt;String, String&gt; data = new DisplayPair&lt;&gt;();\n        data.setOptionValue(\"ADMIN\");\n        data.setOptionDisplayString(\"Admin\");\n        return data;\n    }\n    @BeforeEach\n    public void setUp() {\n        this.mockMvc = MockMvcBuilders.standaloneSetup(metadataController).build();\n    }\n\n    @Test\n    @DisplayName(\"Testing metadata difficulty\")\n    public void getDifficultyLevel() throws UnsupportedEncodingException, Exception {\n        List&lt;DisplayPair&lt;String, String&gt;&gt;difficultyLevels = new ArrayList&lt;&gt;();\n        difficultyLevels.add(this.getDummyDisplaiPair());\n\n        Mockito.when(metadataService.allDifficultyLevels()).thenReturn(difficultyLevels);\n\n        mockMvc.perform(MockMvcRequestBuilders\n                .get(\"/metadata/difficulties\")\n                .contentType(MediaType.APPLICATION_JSON))\n                .andExpect(status().isOk());\n    }\n    @Test\n    @DisplayName(\"Testing metadata difficulty\")\n    public void getDifficultyLevelForNotFound() throws UnsupportedEncodingException, Exception {\n        List&lt;DisplayPair&lt;String, String&gt;&gt;difficultyLevels = new ArrayList&lt;&gt;();\n        difficultyLevels.add(this.getDummyDisplaiPair());\n\n        Mockito.when(metadataService.allDifficultyLevels()).thenReturn(null);\n\n        mockMvc.perform(MockMvcRequestBuilders\n                .get(\"/metadata/difficulties\")\n                .contentType(MediaType.APPLICATION_JSON))\n                .andExpect(status().isNotFound());\n    }\n    @Test\n    @DisplayName(\"Testing metadata modes\")\n    public void getDifficultyLevelMode() throws UnsupportedEncodingException, Exception {\n        List&lt;DisplayPair&lt;String, String&gt;&gt;modesList = new ArrayList&lt;&gt;();\n        modesList.add(this.getDummyDisplaiPair());\n\n        Mockito.when(metadataService.allModes()).thenReturn(modesList);\n\n        mockMvc.perform(MockMvcRequestBuilders\n                .get(\"/metadata/modes\")\n                .contentType(MediaType.APPLICATION_JSON))\n                .andExpect(status().isOk());\n    }\n\n    @Test\n    @DisplayName(\"Testing metadata modes\")\n    public void getDifficultyLevelModeForInvalid() throws UnsupportedEncodingException, Exception {\n        List&lt;DisplayPair&lt;String, String&gt;&gt;modesList = new ArrayList&lt;&gt;();\n        modesList.add(this.getDummyDisplaiPair());\n\n        Mockito.when(metadataService.allModes()).thenReturn(null);\n\n        mockMvc.perform(MockMvcRequestBuilders\n                .get(\"/metadata/modes\")\n                .contentType(MediaType.APPLICATION_JSON))\n                .andExpect(status().isNotFound());\n    }\n\n    @Test\n    @DisplayName(\"Testing metadata modes\")\n    public void getRoomTypes() throws UnsupportedEncodingException, Exception {\n        List&lt;DisplayPair&lt;String, String&gt;&gt;roomType = new ArrayList&lt;&gt;();\n        roomType.add(this.getDummyDisplaiPair());\n\n        Mockito.when(metadataService.allRoomTypes()).thenReturn(roomType);\n\n        mockMvc.perform(MockMvcRequestBuilders\n                .get(\"/metadata/roomtypes\")\n                .contentType(MediaType.APPLICATION_JSON))\n                .andExpect(status().isOk());\n    }\n    @Test\n    @DisplayName(\"Testing metadata modes\")\n    public void getRoomTypesForNotFound() throws UnsupportedEncodingException, Exception {\n        List&lt;DisplayPair&lt;String, String&gt;&gt;roomType = new ArrayList&lt;&gt;();\n        roomType.add(this.getDummyDisplaiPair());\n\n        Mockito.when(metadataService.allRoomTypes()).thenReturn(null);\n\n        mockMvc.perform(MockMvcRequestBuilders\n                .get(\"/metadata/roomtypes\")\n                .contentType(MediaType.APPLICATION_JSON))\n                .andExpect(status().isNotFound());\n    }\n    @Test\n    @DisplayName(\"Testing metadata modes\")\n    public void getRoles() throws UnsupportedEncodingException, Exception {\n        List&lt;DisplayPair&lt;String, String&gt;&gt;rolesList = new ArrayList&lt;&gt;();\n        rolesList.add(this.getDummyDisplaiPair());\n\n        Mockito.when(metadataService.allRoles()).thenReturn(rolesList);\n\n        mockMvc.perform(MockMvcRequestBuilders\n                .get(\"/metadata/roles\")\n                .contentType(MediaType.APPLICATION_JSON))\n                .andExpect(status().isOk());\n    }\n    @Test\n    @DisplayName(\"Testing metadata modes\")\n    public void getRolesForInvalid() throws UnsupportedEncodingException, Exception {\n        List&lt;DisplayPair&lt;String, String&gt;&gt;rolesList = new ArrayList&lt;&gt;();\n        rolesList.add(this.getDummyDisplaiPair());\n\n        Mockito.when(metadataService.allRoles()).thenReturn(null);\n\n        mockMvc.perform(MockMvcRequestBuilders\n                .get(\"/metadata/roles\")\n                .contentType(MediaType.APPLICATION_JSON))\n                .andExpect(status().isNotFound());\n    }\n\n    @Test\n    @DisplayName(\"Testing metadata modes\")\n    public void getBatchStatus() throws UnsupportedEncodingException, Exception {\n        List&lt;DisplayPair&lt;String, String&gt;&gt;batchStatus = new ArrayList&lt;&gt;();\n        batchStatus.add(this.getDummyDisplaiPair());\n\n        Mockito.when(metadataService.allStatus()).thenReturn(batchStatus);\n\n        mockMvc.perform(MockMvcRequestBuilders\n                .get(\"/metadata/batchstatuses\")\n                .contentType(MediaType.APPLICATION_JSON))\n                .andExpect(status().isOk());\n    }\n\n    @Test\n    @DisplayName(\"Testing metadata modes\")\n    public void getBatchStatusForInvalid() throws UnsupportedEncodingException, Exception {\n        List&lt;DisplayPair&lt;String, String&gt;&gt;batchStatus = new ArrayList&lt;&gt;();\n        batchStatus.add(this.getDummyDisplaiPair());\n\n        Mockito.when(metadataService.allStatus()).thenReturn(null);\n\n        mockMvc.perform(MockMvcRequestBuilders\n                .get(\"/metadata/batchstatuses\")\n                .contentType(MediaType.APPLICATION_JSON))\n                .andExpect(status().isNotFound());\n    }\n\n}\n</code></pre> TourControllerTest.java<pre><code>package com.jt.controller;\n\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.hamcrest.Matchers.hasSize;\nimport static org.hamcrest.Matchers.notNullValue;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\nimport java.time.LocalDate;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Disabled;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport org.springframework.http.MediaType;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;\nimport org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.ObjectWriter;\nimport com.jt.model.batch.TourBatch;\nimport com.jt.model.tour.Accomodation;\nimport com.jt.model.tour.DayPlan;\nimport com.jt.model.tour.DifficultyLevel;\nimport com.jt.model.tour.GuidedTour;\nimport com.jt.model.tour.Itinerary;\nimport com.jt.model.tour.Mode;\nimport com.jt.model.tour.RoomType;\nimport com.jt.service.BatchService;\nimport com.jt.service.TourService;\n\n@ExtendWith(MockitoExtension.class)\n@DisplayName(\"TourController Testing\")\npublic class TourControllerTest {\n\n    private MockMvc mockMvc;\n\n    ObjectMapper objectMapper = new ObjectMapper();\n    ObjectWriter objectIdWriter = objectMapper.writer();\n\n    @Mock\n    private TourService tourService;\n\n    @Mock\n    private BatchService batchService;\n\n    @InjectMocks \n    private TourController tourController;\n\n    public static GuidedTour dummyDataForTour() {\n        Accomodation accomodation = new Accomodation(\"harsh hotel\" , \"nagpur\" , RoomType.TWIN_BED);\n        DayPlan dayPlan = new DayPlan(1 , \"nagpur\" , 100.0 ,\"harsh\", accomodation); \n        List&lt;DayPlan&gt; listOfDayPlan = new ArrayList&lt;&gt;();\n        listOfDayPlan.add(dayPlan);\n        Itinerary itinerary = new Itinerary(listOfDayPlan);\n\n        GuidedTour guidedTour = new GuidedTour();\n        guidedTour.setId(1L);\n        guidedTour.setName(\"mumbai-leh\");\n        guidedTour.setStartAt(\"mumbai\");\n        guidedTour.setEndAt(\"leh\");\n        guidedTour.setDays(5);\n        guidedTour.setMode(Mode.WALK.toString());\n        guidedTour.setDifficultyLevel(DifficultyLevel.EASY.toString());\n        guidedTour.setItinerary(itinerary);\n        return guidedTour;\n    }\n    public static TourBatch dummyDataForBatch() {\n        TourBatch tourBatch = new TourBatch();\n        LocalDate start_at = LocalDate.now();\n\n        tourBatch.setId(1l);\n        tourBatch.setStartDate(start_at);\n        tourBatch.setCapacity(100);\n        tourBatch.setTour(dummyDataForTour());\n\n        return tourBatch;\n    }\n    @BeforeEach\n    public void setUp() {\n        this.mockMvc = MockMvcBuilders.standaloneSetup(tourController).build();\n    }\n\n    @Test\n    @DisplayName(\"Testing Get all tours list\")\n    public void getAllToursTest() throws Exception {\n        List&lt;GuidedTour&gt; data = new ArrayList&lt;&gt;();\n        data.add(TourControllerTest.dummyDataForTour());\n\n        Mockito.when(tourService.getTours()).thenReturn(data);\n\n        mockMvc.perform(MockMvcRequestBuilders\n                .get(\"/tours\")\n                .contentType(MediaType.APPLICATION_JSON))\n                .andExpect(status().isOk())\n                .andExpect(jsonPath(\"$\" , hasSize(1)))\n                .andReturn().getResponse().getContentAsString();\n    }\n    @Test\n    @DisplayName(\"Testing Get all tour for Not Found Status\")\n    public void getAllToursTestForNotFound() throws Exception { \n        Mockito.when(tourService.getTours()).thenReturn(null);\n\n        mockMvc.perform(MockMvcRequestBuilders\n                .get(\"/tours\")\n                .contentType(MediaType.APPLICATION_JSON))\n                .andExpect(status().isNotFound());\n    }\n    @Test\n    @DisplayName(\"Testing Get Tour by Id\")\n    public void getTourByIdTest() throws Exception {\n        Mockito.when(tourService.getTourById(1L)).thenReturn(TourControllerTest.dummyDataForTour());\n\n        mockMvc.perform(MockMvcRequestBuilders\n                .get(\"/tours/1\")\n                .contentType(MediaType.APPLICATION_JSON))\n                .andExpect(status().isOk())\n                .andExpect(jsonPath(\"$.name\", is(\"mumbai-leh\")))\n                .andExpect(jsonPath(\"$\" , notNullValue()))\n                .andReturn().getResponse().getContentAsString();\n    }\n    //Test will because not implemented status code for not found in controllers\n    @Test\n    @DisplayName(\"Testing Get Tour by Id when Invalid id passed\")\n    public void getTourByIdTesForInvalidId() throws Exception {\n        Mockito.when(tourService.getTourById(2L)).thenReturn(null);\n         mockMvc.perform(MockMvcRequestBuilders\n                .get(\"/tours/2\")\n                .contentType(MediaType.APPLICATION_JSON))\n                .andExpect(status().isNotFound())\n                .andReturn().getResponse().getContentAsString();\n\n    }\n\n    @Test\n    @DisplayName(\"Testing for create Tour\")\n    public void createTourTest() throws Exception {\n\n        Mockito.when(tourService.addTour(Mockito.any(GuidedTour.class))).thenReturn(TourControllerTest.dummyDataForTour());\n\n        String content = objectIdWriter.writeValueAsString(TourControllerTest.dummyDataForTour());\n\n        MockHttpServletRequestBuilder mockRequestBuilder = MockMvcRequestBuilders.post(\"/tours\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .accept(MediaType.APPLICATION_JSON)\n                .content(content);\n\n        mockMvc.perform(mockRequestBuilder)\n                .andExpect(status().isCreated())\n                .andExpect(jsonPath(\"$\", notNullValue()))\n                .andReturn().getResponse().getContentAsString();\n\n    }\n    @Test\n    @DisplayName(\"Testing for create Tour For Invalid tour\")\n    public void createTourTestForNotFound() throws Exception {\n        GuidedTour guidedTour = TourControllerTest.dummyDataForTour();\n        Mockito.when(tourService.addTour(Mockito.any(GuidedTour.class))).thenReturn(null);\n\n        String content = objectIdWriter.writeValueAsString(guidedTour);\n\n        MockHttpServletRequestBuilder mockRequestBuilder = MockMvcRequestBuilders.post(\"/tours\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .accept(MediaType.APPLICATION_JSON)\n                .content(content);\n\n        mockMvc.perform(mockRequestBuilder)\n                .andExpect(status().isNotAcceptable());\n\n    }\n\n    @Test\n    @DisplayName(\"Testing for update tour\")\n    public void updateTourTest() throws Exception {\n\n        GuidedTour guidedTour = TourControllerTest.dummyDataForTour();\n        guidedTour.setName(\"nagpur-goa\");\n\n        Mockito.when(tourService.updateTour(Mockito.any(GuidedTour.class))).thenReturn(guidedTour);\n\n        String content = objectIdWriter.writeValueAsString(guidedTour);\n\n        MockHttpServletRequestBuilder mockRequestBuilder = MockMvcRequestBuilders.put(\"/tours\")\n                    .contentType(MediaType.APPLICATION_JSON)\n                    .accept(MediaType.APPLICATION_JSON)\n                    .content(content);\n\n        String result = mockMvc.perform(mockRequestBuilder)\n                    .andExpect(status().isOk())\n                    .andExpect(jsonPath(\"$\", notNullValue()))\n                    .andExpect(jsonPath(\"$.name\", is(\"nagpur-goa\")))\n                    .andReturn().getResponse().getContentAsString();\n\n        System.out.println(\"--&gt;\"+result);\n    }\n    @Test\n    @DisplayName(\"Testing for invalid tour get status not modified\")\n    public void updateTourTestForInvalidTour() throws Exception {\n\n        GuidedTour guidedTour = TourControllerTest.dummyDataForTour();\n        guidedTour.setName(\"nagpur-goa\");\n\n        Mockito.when(tourService.updateTour(Mockito.any(GuidedTour.class))).thenReturn(null);\n\n        String content = objectIdWriter.writeValueAsString(guidedTour);\n\n        MockHttpServletRequestBuilder mockRequestBuilder = MockMvcRequestBuilders.put(\"/tours\")\n                    .contentType(MediaType.APPLICATION_JSON)\n                    .accept(MediaType.APPLICATION_JSON)\n                    .content(content);\n\n            mockMvc.perform(mockRequestBuilder)\n                    .andExpect(status().isNotModified());\n    }\n\n    @Test\n    @DisplayName(\"Testing delete tour\")\n    public void deleteTourTest() throws Exception {\n        Mockito.when(tourService.deleteTourById(1L)).thenReturn(true);\n\n        mockMvc.perform(MockMvcRequestBuilders\n            .delete(\"/tours/1\")\n            .contentType(MediaType.APPLICATION_JSON))\n            .andExpect(status().isOk());\n\n        assertEquals(tourService.deleteTourById(1l), true);\n    }\n\n    @Test\n    @DisplayName(\"Testing delete tour if fails\")\n    public void deleteTourNotAcceptableTest() throws Exception {\n          Mockito.when(tourService.deleteTourById(2L)).thenReturn(false); // assuming 2 is a case where deletion fails\n            mockMvc.perform(MockMvcRequestBuilders\n                    .delete(\"/tours/2\")\n                    .contentType(MediaType.APPLICATION_JSON))\n                    .andExpect(status().isNotAcceptable());\n            assertEquals(tourService.deleteTourById(2L), false);\n    }\n\n\n    @Disabled\n    @Test\n    @DisplayName(\"Testing get batch by tour id\")\n    public void getBatchByTourId() throws Exception {\n\n        List&lt;TourBatch&gt; tourList = new ArrayList&lt;&gt;();\n        tourList.add(BatchControllerTest.getDummyDataTourBatch());\n\n        Mockito.when(tourService.getTourBatches(1l)).thenReturn(tourList);\n\n        String response = mockMvc.perform(MockMvcRequestBuilders\n                .get(\"/tours/1/batches\")\n                .contentType(MediaType.APPLICATION_JSON))\n                .andExpect(status().isOk())\n                .andReturn().getResponse().getContentAsString();\n            System.out.println(\"response--&gt;\"+response);\n    }\n    @Disabled\n    @Test\n    @DisplayName(\"Testing get batch by tour id when id not found\")\n    public void getBatchByTourIdForNotFound() throws Exception {\n        Mockito.when(tourService.getTourBatches(1L)).thenReturn(null);\n\n        mockMvc.perform(MockMvcRequestBuilders\n                .get(\"/tours/1/batches\")\n                .contentType(MediaType.APPLICATION_JSON))\n                .andExpect(status().isNotFound());\n\n    }\n\n\n\n    @Test\n    @DisplayName(\"Testing Get Most Popular Tours\")\n    public void getMostPopularToursTest() throws Exception {\n        List&lt;GuidedTour&gt; popularTours = new ArrayList&lt;&gt;();\n        popularTours.add(TourControllerTest.dummyDataForTour());\n\n        Mockito.when(tourService.getMostPopularTours()).thenReturn(popularTours);\n\n        mockMvc.perform(MockMvcRequestBuilders\n                .get(\"/tours/popular\")\n                .contentType(MediaType.APPLICATION_JSON))\n                .andExpect(status().isOk())\n                .andExpect(jsonPath(\"$\", hasSize(1)))\n                .andReturn().getResponse().getContentAsString();\n    }\n\n\n    @Test\n    @DisplayName(\"Testing Get Most Popular Tours for Not Found Status\")\n    public void getMostPopularToursNotFoundTest() throws Exception {    \n        Mockito.when(tourService.getMostPopularTours()).thenReturn(null);\n\n        mockMvc.perform(MockMvcRequestBuilders\n                .get(\"/tours/popular\")\n                .contentType(MediaType.APPLICATION_JSON))\n                .andExpect(status().isNotFound());\n    }\n\n    @Test\n    @DisplayName(\"Testing Filter Tours by Duration\")\n    public void filterTourByDurationTest() throws Exception {\n        List&lt;GuidedTour&gt; tours = new ArrayList&lt;&gt;();\n        tours.add(TourControllerTest.dummyDataForTour());\n        Mockito.when(tourService.filterTourByDuration(3, 7)).thenReturn(tours);\n        mockMvc.perform(MockMvcRequestBuilders\n                .get(\"/tours/day\")\n                .param(\"minDays\", \"3\")\n                .param(\"maxDays\", \"7\")\n                .contentType(MediaType.APPLICATION_JSON))\n                .andExpect(status().isOk())\n                .andExpect(jsonPath(\"$\", hasSize(1)));\n        Mockito.when(tourService.filterTourByDuration(8, 10)).thenReturn(Collections.emptyList());\n\n        mockMvc.perform(MockMvcRequestBuilders\n                .get(\"/tours/day\")\n                .param(\"minDays\", \"8\")\n                .param(\"maxDays\", \"10\")\n                .contentType(MediaType.APPLICATION_JSON))\n                .andExpect(status().isNotFound());\n    }\n\n    @Test\n    @DisplayName(\"Testing Filter Tours by Place\")\n    public void filteredToursByPlaceTest() throws Exception {\n        List&lt;GuidedTour&gt; tours = new ArrayList&lt;&gt;();\n        tours.add(TourControllerTest.dummyDataForTour());\n        Mockito.when(tourService.filteredToursByPlace(\"Mumbai\", \"Goa\")).thenReturn(tours);\n\n        mockMvc.perform(MockMvcRequestBuilders\n                .get(\"/tours/place\")\n                .param(\"source\", \"Mumbai\")\n                .param(\"destination\", \"Goa\")\n                .contentType(MediaType.APPLICATION_JSON))\n                .andExpect(status().isOk())\n                .andExpect(jsonPath(\"$\", hasSize(1)));\n\n        Mockito.when(tourService.filteredToursByPlace(\"Delhi\", \"Jaipur\")).thenReturn(Collections.emptyList());\n        mockMvc.perform(MockMvcRequestBuilders\n                .get(\"/tours/place\")\n                .param(\"source\", \"Delhi\")\n                .param(\"destination\", \"Jaipur\")\n                .contentType(MediaType.APPLICATION_JSON))\n                .andExpect(status().isNotFound());\n    }\n\n    @Test\n    @DisplayName(\"Testing Filter Tours by Mode\")\n    public void filteredToursByModeTest() throws Exception {\n        List&lt;GuidedTour&gt; tours = new ArrayList&lt;&gt;();\n        tours.add(TourControllerTest.dummyDataForTour());\n        Mockito.when(tourService.filteredToursByMode(Mode.fromString(\"WALK\"))).thenReturn(tours);\n\n        mockMvc.perform(MockMvcRequestBuilders\n                .get(\"/tours/mode\")\n                .param(\"mode\", \"WALK\")\n                .contentType(MediaType.APPLICATION_JSON))\n                .andExpect(status().isOk())\n                .andExpect(jsonPath(\"$\", hasSize(1)));\n\n        Mockito.when(tourService.filteredToursByMode(Mode.fromString(\"BICYCLE\"))).thenReturn(Collections.emptyList());\n\n        mockMvc.perform(MockMvcRequestBuilders\n                .get(\"/tours/mode\")\n                .param(\"mode\", \"BICYCLE\")\n                .contentType(MediaType.APPLICATION_JSON))\n                .andExpect(status().isNotFound());\n    }\n\n    @Test\n    @DisplayName(\"Testing Filter Tours by Difficulty Level\")\n    public void filteredToursByDifficultyLevelTest() throws Exception {\n        List&lt;GuidedTour&gt; tours = new ArrayList&lt;&gt;();\n        tours.add(TourControllerTest.dummyDataForTour());\n        Mockito.when(tourService.filteredToursByDifficultyLevel(DifficultyLevel.fromString(\"EASY\"))).thenReturn(tours);\n\n        mockMvc.perform(MockMvcRequestBuilders\n                .get(\"/tours/difficultyLevel\")\n                .param(\"difficultyLevel\", \"EASY\")\n                .contentType(MediaType.APPLICATION_JSON))\n                .andExpect(status().isOk())\n                .andExpect(jsonPath(\"$\", hasSize(1)));\n\n        Mockito.when(tourService.filteredToursByDifficultyLevel(DifficultyLevel.fromString(\"HIGH\"))).thenReturn(Collections.emptyList());\n\n        mockMvc.perform(MockMvcRequestBuilders\n                .get(\"/tours/difficultyLevel\")\n                .param(\"difficultyLevel\", \"HIGH\")\n                .contentType(MediaType.APPLICATION_JSON))\n                .andExpect(status().isNotFound());\n    }\n}\n</code></pre></p>"},{"location":"Spring%20Boot/JT%20Adventure%20Tour/test/jt/","title":"JT Tours Application Tests","text":"JttoursApplicationTests.java<pre><code>package com.jt;\n\nimport org.springframework.boot.test.context.SpringBootTest;\n\nimport com.jt.controller.AuthControllerTest;\nimport com.jt.controller.BatchController;\nimport com.jt.controller.BookingControllerTest;\nimport com.jt.controller.TourController;\nimport com.jt.service.BatchService;\nimport com.jt.service.BookingServiceTest;\nimport com.jt.service.TourService;\nimport com.jt.service.UserServicesTest;\n\n\n@SpringBootTest(classes = \n{BatchController.class , \nTourController.class , \nBatchService.class , \nTourService.class,\nAuthControllerTest.class,\nBookingControllerTest.class,\nBookingServiceTest.class,\nUserServicesTest.class\n})\nclass JttoursApplicationTests {\n}\n</code></pre>"},{"location":"Spring%20Boot/JT%20Adventure%20Tour/test/service/","title":"Service Test","text":"<p>BookingServiceTest.java<pre><code>package com.jt.service;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Optional;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport com.jt.controller.BatchControllerTest;\nimport com.jt.controller.BookingControllerTest;\nimport com.jt.model.batch.Booking;\nimport com.jt.model.batch.TourBatch;\nimport com.jt.repository.BatchRepository;\nimport com.jt.repository.BookingRepository;\nimport jakarta.persistence.EntityNotFoundException;\n\n@ExtendWith(MockitoExtension.class)\n@DisplayName(\"TourBatchService Testing\")\npublic class BookingServiceTest {\n\n    @Mock\n    private BookingRepository bookingRepository;\n\n    @Mock\n    private BatchRepository batchRepository;\n\n    @InjectMocks\n    private BookingService bookingService;\n\n    @InjectMocks\n    private BatchService batchService;\n\n\n    Booking book = BookingControllerTest.dummyBookingData();\n    TourBatch batch = BatchControllerTest.getDummyDataTourBatch();\n    @Test\n    @DisplayName(\"Testing booking service addBook inside batchService\")\n    public void bookTravellerTest() {\n        Mockito.when(bookingRepository.save(book)).thenReturn(book);\n        Mockito.when(batchRepository.findById(Mockito.anyLong())).thenReturn(Optional.of(batch));\n        Mockito.when(batchRepository.save(batch)).thenReturn(batch);\n        Mockito.when(bookingRepository.findAllByBatchId(book.getBatchId())).thenReturn(Arrays.asList(book));\n        Booking bookResponse = batchService.bookTraveller(book);\n        assertThat(bookResponse).isNotNull();\n    }\n    @Test\n    @DisplayName(\"Testing booking service addBook inside batchService\")\n    public void bookTravellerTestForException() {\n        Mockito.when(batchRepository.findById(Mockito.anyLong())).thenThrow(new EntityNotFoundException(\"batch not found for these booking\"));\n        Booking bookResponse = batchService.bookTraveller(book);\n        assertThat(bookResponse).isNull();\n    }\n    @Test\n    @DisplayName(\"Testing get all booking service\")\n    public void GetBookingsTest() {\n        Mockito.when(bookingRepository.findAll()).thenReturn(Arrays.asList(book));\n\n        List&lt;Booking&gt; bookResponse = bookingService.getAllBookings();\n\n        assertThat(bookResponse).isNotEmpty();\n    }\n    @Test\n    @DisplayName(\"Testing get all booking service for Exception\")\n    public void GetBookingsTestForInvalid() throws EntityNotFoundException{\n        Mockito.when(bookingRepository.findAll()).thenThrow(new EntityNotFoundException(\"invalid case\"));\n        List&lt;Booking&gt; bookResponse = bookingService.getAllBookings();\n        assertThat(bookResponse).isNull();\n    }\n     @Test\n        @DisplayName(\"Testing get all bookings for a user\")\n        public void getAllBookingsUserTest() {\n            // Arrange\n            String username = \"testUser\";\n            List&lt;Booking&gt; expectedBookings = Arrays.asList(book);\n\n            Mockito.when(bookingRepository.findAllByUsername(username)).thenReturn(expectedBookings);\n            List&lt;Booking&gt; actualBookings = bookingService.getAllBookingsUser(username);\n            assertThat(actualBookings).isNotNull();\n            assertThat(actualBookings).isEqualTo(expectedBookings);\n        }\n\n        @Test\n        @DisplayName(\"Testing get all bookings for a user when an exception occurs\")\n        public void getAllBookingsUserTestForException() {\n            String username = \"testUser\";\n            Mockito.when(bookingRepository.findAllByUsername(username)).thenThrow(new RuntimeException(\"Test exception\"));\n            List&lt;Booking&gt; actualBookings = bookingService.getAllBookingsUser(username);\n            assertThat(actualBookings).isNull();\n        }\n}\n</code></pre> TourBatchServiceTest.java<pre><code>package com.jt.service;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.Mockito.when;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Optional;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.mockito.junit.jupiter.MockitoExtension;\n\nimport com.jt.controller.BatchControllerTest;\nimport com.jt.controller.TourControllerTest;\nimport com.jt.model.batch.Status;\nimport com.jt.model.batch.TourBatch;\nimport com.jt.model.tour.GuidedTour;\nimport com.jt.repository.TourRepository;\n\nimport jakarta.persistence.EntityNotFoundException;\n\nimport com.jt.repository.BatchRepository;\n\n\n@ExtendWith(MockitoExtension.class)\n@DisplayName(\"TourBatchService Testing\")\npublic class TourBatchServiceTest {\n\n    @Mock\n    private BatchRepository batchRepository;\n\n    @Mock\n    private TourRepository guidedTourRepository;\n\n    @InjectMocks\n    private BatchService tourBatchServiceImpl;\n\n    TourBatch tourBatch = BatchControllerTest.getDummyDataTourBatch();\n    TourBatch tourBatch2 = TourControllerTest.dummyDataForBatch();\n    GuidedTour guidedTour = TourControllerTest.dummyDataForTour();\n\n    @Test\n    @DisplayName(\"Adding Tour Batch\")\n    public void addBatchTest() throws Exception{\n        Mockito.when(batchRepository.save(tourBatch)).thenReturn(tourBatch);\n        Mockito.when(guidedTourRepository.findById(1l)).thenReturn(Optional.of(guidedTour));\n        tourBatch.setEndDate(guidedTour.getDays());\n        int bookedSeats = 0;\n        tourBatch.setAvailableSeats(bookedSeats);\n        tourBatch.setStatus(\"Active\");\n        tourBatch.getGuide().setBookingSequence(0);;\n        System.out.println(\"tourbatchresponse \"+tourBatch);\n        TourBatch tourBatchResponse = tourBatchServiceImpl.addBatch(1L, tourBatch);\n        System.out.println(\"tourbatchresponse \"+tourBatchResponse);\n        assertThat(tourBatchResponse).isNotNull();\n\n    }\n    @Test\n    @DisplayName(\"Adding Tour Batch for empty batch object\")\n    public void addBatchTestNotNull() throws Exception{\n        Mockito.when(batchRepository.save(tourBatch)).thenThrow(new EntityNotFoundException(\"Batch Object is empty\"));\n        Mockito.when(guidedTourRepository.findById(1l)).thenReturn(Optional.of(guidedTour));\n        TourBatch tourBatchResponse = tourBatchServiceImpl.addBatch(1L, tourBatch);\n        assertThat(tourBatchResponse).isNull();\n\n    }\n    @Test\n    @DisplayName(\"Get tour Batches\")\n    public void getBatches()throws Exception {\n        List&lt;TourBatch&gt; listOfBatches = new ArrayList&lt;&gt;();\n        listOfBatches.add(tourBatch);\n        Mockito.when(batchRepository.findAll()).thenReturn(listOfBatches);\n        List&lt;TourBatch&gt; response = tourBatchServiceImpl.getBatches();\n        assertThat(response).isNotEmpty();\n    }\n    @Test\n    @DisplayName(\"Get tour Batches for invalid batches\")\n    public void getBatchesForInvalidTest()throws Exception {\n        List&lt;TourBatch&gt; listOfBatches = new ArrayList&lt;&gt;();\n        listOfBatches.add(tourBatch);\n        Mockito.when(batchRepository.findAll()).thenThrow(new EntityNotFoundException(\"no object found for batches\"));\n        List&lt;TourBatch&gt; response = tourBatchServiceImpl.getBatches();\n        assertThat(response).isNull();\n    }\n\n    @Test\n    @DisplayName(\"Get Batch By Id\")\n    public void getBatchById() {\n        Mockito.when(batchRepository.findById(1l)).thenReturn(Optional.of(tourBatch));\n        TourBatch response = tourBatchServiceImpl.getBatchById(1l);\n        assertThat(response).isNotNull();\n        assertEquals(response.getCapacity(), 55);\n\n    }\n    @Test\n    @DisplayName(\"Get Batch By Id for Invalid id\")\n    public void getBatchByIdForInvalidId() {\n        Mockito.when(batchRepository.findById(1l)).thenReturn(Optional.empty());\n        TourBatch response = tourBatchServiceImpl.getBatchById(1l);\n        assertThat(response).isNull();\n\n    }\n    @Test\n    @DisplayName(\"Delete Batch by id\")\n    public void deleteBatchById() throws Exception{\n        Mockito.when(batchRepository.findById(1l)).thenReturn(Optional.of(tourBatch));\n        Mockito.when(batchRepository.save(tourBatch)).thenReturn(tourBatch);\n        boolean response = tourBatchServiceImpl.deleteBatchById(1l);\n        assertTrue(response);\n    }\n    @Test()\n    @DisplayName(\"Delete Batch by id for Invalid Id\")\n    public void deleteBatchByIdForInvalidId() {\n        when(batchRepository.findById(1l)).thenReturn(Optional.empty());\n        boolean response = tourBatchServiceImpl.deleteBatchById(1l);\n        assertFalse(response);  \n    }\n\n    @Test\n    @DisplayName(\"Update Batch\")\n    public void updateBatch()throws Exception {\n\n        tourBatch2.setCapacity(55);\n        Mockito.when(batchRepository.findById(1l)).thenReturn(Optional.of(tourBatch2));\n        Mockito.when(batchRepository.save(tourBatch2)).thenReturn(tourBatch2);\n        tourBatch.setAvailableSeats(tourBatch2.getCapacity() - tourBatch2.getAvailableSeats());\n        TourBatch tourBatchResponse = tourBatchServiceImpl.updateBatch(tourBatch2);\n        System.out.println(tourBatchResponse);\n        assertThat(tourBatchResponse).isNotNull();\n        assertThat(tourBatchResponse.getCapacity()).isEqualTo(55);\n\n    }\n\n    @Test\n    @DisplayName(\"Test Filter\")\n    public void getFilterBatches() throws ParseException {\n        String min_String= \"26-09-2023\";\n        String max_String = \"30-09-2023\";\n        SimpleDateFormat formatter = new SimpleDateFormat(\"dd-MM-yyyy\");      \n        Date minDate = formatter.parse(min_String); \n        Date maxDate = formatter.parse(max_String);\n        List&lt;TourBatch&gt; listOfTourBatch = new ArrayList&lt;&gt;();\n        listOfTourBatch.add(tourBatch);\n        when(batchRepository.findBatchesBetween(minDate, maxDate)).thenReturn(listOfTourBatch);\n        List&lt;TourBatch&gt; result = tourBatchServiceImpl.getFilteredBatches(minDate, maxDate);\n        assertThat(result).isNotEmpty();\n\n    }\n\n    @Test\n    @DisplayName(\"Test Filter\")\n    public void getFilterBatchesforMinDateMaxDateInvalid() throws ParseException {\n        String min_String= \"30-09-2023\";\n        String max_String = \"26-09-2023\";\n        SimpleDateFormat formatter = new SimpleDateFormat(\"dd-MM-yyyy\");      \n        Date minDate = formatter.parse(min_String); \n        Date maxDate = formatter.parse(max_String);\n        List&lt;TourBatch&gt; listOfTourBatch = new ArrayList&lt;&gt;();\n        listOfTourBatch.add(tourBatch);\n        List&lt;TourBatch&gt; result = tourBatchServiceImpl.getFilteredBatches(minDate, maxDate);\n        assertThat(result).isNull();\n\n    }\n\n    @Test\n    @DisplayName(\"Test Filter for Min Date is null\")\n    public void getFilterBatchesMinDateNull() throws ParseException {\n        String min_String= \"26-09-2023\";\n        String max_String = null;\n        SimpleDateFormat formatter = new SimpleDateFormat(\"dd-MM-yyyy\");      \n        Date minDate = formatter.parse(min_String); \n        Date maxDate = null;\n        List&lt;TourBatch&gt; listOfTourBatch = new ArrayList&lt;&gt;();\n        listOfTourBatch.add(tourBatch);\n        when(batchRepository.findBatchesAfter(minDate)).thenReturn(listOfTourBatch);\n        List&lt;TourBatch&gt; result = tourBatchServiceImpl.getFilteredBatches(minDate, maxDate);\n        assertThat(result).isNotEmpty();\n\n    }\n\n    @Test\n    @DisplayName(\"Test Filter for max Date is null\")\n    public void getFilterBatchesMaxDateNull() throws ParseException {\n        String min_String= \"30-09-2023\";\n        String max_String = null ;\n        SimpleDateFormat formatter = new SimpleDateFormat(\"dd-MM-yyyy\");      \n        Date minDate = formatter.parse(min_String); \n        Date maxDate = null;\n        List&lt;TourBatch&gt; listOfTourBatch = new ArrayList&lt;&gt;();\n        listOfTourBatch.add(tourBatch);\n        when(batchRepository.findBatchesAfter(minDate)).thenReturn(listOfTourBatch);\n        List&lt;TourBatch&gt; result = tourBatchServiceImpl.getFilteredBatches(minDate, maxDate);\n        assertThat(result).isNotEmpty();\n\n    }\n    @Test\n    @DisplayName(\"Test Filter\")\n    public void getFilterBatchesForNull() throws ParseException {\n        List&lt;TourBatch&gt; result = tourBatchServiceImpl.getFilteredBatches(null, null);\n        assertThat(result).isNull();\n\n    }\n    @Test\n    @DisplayName(\"get batch by user\")\n    public void getBatchesByUserTest() throws Exception{\n        List&lt;TourBatch&gt; listOfTourbatch = new ArrayList&lt;&gt;();\n        listOfTourbatch.add(tourBatch);\n        Mockito.when(batchRepository.findAllByStatus(Status.ACTIVE)).thenReturn(listOfTourbatch);\n        List&lt;TourBatch&gt; response = tourBatchServiceImpl.getBatchesByUser();\n        assertThat(response).isNotEmpty();\n    }\n    @Test\n    @DisplayName(\"get batch by tour id\")\n    public void getBatchesBytourId() throws Exception{\n        GuidedTour guidedTourInput = guidedTour;\n        List&lt;TourBatch&gt; listOfTourbatch = new ArrayList&lt;&gt;();\n        listOfTourbatch.add(tourBatch);\n\n        Mockito.when(guidedTourRepository.findById(1l)).thenReturn(Optional.of(guidedTourInput));\n        Mockito.when(batchRepository.findAllByTourIdAndStatus(1l, Status.ACTIVE)).thenReturn(listOfTourbatch);\n        List&lt;TourBatch&gt; response = tourBatchServiceImpl.getBatchesByTourIdByUser(1l);\n        assertThat(response).isNotEmpty();\n    }\n    @Test\n    @DisplayName(\"get batch by tour id\")\n    public void getBatchesBytourIdForNull() throws Exception{\n        List&lt;TourBatch&gt; listOfTourbatch = new ArrayList&lt;&gt;();\n        listOfTourbatch.add(tourBatch);\n        Mockito.when(guidedTourRepository.findById(1l)).thenReturn(Optional.empty());\n        List&lt;TourBatch&gt; response = tourBatchServiceImpl.getBatchesByTourIdByUser(1l);\n        assertThat(response).isNull();\n    }\n\n    @Test\n    @DisplayName(\"get filter status\")\n    public void getFilteredStatusTest() throws Exception{\n        List&lt;TourBatch&gt; listOfTourbatch = new ArrayList&lt;&gt;();\n        listOfTourbatch.add(tourBatch);\n        Mockito.when(batchRepository.findBatchByStatus(Status.ACTIVE)).thenReturn(listOfTourbatch);\n        List&lt;TourBatch&gt; response = tourBatchServiceImpl.getFilteredStatus(Status.ACTIVE);\n        assertThat(response).isNotEmpty();\n    }\n\n    @Test\n    @DisplayName(\"get filter status\")\n    public void getFilteredAvailableSeats() throws Exception{\n        int minSeat = -1;\n        int maxSeat = -1;\n        List&lt;TourBatch&gt; response = tourBatchServiceImpl.getFilteredAvailableSeats(minSeat , maxSeat);\n        assertThat(response).isNull();\n    }\n    @Test\n    @DisplayName(\"get filter status\")\n    public void getFilteredAvailableSeatsForNullMinDate() throws Exception{\n        int minSeat = -1;\n        int maxSeat = 10;\n        List&lt;TourBatch&gt; listOfTourbatch = new ArrayList&lt;&gt;();\n        listOfTourbatch.add(tourBatch);\n        Mockito.when(batchRepository.findMaxAvailableSeats(maxSeat)).thenReturn(listOfTourbatch);\n        List&lt;TourBatch&gt; response = tourBatchServiceImpl.getFilteredAvailableSeats(minSeat , maxSeat);\n        assertThat(response).isNotEmpty();\n    }\n    @Test\n    @DisplayName(\"get filter status\")\n    public void getFilteredAvailableSeatsForNullMaxDate() throws Exception{\n        int minSeat = 10;\n        int maxSeat = -1;\n        List&lt;TourBatch&gt; listOfTourbatch = new ArrayList&lt;&gt;();\n        listOfTourbatch.add(tourBatch);\n        Mockito.when(batchRepository.findMinAvailableSeats(minSeat)).thenReturn(listOfTourbatch);\n        List&lt;TourBatch&gt; response = tourBatchServiceImpl.getFilteredAvailableSeats(minSeat , maxSeat);\n        assertThat(response).isNotEmpty();\n    }\n    @Test\n    @DisplayName(\"get filter status\")\n    public void getFilteredAvailableSeatsForNullminDateLessThanMax() throws Exception{\n        int minSeat = 1;\n        int maxSeat = 10;\n        List&lt;TourBatch&gt; listOfTourbatch = new ArrayList&lt;&gt;();\n        listOfTourbatch.add(tourBatch);\n        Mockito.when(batchRepository.findFilteredAvailableSeats(minSeat , maxSeat)).thenReturn(listOfTourbatch);\n        List&lt;TourBatch&gt; response = tourBatchServiceImpl.getFilteredAvailableSeats(minSeat , maxSeat);\n        assertThat(response).isNotEmpty();\n    }\n\n    @Test\n    @DisplayName(\"get filter status\")\n    public void getFilteredAvailableSeatsForNull() throws Exception{\n        int minSeat = -1;\n        int maxSeat = -1;\n        List&lt;TourBatch&gt; listOfTourbatch = new ArrayList&lt;&gt;();\n        listOfTourbatch.add(tourBatch);\n        List&lt;TourBatch&gt; response = tourBatchServiceImpl.getFilteredAvailableSeats(minSeat , maxSeat);\n        assertThat(response).isNull();\n    }\n    @Test\n    @DisplayName(\"get filter status\")\n    public void getFilteredPriceForNull() throws Exception{\n        double budget = -1;\n        List&lt;TourBatch&gt; response = tourBatchServiceImpl.getFilteredPrice(budget);\n        assertThat(response).isNull();\n    }\n    @Test\n    @DisplayName(\"get filter status\")\n    public void getFilteredPrice() throws Exception{\n        double budget = 1000;\n        List&lt;TourBatch&gt; listOfTourbatch = new ArrayList&lt;&gt;();\n        listOfTourbatch.add(tourBatch);\n        Mockito.when(batchRepository.findFilteredPrice(budget)).thenReturn(listOfTourbatch);\n        List&lt;TourBatch&gt; response = tourBatchServiceImpl.getFilteredPrice(budget);\n        assertThat(response).isNotEmpty();\n    }\n\n}\n</code></pre> TourServiceTest.java<pre><code>package com.jt.service;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.mockito.Spy;\nimport org.mockito.junit.jupiter.MockitoExtension;\n\nimport com.jt.controller.TourControllerTest;\nimport com.jt.model.batch.TourBatch;\nimport com.jt.model.tour.DifficultyLevel;\nimport com.jt.model.tour.GuidedTour;\nimport com.jt.model.tour.Mode;\nimport com.jt.repository.BatchRepository;\nimport com.jt.repository.TourRepository;\n\nimport jakarta.persistence.EntityNotFoundException;\n\n\n@ExtendWith(MockitoExtension.class)\n@DisplayName(\"TourService Testing\")\npublic class TourServiceTest {\n\n    @Mock\n    private TourRepository tourRepository;\n\n    @Mock\n    private BatchRepository tourBatchRepository;\n\n    @InjectMocks\n    @Spy\n    private TourService tourService;\n\n    GuidedTour guidedTour = TourControllerTest.dummyDataForTour();\n\n    @Test\n    @DisplayName(\"Testing TourService Create Tour\")\n    public void createTourTest() {\n        Mockito.when(tourRepository.save(guidedTour)).thenReturn(guidedTour);\n        GuidedTour guidedTourSaveObject = tourService.addTour(guidedTour);\n        assertThat(guidedTourSaveObject).isNotNull();\n    }\n    @Test\n    @DisplayName(\"Testing TourService Create Tour for Null\")\n    public void createTourTestForEmptyTour() {\n        Mockito.when(tourRepository.save(guidedTour)).thenThrow(new EntityNotFoundException(\"not saving tour because null\"));\n        GuidedTour guidedTourSaveObject = tourService.addTour(guidedTour);\n        assertThat(guidedTourSaveObject).isNull();\n    }\n\n    @Test\n    @DisplayName(\"Test tourService GetAll tours\")\n    public void allToursTest() {\n        List&lt;GuidedTour&gt; guidedTourList = new ArrayList&lt;&gt;();\n        guidedTourList.add(guidedTour);\n        Mockito.when(tourRepository.findAll()).thenReturn(guidedTourList);\n        List&lt;GuidedTour&gt; responseList = tourService.getTours();\n        assertThat(responseList).isNotNull();\n        assertThat(responseList).isNotEmpty();\n    }\n    @Test\n    @DisplayName(\"Test tourService GetAll tours Empty list\")\n    public void allToursTestForNull() {\n        List&lt;GuidedTour&gt; guidedTourList = new ArrayList&lt;&gt;();\n        guidedTourList.add(guidedTour);\n        Mockito.when(tourRepository.findAll()).thenThrow(new EntityNotFoundException(\"Empty list of Tours\"));\n        List&lt;GuidedTour&gt; responseList = tourService.getTours();\n        assertThat(responseList).isNull();\n    }\n\n    @Test\n    @DisplayName(\"Test Tourservice TourById\")\n    public void tourByIdTest() {\n        Optional&lt;GuidedTour&gt; optional = Optional.of(guidedTour);\n        Mockito.when(tourRepository.findById(Mockito.anyLong())).thenReturn(optional);\n        GuidedTour responseGuidedTour = tourService.getTourById(1l);\n        assertThat(responseGuidedTour).isNotNull();\n        assertEquals(responseGuidedTour.getName() , \"mumbai-leh\");  \n    }\n\n    @Test\n    @DisplayName(\"Test Tourservice TourById for Invalid id\")\n    public void tourByIdTestForInvalidId() {\n        Mockito.when(tourRepository.findById(Mockito.anyLong())).thenThrow(new EntityNotFoundException(\"not found with tour id\"));\n        GuidedTour responseGuidedTour = tourService.getTourById(1l);\n        assertThat(responseGuidedTour).isNull();    \n    }\n    @Test\n    @DisplayName(\"Test deleteById\")\n    public void deleteTourById() {\n        Long tourId = 1L;\n        Mockito.doNothing().when(tourRepository).deleteById(tourId);\n        boolean result = tourService.deleteTourById(tourId);\n        assertTrue(result);\n    }\n    @Test\n    @DisplayName(\"Test deleteById for Invalid id\")\n    public void deleteTourByIdForInvalidId() {\n        Long tourId = -1L;\n        Mockito.doNothing().when(tourRepository).deleteById(0L);\n        boolean result = tourService.deleteTourById(tourId);\n        assertFalse(result);\n    }\n\n    @Test\n    @DisplayName(\"Test update tour\")\n    public void updateTour () {\n        Long tourId =1L;\n        GuidedTour guidedTourInput = new GuidedTour();\n        guidedTourInput.setId(tourId);\n        guidedTourInput.setName(\"nagpur-goa\");\n        when(tourRepository.findById(tourId)).thenReturn(Optional.of(guidedTourInput));\n        when(tourRepository.save(guidedTourInput)).thenReturn(guidedTourInput);\n        GuidedTour result = tourService.updateTour(guidedTourInput);\n        verify(tourRepository).save(guidedTourInput);\n        assertThat(result).isNotNull();\n    }\n    @Test\n    @DisplayName(\"Test update tour\")\n    public void updateTourForInvalidTour () {\n        Long tourId =1L;\n        GuidedTour guidedTourInput = new GuidedTour();\n        guidedTourInput.setId(tourId);\n        guidedTourInput.setName(\"nagpur-goa\");\n        when(tourRepository.findById(tourId)).thenThrow(new EntityNotFoundException(\"Update failed\"));\n        when(tourRepository.save(guidedTourInput)).thenReturn(guidedTourInput);\n        GuidedTour result = tourService.updateTour(guidedTourInput);\n        verify(tourRepository).save(guidedTourInput);\n        assertThat(result).isNull();\n    }\n    @Test\n    @DisplayName(\"Test get all tourbatch for tour\")\n    public void getTourBatches() {\n        Long tourId = 1L;\n        TourBatch tourBatch = new TourBatch();\n        tourBatch.setId(tourId);\n        List&lt;TourBatch&gt;listOfBatch = new ArrayList&lt;&gt;();\n        listOfBatch.add(tourBatch);\n        when(tourBatchRepository.findAllByTourId(tourId)).thenReturn(listOfBatch);\n        List&lt;TourBatch&gt; result = tourService.getTourBatches(tourId);\n        assertThat(result).isNotEmpty();\n    }\n\n    @Test\n    @DisplayName(\"Test get all tourbatch for tour for invalid case\")\n    public void getTourBatchesForInvalidCase() {\n        Long tourId = 1L;\n        TourBatch tourBatch = new TourBatch();\n        tourBatch.setId(tourId);\n        List&lt;TourBatch&gt;listOfBatch = new ArrayList&lt;&gt;();\n        listOfBatch.add(tourBatch);\n        when(tourBatchRepository.findAllByTourId(tourId)).thenThrow(new EntityNotFoundException(\"No batch available for tour\"));\n        List&lt;TourBatch&gt; result = tourService.getTourBatches(tourId);\n        assertThat(result).isNull();\n    }\n\n    @Test\n    @DisplayName(\"filter tour by duration\")\n    public void filterTourByDuration() {\n        int minDays = -1;\n        int maxDays  = 10;\n        List&lt;GuidedTour&gt; guidedToursList = new ArrayList&lt;&gt;();\n        guidedToursList.add(guidedTour);\n        Mockito.when(tourRepository.filterTourByDuration(minDays, maxDays)).thenReturn(guidedToursList);\n\n        List&lt;GuidedTour&gt; response = tourService.filterTourByDuration(minDays, maxDays);\n        assertThat(response).isNotEmpty();\n    }\n\n    @Test\n    @DisplayName(\"filter tour by duration\")\n    public void filterTourByDurationForInvalidTest() {\n        int minDays = 1;\n        int maxDays  = -10;\n        List&lt;GuidedTour&gt; guidedToursList = new ArrayList&lt;&gt;();\n        guidedToursList.add(guidedTour);        \n        List&lt;GuidedTour&gt; response = tourService.filterTourByDuration(minDays, maxDays);\n        assertThat(response).isEmpty();\n    }\n\n    @Test\n    @DisplayName(\"filter tour by Places\")\n    public void filterTourByPlace() {\n        String source = \"mumbai\";\n        String destination  = \"leh\";\n        List&lt;GuidedTour&gt; guidedToursList = new ArrayList&lt;&gt;();\n        guidedToursList.add(guidedTour);    \n\n        Mockito.when(tourRepository.filterToursByPlaceBetween(source, destination)).thenReturn(guidedToursList);\n\n        List&lt;GuidedTour&gt; response = tourService.filteredToursByPlace(source, destination);\n        assertThat(response).isNotEmpty();\n    }\n    @Test\n    @DisplayName(\"filter tour by Places for Null\")\n    public void filterTourByPlaceForNull() {\n        String source = null;\n        String destination  = null;\n        List&lt;GuidedTour&gt; guidedToursList = new ArrayList&lt;&gt;();\n        guidedToursList.add(guidedTour);    \n\n        Mockito.when(tourRepository.findAll()).thenReturn(guidedToursList);\n\n        List&lt;GuidedTour&gt; response = tourService.filteredToursByPlace(source, destination);\n        assertThat(response).isNotEmpty();\n    }\n    @Test\n    @DisplayName(\"filter tour by Places for Null\")\n    public void filterTourByPlaceForSourceNull() {\n        String source = null;\n        String destination  = \"leh\";\n        List&lt;GuidedTour&gt; guidedToursList = new ArrayList&lt;&gt;();\n        guidedToursList.add(guidedTour);    \n\n        Mockito.when(tourRepository.filterToursByPlaceDestination(destination)).thenReturn(guidedToursList);\n\n        List&lt;GuidedTour&gt; response = tourService.filteredToursByPlace(source, destination);\n        assertThat(response).isNotEmpty();\n    }\n    @Test\n    @DisplayName(\"filter tour by Places for Null\")\n    public void filterTourByPlaceForDestinationNull() {\n        String source = \"mumbai\";\n        String destination  = null;\n        List&lt;GuidedTour&gt; guidedToursList = new ArrayList&lt;&gt;();\n        guidedToursList.add(guidedTour);    \n\n        Mockito.when(tourRepository.filterToursByPlaceSource(source)).thenReturn(guidedToursList);\n\n        List&lt;GuidedTour&gt; response = tourService.filteredToursByPlace(source, destination);\n        assertThat(response).isNotEmpty();\n    }\n    @Test\n    @DisplayName(\"filter tour by Places for source and destination are equals\")\n    public void filterTourByPlaceForSourceAndDestinationEqualas() {\n        String source = \"mumbai\";\n        String destination  = \"mumbai\";\n        List&lt;GuidedTour&gt; guidedToursList = new ArrayList&lt;&gt;();\n        guidedToursList.add(guidedTour);        \n        List&lt;GuidedTour&gt; response = tourService.filteredToursByPlace(source, destination);\n        assertThat(response).isNull();\n    }\n    @Test\n    @DisplayName(\"filter tour by Places for source and destination are equals\")\n    public void filteredToursByModeTest() {\n        Mode mode = Mode.BICYCLE;\n        List&lt;GuidedTour&gt; guidedToursList = new ArrayList&lt;&gt;();\n        guidedToursList.add(guidedTour);    \n        Mockito.when(tourRepository.filterToursByMode(mode)).thenReturn(guidedToursList);\n        List&lt;GuidedTour&gt; response = tourService.filteredToursByMode(mode);\n        assertThat(response).isNotEmpty();\n    }\n    @Test\n    @DisplayName(\"filter tour by Places for source and destination are equals\")\n    public void filteredToursByModeTestForNull() {\n        Mode mode = null;\n        List&lt;GuidedTour&gt; guidedToursList = new ArrayList&lt;&gt;();\n        guidedToursList.add(guidedTour);    \n        Mockito.when(tourRepository.findAll()).thenReturn(guidedToursList);\n        List&lt;GuidedTour&gt; response = tourService.filteredToursByMode(mode);\n        assertThat(response).isNotEmpty();\n    }\n    @Test\n    @DisplayName(\"filter tours by difficulty\")\n    public void filteredToursByDifficultyLevelTest() {\n        DifficultyLevel diff = DifficultyLevel.EASY;\n        List&lt;GuidedTour&gt; guidedToursList = new ArrayList&lt;&gt;();\n        guidedToursList.add(guidedTour);    \n        Mockito.when(tourRepository.filteredToursByDifficultyLevel(diff)).thenReturn(guidedToursList);\n        List&lt;GuidedTour&gt; response = tourService.filteredToursByDifficultyLevel(diff);\n        assertThat(response).isNotEmpty();\n    }\n\n\n}\n</code></pre> UserServicesTest.java<pre><code>package com.jt.service;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\n\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport com.jt.controller.AuthController;\nimport com.jt.model.auth.Role;\nimport com.jt.model.auth.User;\nimport com.jt.repository.UserRepository;\n\n@ExtendWith(MockitoExtension.class)\npublic class UserServicesTest {\n\n\n    @Mock\n    private UserRepository userRepo;\n\n    @Mock\n    private PasswordEncoder passwordEncoder;\n\n    @InjectMocks\n    private UserService userService;\n\n    @InjectMocks\n    private AuthController yourController;\n\n    @Test\n    @DisplayName(\"Test Add User as ADMIN\")\n    public void testAddUserAsAdmin() throws Exception {\n        User user = new User();\n        user.setRole(Role.ADMIN);\n        user.setUserName(\"adminUser\");\n        user.setPassword(\"adminPassword\");\n        when(userRepo.findByRole(Role.valueOf(\"ADMIN\"))).thenReturn(null);\n        when(passwordEncoder.encode(user.getPassword())).thenReturn(\"encodedPassword\");\n        when(userRepo.save(user)).thenReturn(user);\n        User result = userService.createTheUser(user);\n        verify(userRepo, times(1)).save(user);\n        assertNotNull(result);\n        assertEquals(user, result);\n    }\n\n    @Test\n    @DisplayName(\"Test Add User as ADMIN for null\")\n    public void testAddUserAsAdminForReturnNull() throws Exception {\n        User user = new User();\n        user.setRole(Role.ADMIN);\n        user.setUserName(\"adminUser\");\n        user.setPassword(\"adminPassword\");\n        when(userRepo.findByRole(Role.valueOf(\"ADMIN\"))).thenReturn(user);  \n        User result = userService.createTheUser(user);\n        assertThat(result).isNull();\n    }\n}\n</code></pre></p>"},{"location":"Spring%20Framework/EventDetail/","title":"Event Detail Application","text":"<p>pom.xml<pre><code>   &lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;groupId&gt;com.spring&lt;/groupId&gt;\n    &lt;artifactId&gt;eventDetail&lt;/artifactId&gt;\n    &lt;packaging&gt;war&lt;/packaging&gt;\n    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;   \n    &lt;url&gt;http://maven.apache.org&lt;/url&gt;\n    &lt;properties&gt;\n        &lt;failOnMissingWebXml&gt;false&lt;/failOnMissingWebXml&gt;\n        &lt;spring.version&gt;5.1.0.RELEASE&lt;/spring.version&gt;\n        &lt;hibernate.version&gt;5.2.17.Final&lt;/hibernate.version&gt;\n        &lt;hibernate.validator&gt;5.4.1.Final&lt;/hibernate.validator&gt;\n        &lt;c3p0.version&gt;0.9.5.2&lt;/c3p0.version&gt;\n        &lt;jstl.version&gt;1.2.1&lt;/jstl.version&gt;\n        &lt;tld.version&gt;1.1.2&lt;/tld.version&gt;\n        &lt;servlets.version&gt;3.1.0&lt;/servlets.version&gt;\n        &lt;jsp.version&gt;2.3.1&lt;/jsp.version&gt;\n        &lt;log4j.version&gt;1.2.17&lt;/log4j.version&gt;\n    &lt;/properties&gt;\n    &lt;dependencies&gt;\n\n        &lt;!-- Spring MVC Dependency --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;\n            &lt;version&gt;${spring.version}&lt;/version&gt;\n            &lt;exclusions&gt;\n                &lt;exclusion&gt;\n                    &lt;groupId&gt;commons-logging&lt;/groupId&gt;\n                    &lt;artifactId&gt;commons-logging&lt;/artifactId&gt;\n                &lt;/exclusion&gt;\n            &lt;/exclusions&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- Spring ORM --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-orm&lt;/artifactId&gt;\n            &lt;version&gt;${spring.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.hibernate&lt;/groupId&gt;\n            &lt;artifactId&gt;hibernate-entitymanager&lt;/artifactId&gt;\n            &lt;version&gt;${hibernate.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- Hibernate Validator --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.hibernate&lt;/groupId&gt;\n            &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;\n            &lt;version&gt;${hibernate.validator}&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- https://mvnrepository.com/artifact/org.springframework.data/spring-data-jpa --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-data-jpa&lt;/artifactId&gt;\n            &lt;version&gt;2.1.0.RELEASE&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- JSTL Dependency --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;javax.servlet.jsp.jstl&lt;/groupId&gt;\n            &lt;artifactId&gt;javax.servlet.jsp.jstl-api&lt;/artifactId&gt;\n            &lt;version&gt;${jstl.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;taglibs&lt;/groupId&gt;\n            &lt;artifactId&gt;standard&lt;/artifactId&gt;\n            &lt;version&gt;${tld.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- Servlet Dependency --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;\n            &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;\n            &lt;version&gt;${servlets.version}&lt;/version&gt;\n            &lt;scope&gt;provided&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- JSP Dependency --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;\n            &lt;artifactId&gt;javax.servlet.jsp-api&lt;/artifactId&gt;\n            &lt;version&gt;${jsp.version}&lt;/version&gt;\n            &lt;scope&gt;provided&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;mysql&lt;/groupId&gt;\n            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n            &lt;version&gt;5.1.47&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- logging --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;\n            &lt;artifactId&gt;jcl-over-slf4j&lt;/artifactId&gt;\n            &lt;version&gt;1.7.20&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;\n            &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;\n            &lt;version&gt;1.1.7&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;\n            &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;\n            &lt;version&gt;2.2&lt;/version&gt;\n            &lt;scope&gt;provided&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n                &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;\n                &lt;version&gt;2.3&lt;/version&gt;\n                &lt;configuration&gt;\n                    &lt;warSourceDirectory&gt;src/main/webapp&lt;/warSourceDirectory&gt;\n                &lt;/configuration&gt;\n            &lt;/plugin&gt;\n\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\n                &lt;version&gt;3.1&lt;/version&gt;\n                &lt;configuration&gt;\n                    &lt;source&gt;1.8&lt;/source&gt;\n                    &lt;target&gt;1.8&lt;/target&gt;\n                &lt;/configuration&gt;\n            &lt;/plugin&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;\n                &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;\n                &lt;version&gt;2.2&lt;/version&gt;\n\n                &lt;configuration&gt;\n                    &lt;path&gt;/&lt;/path&gt;\n                &lt;/configuration&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n&lt;/project&gt;\n</code></pre> Main.java<pre><code>import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\nimport com.spring.dao.EventDAO;\nimport com.spring.entity.Event;\nimport com.spring.service.EventService;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) throws NumberFormatException, IOException {\n        Logger log = Logger.getLogger(\"org.hibernate\");\n        log.setLevel(Level.OFF);\n        System.setProperty(\"org.apache.commons.logging.Log\", \"org.apache.commons.logging.impl.NoOpLog\");\n        Scanner input = new Scanner(System.in).useDelimiter(\"\\\\s*[\\\\n]\\\\s*\");\n        // BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n        // Fill your code here\n        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n        EventDAO enentservice = context.getBean(\"eventDAO\", EventDAO.class);\n        System.out.println(\"Before inserting\");\n        System.out.printf(\"%-15s%-15s%-15s%-15s%-15s%-15s\\n\", \"Id\", \"Event Name\", \"Organiser Name\", \"Organiser Number\",\"Hall Name\",\"Location\");\n        for (Event event : enentservice.getAllEvents()) {\n            System.out.printf(\"%-15s%-15s%-15s%-15s%-15s%-15s\\n\", event.getId(), event.getEventName(), event.getOrganiser(), event.getOrganiserNumber(),event.getHallName(),event.getLocation());\n\n        }\n        System.out.println(\"Enter the id of the Event :\");\n        int id = input.nextInt();\n        try {\n            Event event1 = enentservice.getEventById(id);\n            event1.getId();\n            System.out.println(\"Invalid id\");\n            System.exit(0);\n        }catch(Exception e) {\n\n\n            System.out.println(\"Enter the name of the Event : \");\n            String eventName = input.next();\n            System.out.println(\"Enter the Organiser name :\");\n            String organiserName = input.next();\n            System.out.println(\"Enter the organiser number :\");\n            String organiserNumber = input.next();\n            System.out.println(\"Enter the Hall name :\");\n            String hallName = input.next();\n            System.out.println(\"Enter the location :\");\n            String location = input.next();\n            enentservice.createEvent(id, eventName, organiserName, organiserNumber, hallName, location);\n            System.out.println(\"Value inserted successfully\");\n            System.out.println(\"After insertion\");\n            System.out.printf(\"%-15s%-15s%-15s%-15s%-15s%-15s\\n\", \"Id\", \"Event Name\", \"Organiser Name\", \"Organiser Number\",\"Hall Name\",\"Location\");\n            for (Event event : enentservice.getAllEvents()) {\n                System.out.printf(\"%-15s%-15s%-15s%-15s%-15s%-15s\\n\", event.getId(), event.getEventName(), event.getOrganiser(), event.getOrganiserNumber(),event.getHallName(),event.getLocation());\n\n            }\n            // }\n            // else {\n            // System.out.println(\"Invalid id\");\n            // }\n\n            System.exit(0);\n\n\n        }\n\n\n    }\n}\n</code></pre></p>"},{"location":"Spring%20Framework/EventDetail/#configuration","title":"Configuration","text":"applicationContext.xml<pre><code>&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context=\"http://www.springframework.org/schema/context\"\n    xsi:schemaLocation=\"\n           http://www.springframework.org/schema/beans\n           http://www.springframework.org/schema/beans/spring-beans-3.1.xsd\n           http://www.springframework.org/schema/context\n           http://www.springframework.org/schema/context/spring-context-3.1.xsd\"&gt;\n\n&lt;context:annotation-config/&gt;\n&lt;context:component-scan base-package=\"com.spring\"/&gt;\n&lt;context:property-placeholder location=\"classpath:oracle.properties\"/&gt;  \n\n&lt;!-- \n&lt;bean id=\"dataSource\" class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\"&gt;  \n&lt;property name=\"driverClassName\" value=\"oracle.jdbc.driver.OracleDriver\" /&gt;  \n&lt;property name=\"url\" value=\"${db.url}\" /&gt;  \n&lt;property name=\"username\" value=\"${db.username}\" /&gt;  \n&lt;property name=\"password\" value=\"${db.password}\" /&gt;  \n&lt;/bean&gt;  \n --&gt;  \n&lt;bean class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\" id=\"dataSource\"&gt;\n        &lt;property name=\"driverClassName\" value=\"com.mysql.jdbc.Driver\"/&gt;\n        &lt;property name=\"url\" value=\"jdbc:mysql://localhost:3306/jdbc\"/&gt;\n        &lt;property name=\"username\" value=\"root\"/&gt;\n        &lt;property name=\"password\" value=\"root\"/&gt;\n    &lt;/bean&gt;\n\n&lt;bean id=\"jdbcTemplate\" class=\"org.springframework.jdbc.core.JdbcTemplate\"&gt;  \n&lt;property name=\"dataSource\" ref=\"dataSource\"&gt;&lt;/property&gt;  \n&lt;/bean&gt;\n\n&lt;bean id=\"eventDAO\" class=\"com.spring.dao.EventDAO\"&gt;\n&lt;property name=\"template\" ref=\"jdbcTemplate\"/&gt;&lt;/bean&gt;\n&lt;/beans&gt;   \n</code></pre>"},{"location":"Spring%20Framework/EventDetail/#service","title":"Service","text":"EventService.java<pre><code>package com.spring.service;\nimport com.spring.dao.EventDAO;\nimport com.spring.entity.*;\nimport java.sql.ResultSet;\nimport java.sql.Types;\nimport java.sql.SQLException;\nimport java.util.List;\n\nimport javax.sql.DataSource;\nimport org.springframework.dao.DuplicateKeyException;\nimport org.springframework.dao.EmptyResultDataAccessException;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.core.ResultSetExtractor;\nimport org.springframework.jdbc.core.RowMapper;\nimport org.springframework.stereotype.Service;\n//Fill your code here\n@Service\npublic class EventService {\n        @Autowired\n        EventDAO eventdao;\n        public EventService(EventDAO eventdao) {\n            super();\n            this.eventdao = eventdao;\n        }\n        //Fill your code here\n\n    public EventService() {\n            super();\n            // TODO Auto-generated constructor stub\n        }\n    public List&lt;Event&gt; getAllEvents(){\n        //fill your code\n\n        return this.eventdao.getAllEvents();\n\n    }\n    public Event getEventById(int id){\n          //Fill your code here\n        return this.eventdao.getEventById(id);\n    }\n\n    public void createEvent(int id,String eventName,String organiser,String organiserNumber,String hallName, String location) {\n\n        //Fill your code here\n        this.eventdao.createEvent(id, eventName, organiser, organiserNumber, hallName, location);\n\n    }           \n    }\n</code></pre>"},{"location":"Spring%20Framework/EventDetail/#dao","title":"DAO","text":"EventDAO.java<pre><code>package com.spring.dao;\nimport org.springframework.jdbc.core.BeanPropertyRowMapper;\nimport com.spring.entity.Event;\nimport java.sql.ResultSet;\nimport java.sql.Types;\nimport java.sql.SQLException;\nimport java.util.List;\nimport javax.sql.DataSource;\n\nimport org.springframework.dao.DataAccessException;\nimport org.springframework.dao.DuplicateKeyException;\nimport org.springframework.dao.EmptyResultDataAccessException;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.core.ResultSetExtractor;\nimport org.springframework.jdbc.core.RowMapper;\nimport org.springframework.stereotype.Component;\nimport org.springframework.stereotype.Repository;\n//Fill your code here\n\npublic class EventDAO {\n\n    //Fill your code here\n    JdbcTemplate template;\n\n    public JdbcTemplate getTemplate() {\n        return template;\n    }\n\n    public void setTemplate(JdbcTemplate template) {\n        this.template = template;\n    }\n\n    public EventDAO(JdbcTemplate template) {\n        super();\n        this.template = template;\n    }\n\n    public EventDAO() {\n        super();\n        // TODO Auto-generated constructor stub\n    }\n\n    public List&lt;Event&gt; getAllEvents(){\n        //fill your code\n        String query=\"select * from event\";\n        return this.template.query(query, new RowMapper&lt;Event&gt;() {\n\n            @Override\n            public Event mapRow(ResultSet rs, int rowNum) throws SQLException {\n                // TODO Auto-generated method stub\n                Event event=new Event();\n                event.setId(rs.getInt(\"id\"));\n                event.setEventName(rs.getString(\"event_name\"));\n                event.setOrganiser(rs.getString(\"organiser\"));\n                event.setOrganiserNumber(rs.getString(\"organiser_number\"));\n                event.setHallName(rs.getString(\"hall_name\"));\n                event.setLocation(rs.getString(\"location\"));\n                return event;\n            }\n\n        });\n\n    }\n\n    public Event getEventById(int id){\n          //Fill your code here\n        String query=\"select * from event where id=\"+id;\n        return this.template.query(query, new ResultSetExtractor&lt;Event&gt;() {\n\n            @Override\n            public Event extractData(ResultSet rs) throws SQLException, DataAccessException {\n                // TODO Auto-generated method stub\n                if(rs.next()) {\n                    Event event=new Event();\n                    event.setId(rs.getInt(\"id\"));\n                    event.setEventName(rs.getString(\"event_name\"));\n                    event.setOrganiserNumber(rs.getString(\"organiser_number\"));\n                    event.setOrganiserNumber(\"organiser_number\");\n                    event.setHallName(rs.getString(\"hall_name\"));\n                    event.setLocation(rs.getString(\"location\"));\n                    return event;\n                }\n                return null;\n            }\n\n        });\n\n\n    }\n\n    public void createEvent(int id,String eventName,String organiser,String organiserNumber,String hallName, String location) {\n        String query=\"INSERT INTO event (id, event_name, organiser, organiser_number, hall_name, location) VALUES (?,?,?,?,?,?)\";\n        //Fill your code here\n         this.template.update(query,id,eventName,organiser,organiserNumber,hallName,location);\n\n    }           \n    }\n/*\n * \n * public List&lt;Event&gt; getAllEvents(){\n        //fill your code\n        String query=\"select * from event\";\n        return this.template.query(query, new RowMapperImpl());\n\n    }\n\n    public Event getEventById(int id){\n          //Fill your code here\n        String query=\"select * from event where id=?\";\n        return (Event) this.template.queryForObject(query, new RowMapperImpl(), id);\n\n\n    }\n\n    public void createEvent(int id,String eventName,String organiser,String organiserNumber,String hallName, String location) {\n        String query=\"INSERT INTO event (id, event_name, organiser, organiser_number, hall_name, location) VALUES (?,?,?,?,?,?)\";\n        //Fill your code here\n         this.template.update(query,id,eventName,organiser,organiserNumber,hallName,location);\n\n    }  \n * \n * \n * \n * \n * \n * */\n</code></pre>"},{"location":"Spring%20Framework/EventDetail/#entity","title":"Entity","text":"Event.java<pre><code>package com.spring.entity;\n\n\npublic class Event {\n\n    private int id;\n    private String eventName;\n    private String organiser;\n    private String organiserNumber;\n    private String hallName;\n    private String location;\n\n    public int getId() {\n        return id;\n    }\n    public void setId(int id) {\n        this.id = id;\n    }\n    public String getEventName() {\n        return eventName;\n    }\n    public void setEventName(String eventName) {\n        this.eventName = eventName;\n    }\n    public String getOrganiser() {\n        return organiser;\n    }\n    public void setOrganiser(String organiser) {\n        this.organiser = organiser;\n    }\n    public String getOrganiserNumber() {\n        return organiserNumber;\n    }\n    public void setOrganiserNumber(String organiserNumber) {\n        this.organiserNumber = organiserNumber;\n    }\n    public String getHallName() {\n        return hallName;\n    }\n    public void setHallName(String hallName) {\n        this.hallName = hallName;\n    }\n\n    public String getLocation() {\n        return location;\n    }\n    public void setLocation(String location) {\n        this.location = location;\n    }\n\n\n    public Event() {}\n\n    public Event(int id,String eventName,String organiser,String organiserNumber,String hallName, String location) {\n       this.id = id;\n       this.eventName = eventName;\n        this.organiser = organiser;\n        this.organiserNumber = organiserNumber;\n        this.hallName = hallName;\n       this.location = location;\n\n    }\n\n}\n</code></pre>"},{"location":"Spring%20Framework/EventDetail/#resources","title":"Resources","text":"<p>oracle.properties<pre><code>db.url = jdbc:oracle:thin:@localhost:1521:xe\ndb.username = root\ndb.password = student\n</code></pre> queries.sql<pre><code>Begin\n   execute immediate 'Drop table event';\nEXCEPTION\n   WHEN OTHERS THEN NULL;\nEND;\n/\n\ncreate table event(id number(19) primary key,event_name varchar2(255),organiser varchar2(255),organiser_number varchar2(255),hall_name varchar2(255),location varchar2(255), primary key(id));\n\n-- Generate ID using sequence and trigger\ndrop sequence event_seq;\ncreate sequence event_seq start with 1 increment by 1;\n\ncreate or replace trigger event_seq_tr\n before insert on event for each row\n when (new.id is null)\nbegin\n select event_seq.nextval into :new.id from dual;\nend;\n/\n\nINSERT INTO event (id, event_name, organiser, organiser_number, hall_name, location) VALUES (1,'Birthday Party','Robert','7894561230', 'RR Hall', 'Washington');\nINSERT INTO event (id, event_name, organiser, organiser_number, hall_name, location) VALUES (2,'Sports Ceremony','William','7894567890', 'KK Mahal','San Fransisco');\nINSERT INTO event (id, event_name, organiser, organiser_number, hall_name, location) VALUES (3,'Home Fest','Jessy','968520147', 'Golden Mahal', 'Chicago');\nINSERT INTO event (id, event_name, organiser, organiser_number, hall_name, location) VALUES (4,'Wedding Event','Peter','8523697410', 'PKR Mahal', 'New York');\nINSERT INTO event (id, event_name, organiser, organiser_number, hall_name, location) VALUES (5,'Roto Fest','Stuart','9874563201', 'Hills Party Hall', 'Paris');\n</code></pre></p>"},{"location":"Spring%20Framework/EventRecommendor/","title":"Event Recommendor Application","text":"<p>Event Recommendor [Note:  Strictly adhere to the object-oriented specifications given as a part of the problem statement. Follow the naming conventions as mentioned.  Create separate classes in separate files.]  </p> <p>Just as Vimal completed his work, his friend Ruby comes up with another idea. She tells him to create an event recommendor. The event recommendor, gets the budget the user can spend on entertainment and recommends the event based on that.</p> <p>Can you assist Vimal in this?</p> <p>Class Event has been created with the following attributes/variables DataType    Variable String  eventName String  eventOrganiser Double  fare</p> <p>Appropriate getters, setters and parametrized constructor has been created for you.</p> <p>The above class also contains the following methods Method  Description display()   This methids displays the details of that particular event.</p> <p>Class EventList has been created with the following attribute/varible DataType    Variable ArrayList    eventMenu <p>The class contains the following methods to implement Method  Description public void insert(Event event)     Inserts the event object in the eventMenu arrayList public ArrayList recommendfor(Double budget)   This method creates a string of the format -. Then the string is added to returned arrayList. For eg., Puppet Show-2 <p>Create an applicationContext.xml file with the following beans id=event1 eventName=Magic Show eventOrganiser=Vadivel fare=650</p> <p>id=event2 eventName=Puppet Show eventOrganiser=Maggie fare=250</p> <p>id=event3 eventName=Standup Comedy eventOrganiser=Arun fare=500</p> <p>Hint : To prevent logging info, include these lines in your Main  Logger log = Logger.getLogger(\"org.hibernate\"); log.setLevel(Level.OFF); System.setProperty(\"org.apache.commons.logging.Log\", \"org.apache.commons.logging.impl.NoOpLog\");</p> <p>In the main method, create get the references for the event objects and insert them into the eventMenu of EventList class. Get the budget from the user.Using the EventList object call the recommendfor(Double budget) method. Iterate through the recommendation strings and print the same.</p> <p>Jars for spring are available in this link \u2013 Spring Jars Input and Output Format  Refer sample input and output for formatting specifications.  All text in bold corresponds to the input and the rest corresponds to output.   </p> <p>Sample Input and Output 1:  </p> <p>Enter your Budget 100 No Shows available</p> <p>Sample Input and Output 2: Enter your Budget 1000 Magic Show-1 Puppet Show-4 Standup Comedy-2</p> <p>pom.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n    &lt;groupId&gt;com&lt;/groupId&gt;\n    &lt;artifactId&gt;eventRecommendor&lt;/artifactId&gt;\n    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;\n    &lt;name&gt;pci&lt;/name&gt;\n    &lt;url&gt;http://maven.apache.org&lt;/url&gt;\n\n    &lt;properties&gt;\n        &lt;java.version&gt;1.8&lt;/java.version&gt;\n    &lt;/properties&gt;\n\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;1.4.2.RELEASE&lt;/version&gt;\n    &lt;/parent&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;!-- https://mvnrepository.com/artifact/org.json/json --&gt;\n       &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;\n            &lt;!--&lt;scope&gt;provided&lt;/scope&gt; --&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.easymock&lt;/groupId&gt;\n            &lt;artifactId&gt;easymock&lt;/artifactId&gt;\n            &lt;version&gt;3.1&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;\n            &lt;artifactId&gt;gson&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.json&lt;/groupId&gt;\n            &lt;artifactId&gt;json&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;\n            &lt;artifactId&gt;httpclient&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;junit&lt;/groupId&gt;\n            &lt;artifactId&gt;junit&lt;/artifactId&gt;\n            &lt;version&gt;4.12&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-test&lt;/artifactId&gt;\n            &lt;version&gt;4.0.5.RELEASE&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n         &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-test&lt;/artifactId&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt;\n            &lt;artifactId&gt;selenium-java&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n    &lt;/dependencies&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n\n&lt;/project&gt;\n</code></pre> Main.java<pre><code>import java.util.ArrayList;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.Scanner;\n\nimport org.springframework.beans.BeansException;\n\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\nimport com.spring.Event;\nimport com.spring.EventList;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Logger log = Logger.getLogger(\"org.hibernate\");\n        log.setLevel(Level.OFF);\n        System.setProperty(\"org.apache.commons.logging.Log\", \"org.apache.commons.logging.impl.NoOpLog\");\n\n        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n            EventList list= new EventList();\n            list.insert(context.getBean(\"event1\",Event.class));\n            list.insert(context.getBean(\"event2\",Event.class));\n            list.insert(context.getBean(\"event3\",Event.class));\n\n            System.out.println(\"Enter your Budget\");\n            Scanner input = new Scanner(System.in);\n                double budget = input.nextDouble();\n                ArrayList&lt;String&gt; recommendfor=list.recommendfor(budget);\n\n                if(recommendfor.size()==0) {\n                    System.out.println(\"No Shows available\");\n                }\n                else {\n                    for(String recommend:recommendfor) {\n                        System.out.println(recommend);\n                    }\n                }\n                input.close();\n\n    }\n\n}\n</code></pre></p>"},{"location":"Spring%20Framework/EventRecommendor/#configuration","title":"Configuration","text":"applicationContext.xml<pre><code>&lt;!DOCTYPE beans PUBLIC \"-//SPRING//DTD BEAN 2.0//EN\"\n        \"http://www.springframework.org/dtd/spring-beans-2.0.dtd\"&gt;\n\n&lt;beans&gt;\n\n    &lt;bean id=\"event1\" class=\"com.spring.Event\"&gt;\n                &lt;property name=\"eventName\" value=\"Magic Show\"/&gt;\n                &lt;property name=\"eventOrganiser\" value=\"Vadivel\"/&gt;\n                &lt;property name=\"fare\" value=\"650\"/&gt;\n        &lt;/bean&gt;\n        &lt;bean id=\"event2\" class=\"com.spring.Event\"&gt;\n                &lt;property name=\"eventName\" value=\"Puppet Show\"/&gt;\n                &lt;property name=\"eventOrganiser\" value=\"Maggie\"/&gt;\n                &lt;property name=\"fare\" value=\"250\"/&gt;\n        &lt;/bean&gt;\n        &lt;bean id=\"event3\" class=\"com.spring.Event\"&gt;\n                &lt;property name=\"eventName\" value=\"Standup Comedy\"/&gt;\n                &lt;property name=\"eventOrganiser\" value=\"Arun\"/&gt;\n                &lt;property name=\"fare\" value=\"500\"/&gt;\n        &lt;/bean&gt;\n&lt;/beans&gt;\n</code></pre>"},{"location":"Spring%20Framework/EventRecommendor/#model","title":"Model","text":"<p>Event.java<pre><code>package com.spring;\n\npublic class Event {\n    String eventName;\n    String eventOrganiser;\n    Double fare;\n    public Event() {\n\n    }\n    public Event(String eventName, String eventOrganiser, Double fare) {\n        this.eventName = eventName;\n        this.eventOrganiser = eventOrganiser;\n        this.fare = fare;\n    }\n    public String getEventName() {\n        return eventName;\n    }\n    public void setEventName(String eventName) {\n        this.eventName = eventName;\n    }\n    public String getEventOrganiser() {\n        return eventOrganiser;\n    }\n    public void setEventOrganiser(String eventOrganiser) {\n        this.eventOrganiser = eventOrganiser;\n    }\n    public Double getFare() {\n        return fare;\n    }\n    public void setFare(Double fare) {\n        this.fare = fare;\n    }\n    public void display() {\n        //Fill your code here\n    }\n\n}\n</code></pre> EventList.java<pre><code>package com.spring;\n\nimport java.util.ArrayList;\n\npublic class EventList {\n\n    public ArrayList&lt;Event&gt; eventMenu = new ArrayList&lt;&gt;();\n    public EventList() {\n\n    }\n    public EventList(ArrayList&lt;Event&gt; eventMenu) {\n        this.eventMenu = eventMenu;\n    }\n    public void insert(Event event) {\n        //Fill your code here\n        this.eventMenu.add(event);\n    }\n    public ArrayList&lt;String&gt; recommendfor(Double budget){\n        //Fill your code here\n        ArrayList&lt;String&gt; recommendfor=new ArrayList&lt;&gt;();\n        int numberOfTickets=0;\n        for(Event element: eventMenu) {\n            numberOfTickets=(int)(budget/element.getFare());\n            if(numberOfTickets&gt;0)\n                recommendfor.add(element.getEventName()+\"-\"+numberOfTickets);\n\n        }\n\n        return recommendfor;\n    }\n\n\n}\n</code></pre></p>"},{"location":"Spring%20Framework/ScopeGames/","title":"Scope Games","text":"<p>Scope Games- 1 Note: Strictly adhere to the object-oriented specifications given as a part of the problem statement. Follow the naming conventions as mentioned.  Create separate classes in separate files. Vimal is learning about bean scopes. He decides to create an application that asks the number of owners to create and the number of events to create. When the owner or event is created, print the message \"...Creating an owner...\" or \"...Creating an event...\" Let us help him</p> <p>Class Event has been created with the follwing attributes/variables Data Type   Variable int             id String  eventName Owner   eventOrganiser</p> <p>Appropriate getters, setters and parametrized constructor has been created for you. Include a default argument constructor to print out \"...Creating an event...\"</p> <p>Class Owner has been created with the following attributes/variables Data Type   Variable String  name String  password</p> <p>Appropriate getters, setters and parametrized constructor has been created for you. Include a default argument constructor to print out \"...Creating an owner...\"</p> <p>Create an applicationContext.xml file and mention the required scopes</p> <p>Hint: Include these following lines to prevent logging : Logger log = Logger.getLogger(\"org.hibernate\"); log.setLevel(Level.OFF); System.setProperty(\"org.apache.commons.logging.Log\", \"org.apache.commons.logging.impl.NoOpLog\");</p> <p>In the main method get the number of owners , events , ownerdetails and eventdetails and set them. Pass the owner object to the eventOrganiser attribute , based on user's choice. (Refer sample input and output for the details). Jars for spring are available in this link \u2013 Spring Jars</p> <p>Input and Output Format    Refer sample input and output for formatting specifications.    All text in bold corresponds to the input and the rest corresponds to output.     </p> <p>Sample Input and Output :    </p> <p>Enter the number of owners you want to create 2 ...Creating an owner... Enter the Name and Password of the Owner Cersei cersei312 ...Creating an owner... Enter the Name and Password of the Owner Jaime jaime1234 Enter the number of events you want to create 2 ...Creating a new event... Enter the  Event name Red wedding Select any option from the list and enter the number 1)Cersei 2)Jaime Enter the choice 1 ...Creating a new event... Enter the  Event name Duel Select any option from the list and enter the number 1)Cersei 2)Jaime Enter the choice 2 ...Listing events... 1)Red wedding - Cersei 2)Duel - Jaime</p> <p>pom.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n    &lt;groupId&gt;com&lt;/groupId&gt;\n    &lt;artifactId&gt;scopeGames&lt;/artifactId&gt;\n    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;\n    &lt;name&gt;pci&lt;/name&gt;\n    &lt;url&gt;http://maven.apache.org&lt;/url&gt;\n\n    &lt;properties&gt;\n        &lt;java.version&gt;1.8&lt;/java.version&gt;\n    &lt;/properties&gt;\n\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;1.4.2.RELEASE&lt;/version&gt;\n    &lt;/parent&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;!-- https://mvnrepository.com/artifact/org.json/json --&gt;\n       &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;\n            &lt;!--&lt;scope&gt;provided&lt;/scope&gt; --&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.easymock&lt;/groupId&gt;\n            &lt;artifactId&gt;easymock&lt;/artifactId&gt;\n            &lt;version&gt;3.1&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;\n            &lt;artifactId&gt;gson&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.json&lt;/groupId&gt;\n            &lt;artifactId&gt;json&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;\n            &lt;artifactId&gt;httpclient&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;junit&lt;/groupId&gt;\n            &lt;artifactId&gt;junit&lt;/artifactId&gt;\n            &lt;version&gt;4.12&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-test&lt;/artifactId&gt;\n            &lt;version&gt;4.0.5.RELEASE&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n         &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-test&lt;/artifactId&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt;\n            &lt;artifactId&gt;selenium-java&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n    &lt;/dependencies&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n\n&lt;/project&gt;\n</code></pre> Main.java<pre><code>import com.spring.*;\nimport java.util.ArrayList;\n\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.Scanner;\n\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Logger log = Logger.getLogger(\"org.hibernate\");\n        log.setLevel(Level.OFF);\n        System.setProperty(\"org.apache.commons.logging.Log\", \"org.apache.commons.logging.impl.NoOpLog\");\n        Scanner input=new Scanner(System.in).useDelimiter(\"\\\\s*[\\\\n]\\\\s*\");\n        ClassPathXmlApplicationContext context=new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n\n        System.out.println(\"Enter the number of owners you want to create\");\n        int numberOfOwners=input.nextInt();\n        ArrayList&lt;Owner&gt; addOwner=new ArrayList&lt;&gt;();\n        for(int i=1;i&lt;=numberOfOwners;i++) {\n\n            Owner owner= new Owner();\n\n            System.out.println(\"Enter the Name and Password of the Owner\");\n            String name=input.next();\n            String password=input.next();\n\n\n            owner.setName(name);\n            owner.setPassword(password);\n            addOwner.add(owner);\n\n        }\n\n        System.out.println(\"Enter the number of events you want to create\");\n        int numberOfEvents=input.nextInt();\n        ArrayList&lt;Event&gt; addEvent=new ArrayList&lt;&gt;();\n        for(int j=1;j&lt;=numberOfEvents;j++) {\n\n            Event event=new Event();\n            System.out.println(\"Enter the  Event name\");\n            String Ename=input.next();\n            System.out.println(\"Select any option from the list and enter the number\");\n\n            int k=1;\n            for(Owner own:addOwner) {\n                System.out.println(k+\")\"+(own).getName());\n                k++;\n            }\n            System.out.println(\"Enter the choice\");\n            int choice=input.nextInt();\n            event.setId(j);\n            event.setEventName(Ename);\n            event.setEventOrganiser(addOwner.get(choice-1));\n            addEvent.add(event);\n        }\n\n\n        System.out.println(\"...Listing events...\");\n        for(Event eventt:addEvent) {\n            System.out.println((eventt).getId() +\")\"+(eventt).getEventName()+\" - \"+(eventt).getEventOrganiser().getName());\n\n        }\n\n\n        input.close();\n\n    }\n\n\n\n}\n</code></pre></p>"},{"location":"Spring%20Framework/ScopeGames/#entities","title":"Entities","text":"<p>Event.java<pre><code>package com.spring;\n\npublic class Event {\n\n    int id;\n    String eventName;\n    Owner eventOrganiser;\n\n    public Event() {\n        System.out.println(\"...Creating a new event...\");\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public String getEventName() {\n        return eventName;\n    }\n\n    public void setEventName(String eventName) {\n        this.eventName = eventName;\n    }\n\n    public Owner getEventOrganiser() {\n        return eventOrganiser;\n    }\n\n    public void setEventOrganiser(Owner eventOrganiser) {\n        this.eventOrganiser = eventOrganiser;\n    }\n\n    public void display() {\n\n    }\n\n    public void setProperties(String eventName) {\n        this.setEventName(eventName);\n\n    }\n\n}\n</code></pre> Owner.java<pre><code>package com.spring;\n\npublic class Owner {\n    public Owner() {\n        System.out.println(\"...Creating an owner...\");\n    }\n    public Owner(String name, String password) {\n        this.name = name;\n        this.password = password;\n    }\n\n    String name;\n    String password;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n}\n</code></pre></p>"},{"location":"Spring%20Framework/ScopeGames/#resources","title":"Resources","text":"applicationContext.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans \n    http://www.springframework.org/schema/beans/spring-beans.xsd\"&gt;\n\n    &lt;!-- No bean definitions needed here since they will be created dynamically --&gt;\n  &lt;bean class=\"com.spring.Owner\"&gt;\n\n  &lt;/bean&gt;\n  &lt;bean class=\"com.spring.Event\"&gt;\n\n  &lt;/bean&gt;\n&lt;/beans&gt;\n</code></pre>"},{"location":"Spring%20Framework/Spring-Concepts/","title":"Spring Concepts with Demo","text":"pom.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n  &lt;groupId&gt;com.psl&lt;/groupId&gt;\n  &lt;artifactId&gt;spring.a.didemo&lt;/artifactId&gt;\n  &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;\n\n  &lt;name&gt;spring.a.didemo&lt;/name&gt;\n  &lt;!-- FIXME change it to the project's website --&gt;\n  &lt;url&gt;http://www.example.com&lt;/url&gt;\n\n  &lt;properties&gt;\n    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;\n    &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;\n    &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;\n  &lt;/properties&gt;\n\n  &lt;dependencies&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;junit&lt;/groupId&gt;\n      &lt;artifactId&gt;junit&lt;/artifactId&gt;\n      &lt;version&gt;4.11&lt;/version&gt;\n      &lt;scope&gt;test&lt;/scope&gt;\n    &lt;/dependency&gt;\n\n    &lt;dependency&gt;\n         &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;\n        &lt;version&gt;5.3.25&lt;/version&gt;\n    &lt;/dependency&gt;\n\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-core&lt;/artifactId&gt;\n    &lt;version&gt;5.3.25&lt;/version&gt;\n&lt;/dependency&gt;\n\n  &lt;/dependencies&gt;\n\n  &lt;build&gt;\n    &lt;pluginManagement&gt;&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;\n      &lt;plugins&gt;\n        &lt;!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle --&gt;\n        &lt;plugin&gt;\n          &lt;artifactId&gt;maven-clean-plugin&lt;/artifactId&gt;\n          &lt;version&gt;3.1.0&lt;/version&gt;\n        &lt;/plugin&gt;\n        &lt;!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging --&gt;\n        &lt;plugin&gt;\n          &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;\n          &lt;version&gt;3.0.2&lt;/version&gt;\n        &lt;/plugin&gt;\n        &lt;plugin&gt;\n          &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\n          &lt;version&gt;3.8.0&lt;/version&gt;\n        &lt;/plugin&gt;\n        &lt;plugin&gt;\n          &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;\n          &lt;version&gt;2.22.1&lt;/version&gt;\n        &lt;/plugin&gt;\n        &lt;plugin&gt;\n          &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;\n          &lt;version&gt;3.0.2&lt;/version&gt;\n        &lt;/plugin&gt;\n        &lt;plugin&gt;\n          &lt;artifactId&gt;maven-install-plugin&lt;/artifactId&gt;\n          &lt;version&gt;2.5.2&lt;/version&gt;\n        &lt;/plugin&gt;\n        &lt;plugin&gt;\n          &lt;artifactId&gt;maven-deploy-plugin&lt;/artifactId&gt;\n          &lt;version&gt;2.8.2&lt;/version&gt;\n        &lt;/plugin&gt;\n        &lt;!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle --&gt;\n        &lt;plugin&gt;\n          &lt;artifactId&gt;maven-site-plugin&lt;/artifactId&gt;\n          &lt;version&gt;3.7.1&lt;/version&gt;\n        &lt;/plugin&gt;\n        &lt;plugin&gt;\n          &lt;artifactId&gt;maven-project-info-reports-plugin&lt;/artifactId&gt;\n          &lt;version&gt;3.0.0&lt;/version&gt;\n        &lt;/plugin&gt;\n      &lt;/plugins&gt;\n    &lt;/pluginManagement&gt;\n  &lt;/build&gt;\n&lt;/project&gt;\n</code></pre>"},{"location":"Spring%20Framework/Spring-Concepts/#java","title":"Java","text":"<p>App_annotation.java<pre><code>package com.psl.spring.a.didemo;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\n\nimport com.psl.spring.a.didemo.entity.Engine;\nimport com.psl.spring.a.didemo.entity.Vehicle;\n\npublic class App_annotation {\n    public static void main( String[] args )\n    {\n     ApplicationContext context= new AnnotationConfigApplicationContext(BeanConfig.class);\n     Engine engine=context.getBean(\"extraEngine\", Engine.class);\n     System.out.println(engine);\n     Engine commonEngine=context.getBean(\"commonEngine\", Engine.class);\n     System.out.println(commonEngine);\n     Vehicle v=context.getBean(\"officePickup\", Vehicle.class);\n     System.out.println(v);\n    }\n}\n</code></pre> App_autowire.java<pre><code>package com.psl.spring.a.didemo;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\n\nimport com.psl.spring.a.didemo.entity.Customer;\n\n\n/**\n * Hello world!\n *\n */\n\npublic class App_autowire \n{\n    public static void main( String[] args )\n    {\n     try (ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"beanconfig_autowire.xml\")) {\n         System.out.println(\"Using ByName\");\n         Customer byName=context.getBean(\"autowireByName\", Customer.class);\n         System.out.println(byName);\n         System.out.println(\"Using ByType\");\n         Customer byType=context.getBean(\"autowireByType\", Customer.class);\n         System.out.println(byType);\n         System.out.println(\"Using Constructor\");\n         Customer byConstructor=context.getBean(\"autowireByConstructor\", Customer.class);\n         System.out.println(byConstructor);\n\n    } catch (BeansException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n\n    }\n}\n</code></pre> App_cnamespace_inj2.java<pre><code>package com.psl.spring.a.didemo;\n\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\nimport com.psl.spring.a.didemo.entity.Engine;\nimport com.psl.spring.a.didemo.entity.Vehicle;\n\n/**\n * Hello world!\n *\n */\npublic class App_cnamespace_inj2 \n{\n    public static void main( String[] args )\n    {\n     ClassPathXmlApplicationContext context= new ClassPathXmlApplicationContext(\"beanconfig_cnamespace_inj.xml\");\n     Engine engine=context.getBean(\"powerEngine\", Engine.class);\n     System.out.println(engine);\n     Engine commonEngine=context.getBean(\"commonEngine\", Engine.class);\n     System.out.println(commonEngine);\n     Vehicle v=context.getBean(\"officePickup\", Vehicle.class);\n     System.out.println(v);\n    }\n}\n</code></pre> App_constr_inj.java<pre><code>package com.psl.spring.a.didemo;\n\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\nimport com.psl.spring.a.didemo.entity.Engine;\nimport com.psl.spring.a.didemo.entity.Vehicle;\n\n/**\n * Hello world!\n *\n */\npublic class App_constr_inj \n{\n    public static void main( String[] args )\n    {\n     ClassPathXmlApplicationContext context= new ClassPathXmlApplicationContext(\"beanconfig_constr_inj.xml\");\n     Engine engine=context.getBean(\"powerEngine\", Engine.class);\n     System.out.println(engine);\n     Engine commonEngine=context.getBean(\"commonEngine\", Engine.class);\n     System.out.println(commonEngine);\n     Vehicle v=context.getBean(\"officePickup\", Vehicle.class);\n     System.out.println(v);\n    }\n}\n</code></pre> App_innerbean_inj.java<pre><code>package com.psl.spring.a.didemo;\n\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\nimport com.psl.spring.a.didemo.entity.Engine;\nimport com.psl.spring.a.didemo.entity.Vehicle;\n\n/**\n * Hello world!\n *\n */\npublic class App_innerbean_inj \n{\n    public static void main( String[] args )\n    {\n     ClassPathXmlApplicationContext context= new ClassPathXmlApplicationContext(\"beanconfig_pnamespace_inj.xml\");\n     Engine engine=context.getBean(\"powerEngine\", Engine.class);\n     System.out.println(engine);\n     Engine commonEngine=context.getBean(\"commonEngine\", Engine.class);\n     System.out.println(commonEngine);\n     Vehicle v=context.getBean(\"officePickup\", Vehicle.class);\n     System.out.println(v);\n    }\n}\n</code></pre> App_lifecycle.java<pre><code>package com.psl.spring.a.didemo;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\n\nimport com.psl.spring.a.didemo.entity.Lookupt;\n\n\n/**\n * Hello world!\n *\n */\n\npublic class App_lifecycle \n{\n    public static void main( String[] args )\n    {\n     try (ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"beanconfig_lifecycle.xml\")) {\n        Lookupt lookup=context.getBean(\"lifeCycle\", Lookupt.class);\n         System.out.println(lookup);\n         //it will not call destroy() until we handle context exception \n    } catch (BeansException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n\n    }\n}\n</code></pre> App_pnamespace_inj.java<pre><code>package com.psl.spring.a.didemo;\n\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\nimport com.psl.spring.a.didemo.entity.Engine;\nimport com.psl.spring.a.didemo.entity.Vehicle;\n\n/**\n * Hello world!\n *\n */\npublic class App_pnamespace_inj \n{\n    public static void main( String[] args )\n    {\n     ClassPathXmlApplicationContext context= new ClassPathXmlApplicationContext(\"beanconfig_pnamespace_inj.xml\");\n     Engine engine=context.getBean(\"powerEngine\", Engine.class);\n     System.out.println(engine);\n     Engine commonEngine=context.getBean(\"commonEngine\", Engine.class);\n     System.out.println(commonEngine);\n     Vehicle v=context.getBean(\"officePickup\", Vehicle.class);\n     System.out.println(v);\n    }\n}\n</code></pre> App_setter_inj.java<pre><code>package com.psl.spring.a.didemo;\n\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\nimport com.psl.spring.a.didemo.entity.Engine;\nimport com.psl.spring.a.didemo.entity.Vehicle;\n\n/**\n * Hello world!\n *\n */\npublic class App_setter_inj \n{\n    public static void main( String[] args )\n    {\n     ClassPathXmlApplicationContext context= new ClassPathXmlApplicationContext(\"beanconfig_setter_inj.xml\");\n     Engine engine=context.getBean(\"powerEngine\", Engine.class);\n     System.out.println(engine);\n     Engine commonEngine=context.getBean(\"commonEngine\", Engine.class);\n     System.out.println(commonEngine);\n     Vehicle v=context.getBean(\"officePickup\", Vehicle.class);\n     System.out.println(v);\n    }\n}\n</code></pre></p>"},{"location":"Spring%20Framework/Spring-Concepts/#entity","title":"Entity","text":"<p>Customer.java<pre><code>package com.psl.spring.a.didemo.entity;\n\npublic class Customer {\nprivate Email officeEmail;\nprivate Email perEmail;\nprivate MobileNumber officeNumber;\npublic Customer() {\n    System.out.println(\"Customer() called\");\n}\npublic Customer(Email officeEmail, MobileNumber officeNumber) {\n    this.officeEmail = officeEmail;\n    this.officeNumber = officeNumber;\n    System.out.println(\"Customer(email,mobile) called\");\n}\npublic Customer(Email perEmail) {\n    this.perEmail = perEmail;\n    System.out.println(\"Customer(email) called\");\n}\npublic Email getOfficeEmail() {\n    return officeEmail;\n}\npublic void setOfficeEmail(Email officeEmail) {\n    this.officeEmail = officeEmail;\n}\npublic Email getPerEmail() {\n    return perEmail;\n}\npublic void setPerEmail(Email perEmail) {\n    this.perEmail = perEmail;\n}\npublic MobileNumber getOfficeNumber() {\n    return officeNumber;\n}\npublic void setOfficeNumber(MobileNumber officeNumber) {\n    this.officeNumber = officeNumber;\n}\n@Override\npublic String toString() {\n    StringBuilder builder = new StringBuilder();\n    builder.append(\"Customer [officeEmail=\");\n    builder.append(officeEmail);\n    builder.append(\", perEmail=\");\n    builder.append(perEmail);\n    builder.append(\", officeNumber=\");\n    builder.append(officeNumber);\n    builder.append(\"]\");\n    return builder.toString();\n}\n\n}\n</code></pre> Email.java<pre><code>package com.psl.spring.a.didemo.entity;\n\npublic class Email {\nprivate String address;\npublic Email() {\n\n}\npublic Email(String address) {\n    this.address = address;\n}\n\npublic String getAddress() {\n    return address;\n}\n\npublic void setAddress(String address) {\n    this.address = address;\n}\npublic void init() {\n    System.out.println(\"init()\");\n}\npublic void destroy() {\n    System.out.println(\"destroy()\");\n}\n}\n</code></pre> Engine.java<pre><code>package com.psl.spring.a.didemo.entity;\n\npublic class Engine {\n    private double power;\n    private int cylinders;\n    public Engine() {\n        // TODO Auto-generated constructor stub\n    }\n    public Engine(double power, int cylinders) {\n        this.power=power;\n        this.cylinders=cylinders;\n    }\n    public double getPower() {\n        return power;\n    }\n    public void setPower(double power) {\n        this.power = power;\n    }\n    public int getCylinders() {\n        return cylinders;\n    }\n    public void setCylinders(int cylinders) {\n        this.cylinders = cylinders;\n    }\n    @Override\n    public String toString() {\n        StringBuilder builder = new StringBuilder();\n        builder.append(\"Engine [power=\");\n        builder.append(power);\n        builder.append(\", cylinders=\");\n        builder.append(cylinders);\n        builder.append(\"]\");\n        return builder.toString();\n    }\n\n\n}\n</code></pre> Lookupt.java<pre><code>package com.psl.spring.a.didemo.entity;\n\npublic class Lookupt {\nprivate String email;\npublic Lookupt() {\n\n}\npublic Lookupt(String email) {\n    this.email = email;\n}\npublic String getEmail() {\n    return email;\n}\npublic void setEmail(String email) {\n    this.email = email;\n}\npublic void init() {\n    System.out.println(\"init()\");\n}\npublic void destroy() throws Exception {\n    System.out.println(\"destroy()\");\n}\npublic void cleanup() {\n    System.out.println(\"cleanup()\");\n}\n@Override\npublic String toString() {\n    StringBuilder builder = new StringBuilder();\n    builder.append(\"Lookupt [email=\");\n    builder.append(email);\n    builder.append(\"]\");\n    return builder.toString();\n}\n\n\n}\n</code></pre> MobileNumber.java<pre><code>package com.psl.spring.a.didemo.entity;\n\npublic class MobileNumber {\nprivate String number;\npublic MobileNumber() {\n\n\n}\npublic String getNumber() {\n    return number;\n}\npublic void setNumber(String number) {\n    this.number = number;\n}\npublic MobileNumber(String number) {\n    this.number = number;\n}\npublic void init() {\n    System.out.println(\"init()\");\n}\npublic void destroy() {\n    System.out.println(\"destroy()\");\n}\n}\n</code></pre> Vehicle.java<pre><code>package com.psl.spring.a.didemo.entity;\nimport org.springframework.beans.factory.annotation.*;\npublic class Vehicle {\n    private String rtoNumber;\n    private int capacity;\n    @Autowired (required =false)\n    private Engine engine; \n    @Autowired (required=false)\n    private Engine extraEngine;\n    public String getRtoNumber() {\n        return rtoNumber;\n    }\n    public void setRtoNumber(String rtoNumber) {\n        this.rtoNumber = rtoNumber;\n    }\n    public int getCapacity() {\n        return capacity;\n    }\n    public void setCapacity(int capacity) {\n        this.capacity = capacity;\n    }\n    public Engine getEngine() {\n        return engine;\n    }\n    public void setEngine(Engine engine) {\n        this.engine = engine;\n    }\n    /**\n     * @param rtoNumber\n     * @param capacity\n     * @param engine\n     */\n    public Vehicle(String rtoNumber, int capacity, Engine engine) {\n        this.rtoNumber = rtoNumber;\n        this.capacity = capacity;\n        this.engine = engine;\n    }\n    public Vehicle() {\n        // TODO Auto-generated constructor stub\n    }\n    @Override\n    public String toString() {\n        StringBuilder builder = new StringBuilder();\n        builder.append(\"Vehicle [rtoNumber=\");\n        builder.append(rtoNumber);\n        builder.append(\", capacity=\");\n        builder.append(capacity);\n        builder.append(\", engine=\");\n        builder.append(engine);\n        builder.append(\"]\");\n        return builder.toString();\n    }\n\n\n}\n</code></pre></p>"},{"location":"Spring%20Framework/Spring-Concepts/#config","title":"Config","text":"BeanConfig.java<pre><code>package com.psl.spring.a.didemo.config;\nimport com.psl.spring.a.didemo.entity.*;\nimport org.springframework.context.annotation.*;\n@Configuration\npublic class BeanConfig {\n    @Bean\n    public Vehicle vehicle() {\n        Vehicle vehicle =new Vehicle();\n        return vehicle;\n    }\n    @Bean(name=\"engine\")\n    public Engine getEngine() {\n        Engine engine =new Engine(77.7,6);\n        return engine;\n    }\n    @Bean(name=\"extraEngine\")\n    public Engine getExtraEngine() {\n        Engine engine =new Engine(55.5,9);\n        return engine;\n    }\n}\n</code></pre>"},{"location":"Spring%20Framework/Spring-Concepts/#resources","title":"Resources","text":"<p>beanconfig_autowire.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxmlns:context=\"http://www.springframework.org/schema/context\"\nxmlns:p=\"http://www.springframework.org/schema/p\"\nxmlns:c=\"http://www.springframework.org/schema/c\"\nxsi:schemaLocation=\"http://www.springframework.org/schema/beans\n http://www.springframework.org/schema/beans/spring-beans.xsd\n http://www.springframework.org/schema/context\n http://www.springframework.org/schema/context/spring-context.xsd\"\n default-init-method=\"init\" default-destroy-method=\"destroy\" default-lazy-init=\"true\"&gt;\n\n\n&lt;bean id=\"officeEmail\" class=\"com.psl.spring.a.didemo.entity.Email\"\np:address=\"rahul@gmail.com\"\n/&gt;\n&lt;bean id=\"officeNumber\" class=\"com.psl.spring.a.didemo.entity.MobileNumber\"\np:number=\"8788582604\"\n/&gt;\n&lt;bean id=\"autowireByName\" class=\"com.psl.spring.a.didemo.entity.Customer\"\nautowire=\"byName\"\n/&gt;\n&lt;bean id=\"autowireByType\" class=\"com.psl.spring.a.didemo.entity.Customer\"\nautowire=\"byType\"\n/&gt;\n&lt;bean id=\"autowireByConstructor\" class=\"com.psl.spring.a.didemo.entity.Customer\"\nautowire=\"constructor\"\n/&gt;\n\n\n\n\n\n&lt;/beans&gt;\n</code></pre> beanconfig_cnamespace_inj.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxmlns:context=\"http://www.springframework.org/schema/context\"\nxmlns:p=\"http://www.springframework.org/schema/p\"\nxmlns:c=\"http://www.springframework.org/schema/c\"\nxsi:schemaLocation=\"http://www.springframework.org/schema/beans\n http://www.springframework.org/schema/beans/spring-beans.xsd\n http://www.springframework.org/schema/context\n http://www.springframework.org/schema/context/spring-context.xsd\"&gt;\n\n&lt;!-- Bean Visible ENGINE BEAN --&gt;\n&lt;bean id=\"commonEngine\" class=\"com.psl.spring.a.didemo.entity.Engine\" c:power=\"72.5\" c:cylinders=\"4\" /&gt;\n&lt;!-- POWER ENGINE BEAN --&gt;\n&lt;bean id=\"powerEngine\" class=\"com.psl.spring.a.didemo.entity.Engine\" c:power=\"92.5\" c:cylinders=\"6\"/&gt;\n&lt;!-- OFFICE PICKUP WITH POWER ENGINE BEAN --&gt;\n&lt;bean id=\"officePickup\" class=\"com.psl.spring.a.didemo.entity.Vehicle\" c:engine-ref=\"powerEngine\" c:rtoNumber=\"MH56 AB 1111\" c:capacity=\"3\"/&gt;\n&lt;/beans&gt;\n</code></pre> beanconfig_constr_inj.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxmlns:aop=\"http://www.springframework.org/schema/aop\"\nxmlns:context=\"http://www.springframework.org/schema/context\"\nxmlns:jee=\"http://www.springframework.org/schema/jee\"\nxsi:schemaLocation=\"http://www.springframework.org/schema/beans \nhttp://www.springframework.org/schema/beans/spring-beans.xsd\n http://www.springframework.org/schema/aop \nhttp://www.springframework.org/schema/aop/spring-aop-4.3.xsd\n http://www.springframework.org/schema/context \nhttp://www.springframework.org/schema/context/spring-context-4.3.xsd\n http://www.springframework.org/schema/jee \nhttp://www.springframework.org/schema/jee/spring-jee-4.3.xsd\"&gt;\n\n&lt;bean id=\"powerEngine\" class=\"com.psl.spring.a.didemo.entity.Engine\"&gt;\n    &lt;constructor-arg name=\"power\" value=\"92.5\"/&gt;\n    &lt;constructor-arg name=\"cylinders\" value=\"4\"/&gt;\n&lt;/bean&gt;\n&lt;bean id=\"commonEngine\" class=\"com.psl.spring.a.didemo.entity.Engine\"&gt;\n    &lt;constructor-arg name=\"power\" value=\"74.5\"/&gt;\n    &lt;constructor-arg name=\"cylinders\" value=\"3\"/&gt;\n&lt;/bean&gt;\n&lt;bean id=\"officePickup\" class=\"com.psl.spring.a.didemo.entity.Vehicle\"&gt;\n    &lt;constructor-arg ref=\"powerEngine\"/&gt;\n    &lt;constructor-arg name=\"rtoNumber\" value=\"GA05V3259\"/&gt;\n    &lt;constructor-arg name=\"capacity\" value=\"6\"&gt;&lt;/constructor-arg&gt;\n\n&lt;/bean&gt;\n&lt;bean id=\"commonPickup\" class=\"com.psl.spring.a.didemo.entity.Vehicle\"&gt;\n    &lt;constructor-arg ref=\"commonEngine\"/&gt;\n    &lt;constructor-arg name=\"rtoNumber\" value=\"GA05V6426\"/&gt;\n    &lt;constructor-arg name=\"capacity\" value=\"5\"&gt;&lt;/constructor-arg&gt;\n\n&lt;/bean&gt;\n\n\n\n\n&lt;/beans&gt;\n</code></pre> beanconfig_innerbean_inj.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxmlns:aop=\"http://www.springframework.org/schema/aop\"\nxmlns:context=\"http://www.springframework.org/schema/context\"\nxmlns:jee=\"http://www.springframework.org/schema/jee\"\nxsi:schemaLocation=\"http://www.springframework.org/schema/beans \nhttp://www.springframework.org/schema/beans/spring-beans.xsd\n http://www.springframework.org/schema/aop \nhttp://www.springframework.org/schema/aop/spring-aop-4.3.xsd\n http://www.springframework.org/schema/context \nhttp://www.springframework.org/schema/context/spring-context-4.3.xsd\n http://www.springframework.org/schema/jee \nhttp://www.springframework.org/schema/jee/spring-jee-4.3.xsd\"&gt;\n&lt;!-- COMMON ENGINE BEAN --&gt;\n&lt;bean id=\"commonEngine\" class=\"com.psl.spring.a.didemo.entity.Engine\"&gt;\n &lt;property name=\"power\" value=\"72.5\" /&gt;\n &lt;property name=\"cylinders\" value=\"4\" /&gt;\n&lt;/bean&gt;\n&lt;!-- POWER ENGINE BEAN --&gt;\n&lt;bean id=\"powerEngine\" class=\"com.psl.spring.a.didemo.entity.Engine\"&gt;\n &lt;property name=\"power\" value=\"92.5\" /&gt;\n &lt;property name=\"cylinders\" value=\"6\" /&gt;\n&lt;/bean&gt;\n&lt;!-- OFFICE PICKUP WITH POWER ENGINE BEAN --&gt;\n&lt;bean id=\"officePickup\" class=\"com.psl.spring.a.didemo.entity.Vehicle\"&gt;\n &lt;!-- PROPERTY DEFINED BY ATTRIBUTES --&gt;\n &lt;property name=\"engine\"&gt;\n     &lt;bean id=\"economyEngine\" class=\"com.psl.spring.a.didemo.entity.Engine\"&gt;\n &lt;property name=\"power\" value=\"32.5\" /&gt;\n &lt;property name=\"cylinders\" value=\"3\" /&gt;\n&lt;/bean&gt;\n &lt;/property&gt;\n &lt;!-- PROPERTY DEFINED BY VALUE TAG --&gt;\n &lt;property name=\"rtoNumber\"&gt;\n &lt;value&gt;MH56 AB 1111\"&lt;/value&gt;\n &lt;/property&gt;\n &lt;property name=\"capacity\" value=\"12\" /&gt;\n&lt;/bean&gt;\n&lt;!-- COMMON PICKUP WITH COMMON ENGINE BEAN --&gt;\n&lt;bean id=\"commonPickup\" class=\"com.psl.spring.a.didemo.entity.Vehicle\"&gt;\n &lt;property name = \"engine\" ref=\"commonEngine\" /&gt;\n &lt;property name=\"rtoNumber\" value=\"MH56 AB 2222\" /&gt;\n &lt;property name=\"capacity\" value=\"6\"&gt;&lt;/property&gt;\n&lt;/bean&gt;\n&lt;/beans&gt;\n</code></pre> beanconfig_lifecycle.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxmlns:context=\"http://www.springframework.org/schema/context\"\nxmlns:p=\"http://www.springframework.org/schema/p\"\nxmlns:c=\"http://www.springframework.org/schema/c\"\nxsi:schemaLocation=\"http://www.springframework.org/schema/beans\n http://www.springframework.org/schema/beans/spring-beans.xsd\n http://www.springframework.org/schema/context\n http://www.springframework.org/schema/context/spring-context.xsd\"\n default-init-method=\"init\" default-destroy-method=\"destroy\"&gt;\n\n\n&lt;bean id=\"lifeCycle\" class=\"com.psl.spring.a.didemo.entity.Lookupt\"\np:email=\"rahul@gmail.com\"\ndestroy-method=\"cleanup\"/&gt;\n\n\n\n\n&lt;/beans&gt;\n</code></pre> beanconfig_pnamespace_inj.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxmlns:context=\"http://www.springframework.org/schema/context\"\nxmlns:p=\"http://www.springframework.org/schema/p\"\nxmlns:c=\"http://www.springframework.org/schema/c\"\nxsi:schemaLocation=\"http://www.springframework.org/schema/beans\n http://www.springframework.org/schema/beans/spring-beans.xsd\n http://www.springframework.org/schema/context\n http://www.springframework.org/schema/context/spring-context.xsd\"&gt;\n\n&lt;!-- Bean Visible ENGINE BEAN --&gt;\n&lt;bean id=\"commonEngine\" class=\"com.psl.spring.a.didemo.entity.Engine\" p:power=\"72.5\" p:cylinders=\"4\" /&gt;\n&lt;!-- POWER ENGINE BEAN --&gt;\n&lt;bean id=\"powerEngine\" class=\"com.psl.spring.a.didemo.entity.Engine\" p:power=\"92.5\" p:cylinders=\"6\"/&gt;\n&lt;!-- OFFICE PICKUP WITH POWER ENGINE BEAN --&gt;\n&lt;bean id=\"officePickup\" class=\"com.psl.spring.a.didemo.entity.Vehicle\" p:engine-ref=\"powerEngine\" p:rtoNumber=\"MH56 AB 1111\" p:capacity=\"3\"/&gt;\n&lt;/beans&gt;\n</code></pre> beanconfig_setter_inj.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxmlns:aop=\"http://www.springframework.org/schema/aop\"\nxmlns:context=\"http://www.springframework.org/schema/context\"\nxmlns:jee=\"http://www.springframework.org/schema/jee\"\nxsi:schemaLocation=\"http://www.springframework.org/schema/beans \nhttp://www.springframework.org/schema/beans/spring-beans.xsd\n http://www.springframework.org/schema/aop \nhttp://www.springframework.org/schema/aop/spring-aop-4.3.xsd\n http://www.springframework.org/schema/context \nhttp://www.springframework.org/schema/context/spring-context-4.3.xsd\n http://www.springframework.org/schema/jee \nhttp://www.springframework.org/schema/jee/spring-jee-4.3.xsd\"&gt;\n&lt;!-- Bean Visible ENGINE BEAN --&gt;\n&lt;bean id=\"commonEngine\" class=\"com.psl.spring.a.didemo.entity.Engine\"&gt;\n &lt;property name=\"power\" value=\"72.5\" /&gt;\n &lt;property name=\"cylinders\" value=\"4\" /&gt;\n&lt;/bean&gt;\n&lt;!-- POWER ENGINE BEAN --&gt;\n&lt;bean id=\"powerEngine\" class=\"com.psl.spring.a.didemo.entity.Engine\"&gt;\n &lt;property name=\"power\" value=\"92.5\" /&gt;\n &lt;property name=\"cylinders\" value=\"6\" /&gt;\n&lt;/bean&gt;\n&lt;!-- OFFICE PICKUP WITH POWER ENGINE BEAN --&gt;\n&lt;bean id=\"officePickup\" class=\"com.psl.spring.a.didemo.entity.Vehicle\"&gt;\n &lt;!-- PROPERTY DEFINED BY ATTRIBUTES --&gt;\n &lt;property name=\"engine\"&gt;\n     &lt;bean id=\"economyEngine\" class=\"com.psl.spring.a.didemo.entity.Engine\"&gt;\n &lt;property name=\"power\" value=\"32.5\" /&gt;\n &lt;property name=\"cylinders\" value=\"3\" /&gt;\n&lt;/bean&gt;\n &lt;/property&gt;\n &lt;!-- PROPERTY DEFINED BY VALUE TAG --&gt;\n &lt;property name=\"rtoNumber\"&gt;\n &lt;value&gt;MH56 AB 1111\"&lt;/value&gt;\n &lt;/property&gt;\n &lt;property name=\"capacity\" value=\"12\" /&gt;\n&lt;/bean&gt;\n&lt;!-- COMMON PICKUP WITH COMMON ENGINE BEAN --&gt;\n&lt;bean id=\"commonPickup\" class=\"com.psl.spring.a.didemo.entity.Vehicle\"&gt;\n &lt;property name = \"engine\" ref=\"commonEngine\" /&gt;\n &lt;property name=\"rtoNumber\" value=\"MH56 AB 2222\" /&gt;\n &lt;property name=\"capacity\" value=\"6\"&gt;&lt;/property&gt;\n&lt;/bean&gt;\n&lt;/beans&gt;\n</code></pre></p>"},{"location":"Spring%20Framework/jdbc/","title":"JDBC","text":"<p>pom.xml<pre><code>&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n    &lt;groupId&gt;com.psl&lt;/groupId&gt;\n    &lt;artifactId&gt;jdbc&lt;/artifactId&gt;\n    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;\n    &lt;packaging&gt;jar&lt;/packaging&gt;\n\n    &lt;name&gt;com.psl&lt;/name&gt;\n    &lt;url&gt;http://maven.apache.org&lt;/url&gt;\n\n    &lt;properties&gt;\n        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;\n    &lt;/properties&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;junit&lt;/groupId&gt;\n            &lt;artifactId&gt;junit&lt;/artifactId&gt;\n            &lt;version&gt;3.8.1&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-core --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-core&lt;/artifactId&gt;\n            &lt;version&gt;5.3.25&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;!--\n        https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;\n            &lt;version&gt;5.3.25&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;javax.annotation&lt;/groupId&gt;\n            &lt;artifactId&gt;javax.annotation-api&lt;/artifactId&gt;\n            &lt;version&gt;1.3.2&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;\n            &lt;version&gt;5.3.25&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;\n        &lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;mysql&lt;/groupId&gt;\n            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n            &lt;version&gt;8.0.28&lt;/version&gt;\n        &lt;/dependency&gt;\n\n\n    &lt;/dependencies&gt;\n&lt;/project&gt;\n</code></pre> Config.java<pre><code>package com.springjdbc;\n\nimport javax.sql.DataSource;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.datasource.DriverManagerDataSource;\n\nimport com.springjdbc.dao.StudentDao;\nimport com.springjdbc.dao.StudentDaoImpl;\n\n@Configuration\nclass Config {\n    @Bean(\"ds\")\n    public DataSource getDataSource() {\n         DriverManagerDataSource ds=new DriverManagerDataSource();\n         ds.setDriverClassName(\"com.mysql.jdbc.Driver\");\n         ds.setUrl(\"jdbc:mysql://localhost:3306/jdbc\");\n         ds.setUsername(\"root\");\n         ds.setPassword(\"root\");\n    return ds;\n    }\n    @Bean(\"template\")\n    public JdbcTemplate getTemplate() {\n        return new JdbcTemplate(getDataSource());\n    }\n    @Bean(\"studentDao\")\n    public StudentDao getStudentDao() {\n        StudentDaoImpl sdi=new StudentDaoImpl();\n        sdi.setTemplate(getTemplate());\n        return sdi;\n    }\n\n\n}\n</code></pre> App.java<pre><code>package com.springjdbc;\nimport java.util.List;\nimport java.util.Scanner;\n\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\nimport com.springjdbc.dao.StudentDao;\nimport com.springjdbc.entities.Student;\n\n/**\n * Hello world!\n *\n */\npublic class App {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in).useDelimiter(\"\\\\s*[\\\\n]\\\\s*\");\n        /*\n         * ClassPathXmlApplicationContext context = new\n         * ClassPathXmlApplicationContext(\"Config.xml\");\n         */\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(Config.class);\n        StudentDao studentDao = context.getBean(\"studentDao\", StudentDao.class);\n\n        boolean flag = true;\n        while (true) {\n            System.out.println(\"Student Data Database\");\n            System.out.println(\"1. Insert student data in database\");\n            System.out.println(\"2. Delete student data in database\");\n            System.out.println(\"3. Update student data in database\");\n            System.out.println(\"4. Display student data in database by studentId\");\n            System.out.println(\"5. Display all student data in database\");\n            System.out.println(\"6. Exit\");\n            System.out.print(\"Enter your choice: \");\n            int choice = input.nextInt();\n            switch (choice) {\n            case 1:\n                Student studentInsert = new Student();\n                System.out.print(\"\\nEnter student's Id: \");\n                int idInsert = input.nextInt();\n                studentInsert.setId(idInsert);\n                System.out.print(\"\\nEnter student's name: \");\n                String nameInsert = input.next();\n                studentInsert.setName(nameInsert);\n                System.out.print(\"\\nEnter student's city: \");\n                String cityInsert = input.next();\n                studentInsert.setCity(cityInsert);\n                int rInsert = studentDao.insert(studentInsert);\n                System.out.println(\"\\nData inserted succesfully \" + rInsert);\n                break;\n            case 2:\n                System.out.print(\"\\nEnter student's Id: \");\n                int idDelete = input.nextInt();\n                int rDelete = studentDao.delete(idDelete);\n                System.out.println(\"\\nData deleted succesfully \" + rDelete);\n                break;\n            case 3:\n                Student studentUpdate = new Student();\n                System.out.print(\"\\nEnter student's Id: \");\n                int idUpdate = input.nextInt();\n                studentUpdate.setId(idUpdate);\n                System.out.print(\"\\nEnter student's name: \");\n                String nameUpdate = input.next();\n                studentUpdate.setName(nameUpdate);\n                System.out.print(\"\\nEnter student's city: \");\n                String cityUpdate = input.next();\n                studentUpdate.setCity(cityUpdate);\n                int rUpdate = studentDao.update(studentUpdate);\n                System.out.println(\"\\nData Updated succesfully \" + rUpdate);\n                break;\n            case 4:\n                System.out.print(\"\\nEnter student's Id: \");\n                int idSelect = input.nextInt();\n                Student studentSelect = studentDao.selectId(idSelect);\n                System.out.println(studentSelect);\n                break;\n            case 5:\n                List&lt;Student&gt; studentSelectall = studentDao.selectall();\n                for (Student stud : studentSelectall) {\n                    System.out.println(stud);\n                }\n                break;\n            case 6:\n                flag = true;\n                break;\n            default:\n                System.out.println(\"Invalid choie. Please enter the correct choice!\");\n                break;\n\n            }\n//          if (flag==true) {\n//              break;\n//          }\n\n        }\n\n        //System.out.println(\"Thank you for using our software!\");\n        /*\n         * studentDao.update(student.getId()); studentDao.selectId(student.getId());\n         * studentDao.selectall();\n         */\n    }\n}\n</code></pre></p>"},{"location":"Spring%20Framework/jdbc/#configuration","title":"Configuration","text":"Config.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:context=\"http://www.springframework.org/schema/context\"\n    xmlns:p=\"http://www.springframework.org/schema/p\"\n    xmlns:util=\"http://www.springframework.org/schema/util\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n    http://www.springframework.org/schema/beans/spring-beans.xsd\n    http://www.springframework.org/schema/context\n    http://www.springframework.org/schema/context/spring-context.xsd\n    http://www.springframework.org/schema/tx\n    http://www.springframework.org/schema/tx/spring-tx.xsd\n    http://www.springframework.org/schema/util\n    http://www.springframework.org/schema/util/spring-util.xsd\n    \"&gt;\n    &lt;bean class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\" id=\"ds\"&gt;\n        &lt;property name=\"driverClassName\" value=\"com.mysql.jdbc.Driver\"/&gt;\n        &lt;property name=\"url\" value=\"jdbc:mysql://localhost:3306/jdbc\"/&gt;\n        &lt;property name=\"username\" value=\"root\"/&gt;\n        &lt;property name=\"password\" value=\"root\"/&gt;\n    &lt;/bean&gt;\n    &lt;bean class=\"org.springframework.jdbc.core.JdbcTemplate\" name=\"jdbc\"&gt;\n        &lt;property name=\"dataSource\" ref=\"ds\"/&gt;\n    &lt;/bean&gt;\n    &lt;bean class=\"com.springjdbc.dao.StudentDaoImpl\" id=\"studentDao\"&gt;\n        &lt;property name=\"template\" ref=\"jdbc\"/&gt;\n    &lt;/bean&gt;\n\n &lt;/beans&gt;\n</code></pre>"},{"location":"Spring%20Framework/jdbc/#dao","title":"DAO","text":"<p>StudentDao.java<pre><code>package com.springjdbc.dao;\n\nimport java.util.List;\n\nimport com.springjdbc.entities.Student;\n\npublic interface StudentDao {\npublic int insert(Student student);\npublic int update(Student student);\npublic int delete(int id);\npublic Student selectId(int id);\npublic List&lt;Student&gt; selectall();\n}\n</code></pre> StudentDaoImpl.java<pre><code>package com.springjdbc.dao;\n\nimport com.springjdbc.entities.Student;\nimport com.springjdbc.dao.RowMapperImpl;\n\nimport java.util.List;\n\nimport org.springframework.jdbc.core.JdbcTemplate;\n\npublic class StudentDaoImpl implements StudentDao {\n\n    JdbcTemplate template;\n    public JdbcTemplate getTemplate() {\n        return template;\n    }\n\n    public void setTemplate(JdbcTemplate template) {\n        this.template = template;\n    }\n\n    public int insert(Student student) {\n        // TODO Auto-generated method stub\n        String query=\"insert into student values(?,?,?)\";\n        return this.template.update(query,student.getId(),student.getName(),student.getCity());\n\n    }\n\n    public int delete(int id) {\n\n        String query=\"delete from student where Id=?\";\n        return this.template.update(query,id);\n    }\n\n    public int update(Student student) {\n        String query=\"update student set name=? ,city=? where Id=?\";\n        return this.template.update(query,student.getName(),student.getCity(),student.getId());\n    }\n\n    public Student selectId(int id) {\n        String query=\"select * from student where Id=?\";\n        return this.template.queryForObject(query, new RowMapperImpl(),id);\n    }\n\n    public List&lt;Student&gt; selectall() {\n        String query=\"select * from student\";\n        return this.template.query(query, new RowMapperImpl());\n    }\n\n}\n</code></pre> RowMapperImpl.java<pre><code>package com.springjdbc.dao;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport com.springjdbc.entities.Student;\nimport org.springframework.jdbc.core.RowMapper;\npublic class RowMapperImpl implements RowMapper {\n\n    public Student mapRow(ResultSet rs, int rowNum) throws SQLException {\n        // TODO Auto-generated method stub\n        Student student=new Student();\n        student.setId(rs.getInt(1));\n        student.setName(rs.getString(2));\n        student.setCity(rs.getString(3));\n        return student;\n    }\n\n}\n</code></pre></p>"},{"location":"Spring%20Framework/jdbc/#entities","title":"Entities","text":"Student.java<pre><code>package com.springjdbc.entities;\n\npublic class Student {\n private int Id;\n private String name;\n private String city;\npublic Student() {\n    super();\n    // TODO Auto-generated constructor stub\n}\npublic Student(int id, String name, String city) {\n    super();\n    Id = id;\n    this.name = name;\n    this.city = city;\n}\npublic int getId() {\n    return Id;\n}\npublic void setId(int id) {\n    Id = id;\n}\npublic String getName() {\n    return name;\n}\npublic void setName(String name) {\n    this.name = name;\n}\npublic String getCity() {\n    return city;\n}\npublic void setCity(String city) {\n    this.city = city;\n}\n@Override\npublic String toString() {\n    StringBuilder builder = new StringBuilder();\n    builder.append(\"Student [Id=\");\n    builder.append(Id);\n    builder.append(\", name=\");\n    builder.append(name);\n    builder.append(\", city=\");\n    builder.append(city);\n    builder.append(\"]\");\n    return builder.toString();\n}\n\n}\n</code></pre>"},{"location":"Spring%20Framework/mvc-form/","title":"Spring MVC - Form","text":"pom.xml<pre><code>&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;groupId&gt;com.psl&lt;/groupId&gt;\n    &lt;artifactId&gt;mvcform&lt;/artifactId&gt;\n    &lt;packaging&gt;war&lt;/packaging&gt;\n    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;\n    &lt;name&gt;mvcform Maven Webapp&lt;/name&gt;\n    &lt;url&gt;http://maven.apache.org&lt;/url&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;junit&lt;/groupId&gt;\n            &lt;artifactId&gt;junit&lt;/artifactId&gt;\n            &lt;version&gt;3.8.1&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;\n            &lt;version&gt;5.3.25&lt;/version&gt;\n        &lt;/dependency&gt; \n        &lt;dependency&gt;\n            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;\n            &lt;artifactId&gt;jstl&lt;/artifactId&gt;\n            &lt;version&gt;1.2&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;/dependencies&gt;\n    &lt;build&gt;\n        &lt;finalName&gt;mvcform&lt;/finalName&gt;\n    &lt;/build&gt;\n&lt;/project&gt;\n</code></pre>"},{"location":"Spring%20Framework/mvc-form/#java","title":"Java","text":"<p>App.java<pre><code>package com.psl;\n\npublic class App {\n\n}\n</code></pre> FormController.java<pre><code>package com.psl.controller;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\n\nimport com.psl.model.Student;\n@Controller\npublic class FormController {\n    @RequestMapping(path = \"/form\", method = RequestMethod.GET) \n    public String addStudent() {\n        System.out.println(\"form called\");\n        return \"form\";\n    }\n    @RequestMapping(path = \"/data\", method = RequestMethod.POST) \n    public String displayStudent(@ModelAttribute(\"student\") Student student, Model model) {\n        System.out.println(\"display data called\" +student);\n        return \"data\";\n    }\n    @RequestMapping(\"/student\") \n    public String student() {\n        System.out.println(\"display data called\");\n        return \"student\";\n    }\n}\n</code></pre></p> Student.java<pre><code>package com.psl.model;\n\npublic class Student {\nprivate String name;\nprivate String email;\nprivate String password;\npublic Student() {\n    super();\n    // TODO Auto-generated constructor stub\n}\npublic Student(String name, String email, String password) {\n    this.name = name;\n    this.email = email;\n    this.password = password;\n}\npublic String getName() {\n    return name;\n}\npublic void setName(String name) {\n    this.name = name;\n}\npublic String getEmail() {\n    return email;\n}\npublic void setEmail(String email) {\n    this.email = email;\n}\npublic String getPassword() {\n    return password;\n}\npublic void setPassword(String password) {\n    this.password = password;\n}\n@Override\npublic String toString() {\n    StringBuilder builder = new StringBuilder();\n    builder.append(\"Student [name=\");\n    builder.append(name);\n    builder.append(\", email=\");\n    builder.append(email);\n    builder.append(\", password=\");\n    builder.append(password);\n    builder.append(\"]\");\n    return builder.toString();\n}\n}\n</code></pre>"},{"location":"Spring%20Framework/mvc-form/#webapp","title":"WebApp","text":"index.jsp<pre><code>&lt;html&gt;\n&lt;body&gt;\n&lt;h2&gt;Hello World!&lt;/h2&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"Spring%20Framework/mvc-form/#web-inf","title":"WEB-INF","text":"<p>form-servlet.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:context=\"http://www.springframework.org/schema/context\"\n    xmlns:p=\"http://www.springframework.org/schema/p\"\n    xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n    xmlns:c=\"http://www.springframework.org/schema/c\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n http://www.springframework.org/schema/beans/spring-beans.xsd\n http://www.springframework.org/schema/context\n http://www.springframework.org/schema/context/spring-context.xsd\n http://www.springframework.org/schema/mvc\n http://www.springframework.org/schema/mvc/spring-mvc.xsd\"\n    default-init-method=\"init\" default-destroy-method=\"destroy\"\n    default-lazy-init=\"true\"&gt;\n    &lt;context:component-scan\n        base-package=\"com.psl.controller\" /&gt;\n    &lt;mvc:resources location=\"/WEB-INF/resources/\" mapping=\"/resources/**\"/&gt;\n    &lt;bean\n        class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"\n        id=\"viewResolver\"&gt;\n        &lt;property name=\"prefix\" value=\"/WEB-INF/views/\"&gt;&lt;/property&gt;\n        &lt;property name=\"suffix\" value=\".jsp\"&gt;&lt;/property&gt;\n\n    &lt;/bean&gt;\n\n\n\n&lt;/beans&gt;\n</code></pre> web.xml<pre><code>&lt;!DOCTYPE web-app PUBLIC\n \"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\"\n \"http://java.sun.com/dtd/web-app_2_3.dtd\" &gt;\n\n&lt;web-app&gt;\n  &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;\n  &lt;servlet&gt;\n      &lt;servlet-name&gt;form&lt;/servlet-name&gt;\n      &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;\n\n  &lt;/servlet&gt;\n  &lt;servlet-mapping&gt;\n      &lt;servlet-name&gt;form&lt;/servlet-name&gt;\n      &lt;url-pattern&gt;/&lt;/url-pattern&gt;\n  &lt;/servlet-mapping&gt;\n&lt;/web-app&gt;\n</code></pre></p>"},{"location":"Spring%20Framework/mvc-form/#viewsbook","title":"views\\book","text":"<p>data.jsp<pre><code>&lt;%@ page language=\"java\" contentType=\"text/html; charset=ISO-8859-1\"\n    pageEncoding=\"ISO-8859-1\"%&gt;\n&lt;%@ page isELignored=\"false\"  %&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=\"ISO-8859-1\"&gt;\n&lt;title&gt;Insert title here&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n &lt;h1&gt;this is ${student.name}  &lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> form.jsp<pre><code>&lt;%@ page language=\"java\" contentType=\"text/html; charset=ISO-8859-1\"\n    pageEncoding=\"ISO-8859-1\"%&gt;\n&lt;%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\"%&gt;\n&lt;%@ taglib prefix=\"form\" uri=\"http://www.springframework.org/tags/form\"%&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=\"ISO-8859-1\"&gt;\n&lt;title&gt;Student Registration Form&lt;/title&gt;\n&lt;link rel=\"stylesheet\"\n    href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\"\n    integrity=\"sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO\"\n    crossorigin=\"anonymous\"&gt;\n&lt;link href=\"&lt;c:url value=\"/resources/css/register.css\"/&gt;\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"d-flex align-items-center light-blue-gradient\"\n        style=\"height: 100vh;\"&gt;\n        &lt;div class=\"container\"&gt;\n            &lt;div class=\"d-flex justify-content-center\"&gt;\n                &lt;div class=\"col-md-6\"&gt;\n                    &lt;div class=\"card rounded-0 shadow\"&gt;\n                        &lt;div class=\"card-body\"&gt;\n                            &lt;h3&gt;Student Registration Form&lt;/h3&gt;\n                            &lt;form action=\"data\" method=\"post\"&gt;\n                                &lt;div class=\"form-group\"&gt;\n                                    &lt;label for=\"exampleInputEmail1\"&gt;Enter Student's Name&lt;/label&gt; &lt;input\n                                        name=\"name\" type=\"text\" class=\"form-control\"\n                                        id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\"\n                                        placeholder=\"Enter full name\"&gt;\n                                &lt;/div&gt;\n                                &lt;div class=\"form-group\"&gt;\n                                    &lt;label for=\"exampleInputEmail1\"&gt;Email address:&lt;/label&gt; &lt;input\n                                        name=\"email \" type=\"email\" class=\"form-control\"\n                                        id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\"\n                                        placeholder=\"Enter email\"&gt; &lt;small id=\"emailHelp\"\n                                        class=\"form-text text-muted\"&gt;We'll never share your\n                                        email with anyone else.&lt;/small&gt;\n                                &lt;/div&gt;\n\n                                &lt;div class=\"form-group\"&gt;\n                                    &lt;label for=\"exampleInputPassword1\"&gt;Password: &lt;/label&gt; &lt;input\n                                        type=\"password\" class=\"form-control\"\n                                        id=\"exampleInputPassword1\" placeholder=\"Password\"&gt;\n                                &lt;/div&gt;\n\n\n                                &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Submit&lt;/button&gt;\n                            &lt;/form&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n\n        &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> student.jsp<pre><code>&lt;%@ page language=\"java\" contentType=\"text/html; charset=ISO-8859-1\"\n    pageEncoding=\"ISO-8859-1\"%&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=\"ISO-8859-1\"&gt;\n&lt;title&gt;Insert title here&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;hi Rahul here &lt;/h1&gt; \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p>"},{"location":"Spring%20Framework/mvc/","title":"Spring MVC","text":"pom.xml<pre><code>&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"&gt;\n  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n  &lt;groupId&gt;com.psl&lt;/groupId&gt;\n  &lt;artifactId&gt;mvc&lt;/artifactId&gt;\n  &lt;packaging&gt;war&lt;/packaging&gt;\n  &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;\n  &lt;name&gt;mvc Maven Webapp&lt;/name&gt;\n  &lt;url&gt;http://maven.apache.org&lt;/url&gt;\n  &lt;dependencies&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;junit&lt;/groupId&gt;\n      &lt;artifactId&gt;junit&lt;/artifactId&gt;\n      &lt;version&gt;3.8.1&lt;/version&gt;\n      &lt;scope&gt;test&lt;/scope&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt; \n        &lt;groupId&gt;org.springframework&lt;/groupId&gt; \n        &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt; \n        &lt;version&gt;5.3.25&lt;/version&gt; \n    &lt;/dependency&gt; \n    &lt;dependency&gt; \n        &lt;groupId&gt;javax.servlet&lt;/groupId&gt; \n        &lt;artifactId&gt;jstl&lt;/artifactId&gt; \n        &lt;version&gt;1.2&lt;/version&gt; \n    &lt;/dependency&gt; \n  &lt;/dependencies&gt;\n  &lt;build&gt;\n    &lt;finalName&gt;mvc&lt;/finalName&gt;\n  &lt;/build&gt;\n&lt;/project&gt;\n</code></pre>"},{"location":"Spring%20Framework/mvc/#java","title":"Java","text":"<p>App.java<pre><code>package com.psl;\n\npublic class App {\n\n}\n</code></pre> BookController.java<pre><code>package com.psl.controller.book;\n\nimport java.util.Collection; \nimport org.springframework.beans.factory.annotation.Autowired; \nimport org.springframework.context.ApplicationContext; \nimport org.springframework.stereotype.Controller; \nimport org.springframework.web.bind.annotation.RequestMapping; \nimport org.springframework.web.bind.annotation.RequestMethod; \nimport org.springframework.web.bind.annotation.RequestParam; \nimport org.springframework.web.servlet.ModelAndView; \nimport com.psl.dao.book.BookRepository; \nimport com.psl.model.book.Book; \n@Controller\npublic class BookController { \n@Autowired\nprivate ApplicationContext appContext; \n@RequestMapping(value = \"books\", method = RequestMethod.GET) \npublic ModelAndView allBooks() { \n ModelAndView mav = new ModelAndView(); \n BookRepository bookRepo = \n appContext.getBean(\"bookRepo\", BookRepository.class); \n Collection&lt;Book&gt; allBooks = bookRepo.getRepository().values(); \n mav.addObject(\"books\", allBooks); \n mav.setViewName(\"books\"); \n return mav; \n } \n@RequestMapping(value = \"addbook\", method = RequestMethod.POST) \npublic ModelAndView allBooks( \n @RequestParam(\"accessionNumber\") String accNo, \n @RequestParam(\"title\") String title, \n @RequestParam(\"price\") double price) { \n ModelAndView mav = new ModelAndView(); \n Book book = new Book(accNo, title, price); \n BookRepository bookRepo = \n appContext.getBean(\"bookRepo\", BookRepository.class); \n bookRepo.getRepository().put(accNo, book); \n mav.addObject(\"book\", book); \n mav.setViewName(\"booksadded\"); \n return mav; \n } \n}\n</code></pre> BookRepository.java<pre><code>package com.psl.dao.book;\nimport java.util.HashMap; \nimport java.util.Map; \nimport java.util.Map.Entry; \nimport org.springframework.stereotype.Component; \nimport com.psl.model.book.Book; \n@Component\npublic class BookRepository { \n\nprivate Map&lt;String, Book&gt; repository = new HashMap&lt;String, Book&gt;(); \npublic BookRepository() { \n repository.put(\"333\",new Book(\"333\",\"1984\", 456.78 )); \n repository.put(\"222\",new Book(\"222\",\"Lila\", 123.45 )); \n repository.put(\"111\",new Book(\"111\",\"Animal Farm\", 234.56 )); \n } \npublic Map&lt;String, Book&gt; getRepository() { \n return repository; \n } \npublic void setRepository(Map&lt;String, Book&gt; repository) { \n this.repository = repository; \n } \n@Override\npublic String toString() { \n StringBuilder builder = new StringBuilder(); \n builder.append(\"BookRepository [\"); \n for (Entry&lt;String, Book&gt; entry : repository.entrySet()) { \n builder.append(\"(\"); \n builder.append(entry.getValue()); \n builder.append(\")\"); \n } \n builder.append(\"]\"); \n return builder.toString(); \n } \n\n\n}\n</code></pre> Book.java<pre><code>package com.psl.model.book;\n\npublic class Book {\n    private String title;\n    private String accessionNumber;\n    private double price;\n    public String getTitle() {\n        return title;\n    }\n\n    public void setTitle(String title) {\n        this.title = title;\n    }\n\n    public String getAccessionNumber() {\n        return accessionNumber;\n    }\n\n    public void setAccessionNumber(String accessionNumber) {\n        this.accessionNumber = accessionNumber;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n\n    public void setPrice(double price) {\n        this.price = price;\n    }\n\n\n\n    public Book() {\n    }\n\n    public Book(String accessionNumber, String title, double price) {\n        super();\n        this.accessionNumber = accessionNumber;\n        this.title = title;\n        this.price = price;\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder builder = new StringBuilder();\n        builder.append(\"Book [title=\");\n        builder.append(title);\n        builder.append(\", accessionNumber=\");\n        builder.append(accessionNumber);\n        builder.append(\", price=\");\n        builder.append(price);\n        builder.append(\"]\");\n        return builder.toString();\n    }\n}\n</code></pre></p>"},{"location":"Spring%20Framework/mvc/#webapp","title":"WebApp","text":"index.jsp<pre><code>&lt;html&gt;\n&lt;body&gt;\n&lt;h2&gt;Hello World!&lt;/h2&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"Spring%20Framework/mvc/#web-inf","title":"WEB-INF","text":"<p>dispatcher-servlet.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:context=\"http://www.springframework.org/schema/context\"\n    xmlns:p=\"http://www.springframework.org/schema/p\"\n    xmlns:c=\"http://www.springframework.org/schema/c\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n http://www.springframework.org/schema/beans/spring-beans.xsd\n http://www.springframework.org/schema/context\n http://www.springframework.org/schema/context/spring-context.xsd\"\n    default-init-method=\"init\" default-destroy-method=\"destroy\"\n    default-lazy-init=\"true\"&gt;\n    &lt;context:component-scan\n        base-package=\"com.psl.controller.book\" /&gt;\n    &lt;bean\n        class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"\n        id=\"viewResolver\"&gt;\n        &lt;property name=\"prefix\" value=\"/WEB-INF/views/book/\"&gt;&lt;/property&gt;\n        &lt;property name=\"suffix\" value=\".jsp\"&gt;&lt;/property&gt;\n\n    &lt;/bean&gt;\n    &lt;bean name=\"bookRepo\"\n        class=\"com.psl.dao.book.BookRepository\" /&gt;\n\n\n&lt;/beans&gt;\n</code></pre> web.xml<pre><code>&lt;!DOCTYPE web-app PUBLIC\n \"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\"\n \"http://java.sun.com/dtd/web-app_2_3.dtd\" &gt;\n\n&lt;web-app&gt;\n  &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;\n  &lt;servlet&gt;\n      &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt;\n      &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;\n\n  &lt;/servlet&gt;\n  &lt;servlet-mapping&gt;\n      &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt;\n      &lt;url-pattern&gt;/&lt;/url-pattern&gt;\n  &lt;/servlet-mapping&gt;\n&lt;/web-app&gt; \n</code></pre></p>"},{"location":"Spring%20Framework/mvc/#viewsbook","title":"views\\book","text":"<p>books.jsp<pre><code>&lt;%@page import=\"java.util.List\"%&gt;\n&lt;%@ page language=\"java\" contentType=\"text/html; charset=ISO-8859-1\"\n    pageEncoding=\"ISO-8859-1\"%&gt;\n&lt;%@ page import=\"com.psl.model.book.Book\"%&gt;\n&lt;%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\"%&gt;\n&lt;%@ page isELIgnored=\"false\"%&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=\"ISO-8859-1\"&gt;\n&lt;title&gt;Insert title here&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form method=\"post\" action=\"addbook\"&gt;\n        &lt;h1&gt;BUY BOOKS HERE&lt;/h1&gt;\n        &lt;table&gt;\n            &lt;tr&gt;\n                &lt;td&gt;\n                    &lt;table&gt;\n                        &lt;tr&gt;\n                            &lt;td&gt;Acc. No.&lt;/td&gt;\n                            &lt;td&gt;&lt;input type=\"text\" id=\"accessionNumber\"\n                                name=\"accessionNumber\"&gt;&lt;/td&gt;\n                        &lt;/tr&gt;\n                        &lt;tr&gt;\n                            &lt;td&gt;Title&lt;/td&gt;\n                            &lt;td&gt;&lt;input type=\"text\" id=\"title\" name=\"title\"&gt;&lt;/td&gt;\n                        &lt;/tr&gt;\n                        &lt;tr&gt;\n                            &lt;td&gt;Price&lt;/td&gt;\n                            &lt;td&gt;&lt;input type=\"text\" id=\"price\" name=\"price\"&gt;&lt;/td&gt;\n                        &lt;/tr&gt;\n                        &lt;tr&gt;\n                            &lt;td&gt;&lt;/td&gt;\n                            &lt;td&gt;&lt;input type=\"submit\"&gt;&lt;/td&gt;\n                        &lt;/tr&gt;\n                    &lt;/table&gt;\n        &lt;/table&gt;\n        &lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;\n                &lt;table border=\"1\" align=\"right\"&gt;\n                    &lt;tr&gt;\n                        &lt;th&gt;Acc No&lt;/th&gt;\n                        &lt;th&gt;Title&lt;/th&gt;\n                        &lt;th&gt;Price&lt;/th&gt;\n                    &lt;/tr&gt;\n                    &lt;c:forEach var=\"book\" items=\"${books}\"&gt;\n                        &lt;tr&gt;\n                            &lt;td&gt;${book.accessionNumber}&lt;/td&gt;\n                            &lt;td&gt;${book.title}&lt;/td&gt;\n                            &lt;td&gt;${book.price}&lt;/td&gt;\n                        &lt;/tr&gt;\n                    &lt;/c:forEach&gt;\n                &lt;/table&gt;\n            &lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;/table&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> booksaddeded.jsp<pre><code>&lt;%@page import=\"java.util.List\"%&gt;\n&lt;%@ page language=\"java\" contentType=\"text/html; charset=ISO-8859-1\"\n    pageEncoding=\"ISO-8859-1\"%&gt;\n&lt;%@ page import=\"com.psl.model.book.Book\"%&gt;\n&lt;%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\"%&gt;\n&lt;%@ page isELIgnored=\"false\"%&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=\"ISO-8859-1\"&gt;\n&lt;title&gt;Insert title here&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;BUY BOOKS HERE&lt;/h1&gt;\n    &lt;form action=\"books\"&gt;\n        &lt;table&gt;\n            &lt;tr&gt;\n                &lt;td&gt;\n                    &lt;table border=\"1\" align=\"right\"&gt;\n                        &lt;tr&gt;\n                            &lt;th&gt;Acc No&lt;/th&gt;\n                            &lt;th&gt;Title&lt;/th&gt;\n                            &lt;th&gt;Price&lt;/th&gt;\n                        &lt;/tr&gt;\n                        &lt;tr&gt;\n                            &lt;td&gt;${book.accessionNumber}&lt;/td&gt;\n                            &lt;td&gt;${book.title}&lt;/td&gt;\n                            &lt;td&gt;${book.price}&lt;/td&gt;\n                        &lt;/tr&gt;\n                        &lt;tr&gt;\n                            &lt;td&gt;&lt;/td&gt;\n                            &lt;td&gt;&lt;/td&gt;\n                            &lt;td&gt;&lt;input type=\"submit\" value=Allbooks\ufffd&gt;&lt;/td&gt;\n                        &lt;/tr&gt;\n                    &lt;/table&gt;\n                &lt;/td&gt;\n            &lt;/tr&gt;\n        &lt;/table&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p>"}]}